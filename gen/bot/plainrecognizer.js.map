{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/bot/plainrecognizer.ts"],"names":[],"mappings":"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","file":"bot/plainrecognizer.js","sourcesContent":["\n/**\n * @copyright (c) 2016 Gerd Forstmann\n * @file plainrecognizer.ts\n *\n * A recognizer parametrized by regex expressions\n */\n\nimport * as builder from 'botbuilder';\nimport * as InputFilter from '../match/inputFilter';\nimport * as IMatch from '../match/ifmatch';\nimport * as debug from 'debug';\nconst debuglog = debug('plainrecognizer');\n\nconst AnyObject = Object as any;\n\nexport function recognize(sString, mRules: Array<IMatch.IntentRule>) {\n  var res = undefined;\n  mRules.every(function (oRule) {\n    res = matchRegularExpression(sString, oRule);\n    return !res;\n  })\n  return res;\n}\n\nexport function countParenGroups(s: string) {\n  var res = 0;\n  for (var i = 0; i < s.length; ++i) {\n    if (s.charAt(i) === '(') {\n      ++res;\n    }\n  }\n  return res;\n}\n\n/**\n * given a string, e.g.\n * \"who is the <category> of <A1>\",\n * @param {string} a\n * @returns {IMatch.IRule} a regexp rule\n */\nexport function parseRuleString(a: string): IMatch.IntentRule {\n  var s = \"^\" + a + \"$\";\n  var argMaps = {};\n  var m = undefined;\n  while (m = /<([^>]+)>([?]?)/.exec(s)) {\n    var cat = m[1];\n    var greedy = m[2];\n    var pos = 1 + countParenGroups(s.substring(0, m.index));\n    if(greedy) {\n      s = s.replace(\"<\" + cat + \">?\", \"(.*?)\");\n    } else {\n        s = s.replace(\"<\" + cat + \">\", \"(.*)\");\n      }\n    if (argMaps[cat]) {\n      throw Error(\"Model error duplicate entry!\")\n    }\n    argMaps[cat] = pos;\n  }\n  return {\n    type: 1,\n    regexp: new RegExp(s, \"i\"),\n    argsMap: argMaps\n  };\n}\n\n\n/**\n * given a string, e.g.\n * \"who is the <category> of <A1>\",\n * @param {string} a\n * @returns {IMatch.IRule} a regexp rule\n */\nexport function parseRuleArray(a: Array<any>): IMatch.IntentRule {\n  var s = \"^\" + a + \"$\";\n  var r = a[0];\n  if(typeof a[0] === \"string\") {\n    r = new RegExp(a[0],\"i\");\n  }\n  if (!(r instanceof RegExp)) {\n    throw Error(\"illegal state\" + JSON.stringify(a));\n  }\n  return {\n    type: 1,\n    regexp: r,\n    argsMap: a[1]\n  };\n}\n\n\nexport function parseRule(a: any): IMatch.IntentRule {\n  if (typeof a === 'string') {\n    return parseRuleString(a);\n  } else if (Array.isArray(a)) {\n    return parseRuleArray(a);\n  }\n  throw new Error(\"unknown rule definition\");\n}\n\nexport function parseRules(oJSON: { [key: string]: any }): { [key: string]: Array<IMatch.IntentRule> } {\n  var res = {};\n  Object.keys(oJSON).forEach(function (sKey) {\n    res[sKey] = oJSON[sKey].map(function (oRule) {\n      return parseRule(oRule);\n    })\n  });\n  return res;\n};\n\nexport function trimValueAdjusting(value : string) : { deltaStart :number, value : string} {\n  var res = { deltaStart : 0, value : value };\n  var m = value.match(/^\\s+/);\n  if(m) {\n    res.deltaStart = m[0].length;\n    value = value.substr(res.deltaStart);\n  }\n  m = value.match(/\\s+$/);\n  if(m) {\n    value = value.substr(0, value.length - m[0].length);\n  }\n  res.value = value;\n  return res;\n\n}\n\nexport function extractArgsMap(s : string, match: Array<string>, argsMap: { [key: string]: number }): Array<builder.IEntity> {\n  if (!argsMap) {\n    return [];\n  }\n  var result = [];\n  Object.keys(argsMap).forEach(function (sKey) {\n    var res = {} as builder.IEntity;\n    var index = argsMap[sKey];\n    var value = match[index]\n    if ((typeof value === \"string\") && value.length > 0) {\n      res.type = sKey;\n      res.entity = value;\n      res.startIndex = s.indexOf(value); // this may not be precise\n      var trimAdjust = trimValueAdjusting(value);\n      res.startIndex += trimAdjust.deltaStart;\n      res.entity = trimAdjust.value;\n      res.endIndex = res.startIndex + trimAdjust.value.length;\n      //res[sKey] = value\n      result.push(res);\n    }\n  }\n  );\n  return result;\n}\n\nexport function matchRegularExpression(text : string, oRule : IMatch.IntentRule) : builder.IIntentRecognizerResult {\n  debuglog(\"regexp is \" + oRule.regexp.toString());\n  debuglog(\" text is \" + text);\n  var m = oRule.regexp.exec(text);\n  if (!m) {\n    return undefined;\n  }\n  var res = {} as builder.IIntentRecognizerResult;\n  res.entities = extractArgsMap(text, m, oRule.argsMap);\n  res.score = 0.9;\n  debuglog(\"match \" + JSON.stringify(m));\n  debuglog('Found one' + JSON.stringify(res, undefined, 2));\n  return res;\n}\n\n\nexport function trimTrailingSentenceDelimiters(text : string) : string {\n  var m = /([!.;, ?]|\\s)+$/.exec(text);\n  if (m) {\n    text = text.substr(0,text.length- m[0].length);\n  }\n  return text;\n}\n\nexport function normalizeWhitespace(text : string) : string {\n  text = text.replace(/\\s+/g,' ');\n  return text;\n}\n\n/**\n * Givena string, replace all \".....\"  with <word>\n */\nexport function compactQuoted(text: string) : string {\n  text = text.replace(/\"[^\"]+\"/g, \"<word>\");\n  return text;\n}\n\n\nexport function countCompactWords(text: string) : number {\n  text = text.replace(/,/g, ' ');\n  text = text.replace(/ \\s+/g, ' ');\n  return text.split(\" \").length;\n}\n\nexport function checkForLength(text) : builder.IIntentRecognizerResult {\n    var textStripped = trimTrailingSentenceDelimiters(text);\n    if((textStripped.length > 200) || (countCompactWords(compactQuoted(text)) > 20)) {\n      return {\n        intent: \"TooLong\",\n        score : 1.0,\n        entities : []\n      };\n    }\n    return undefined;\n}\n\nexport function recognizeText(text : string, aRules : Array<IMatch.IntentRule>) : builder.IIntentRecognizerResult{\n    var res = undefined;\n    aRules.every(function (oRule) {\n        res = matchRegularExpression(text, oRule);\n        return !res;\n    });\n    return res;\n}\n\nexport class RegExpRecognizer implements builder.IIntentRecognizer {\n  oRules: { [key: string]: Array<IMatch.IntentRule> };\n\n  constructor(xRules: { [key: string]: Array<IMatch.IntentRule> }) {\n    this.oRules = xRules;\n    debuglog(\"rules \" + JSON.stringify(this.oRules));\n  };\n\n  recognize(context: builder.IRecognizeContext, callback: (err: Error, result: builder.IIntentRecognizerResult) => void): void {\n    var u = {} as builder.IIntentRecognizerResult;\n    var text = context.message.text;\n    var that = this;\n    var r = checkForLength(text);\n    if(r) {\n      callback(undefined,r);\n      return;\n    }\n    debuglog(\"rules \" + JSON.stringify(this.oRules));\n\n    var text = trimTrailingSentenceDelimiters(text);\n\n    var results = Object.keys(this.oRules).map(function (sKey) {\n      var u = recognizeText(text, that.oRules[sKey]);\n      if (u) {\n        u.intent = sKey;\n      }\n      return u ?  u : undefined;\n    }).filter(function (o) { return !!o; });\n    if (results.length > 1) {\n      /* TODO abiguous */\n      debuglog(\"ambiguous result for >\" + text + \"<\" + JSON.stringify(res));\n    }\n    if (results.length > 0) {\n      var res = results[0];\n      callback(undefined, res);\n      return;\n    }\n    debuglog('recognizing nothing');\n    u.intent = \"None\";\n    u.score = 0.1;\n    var e1 = {} as builder.IEntity;\n    e1.startIndex = \"exit \".length;\n    e1.endIndex = context.message.text.length;\n    e1.score = 0.1;\n    u.entities = [];\n    callback(undefined, u);\n  }\n} // class\n\n\n\n"],"sourceRoot":"ABC"}