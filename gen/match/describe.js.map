{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/describe.ts"],"names":[],"mappings":"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","file":"match/describe.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.explain\n * @file explain.ts\n * @copyright (c) 2016 Gerd Forstmann\n *\n * Functions dealing with explaining facts, categories etc.\n */\n\n\nimport * as InputFilter from './inputFilter';\nimport * as Algol from './algol';\nimport * as debug from 'debug';\n\nconst debuglog = debug('describe');\nimport * as logger from '../utils/logger';\nvar logPerf = logger.perf(\"perflistall\");\nvar perflog = debug('perf');\n//const perflog = logger.perf(\"perflistall\");\n\nimport * as IMatch from './ifmatch';\n\nimport * as Toolmatcher from './toolmatcher';\nimport { BreakDown } from 'fdevsta_monmove';\n\nimport { Sentence as Sentence } from 'abot_erbase';\n\nimport { Word as Word } from 'abot_erbase';\nimport * as Operator from './operator';\n\nimport * as WhatIs from './whatis';\n\nimport { Model } from 'fdevsta_monmove';\n\n\nimport * as Match from './match';\n\n\nimport * as Utils from 'abot_utils';\n\n\nvar sWords = {};\n\nexport function isSynonymFor(exactWord : string, sloppyWord : string, theModel: IMatch.IModels) : boolean {\n  // TODO: use model synonyms\n  return sloppyWord === \"name\" && exactWord === \"element name\";\n}\n\nexport function sloppyOrExact(exactWord : string, sloppyWord : string, theModel: IMatch.IModels) {\n  if(exactWord.toLowerCase() === sloppyWord.toLowerCase()) {\n    return '\"' + sloppyWord + '\"';\n  }\n  // TODO, find plural s etc.\n  // still exact,\n  //\n  if(isSynonymFor(exactWord,sloppyWord,theModel)) {\nreturn '\"' + sloppyWord + '\" (interpreted as synonym for \"' + exactWord +'\")';\n  }\n  //todo, find is synonymfor ...\n  // TODO, a synonym for ...\n  return '\"' + sloppyWord + '\" (interpreted as \"' + exactWord +'\")';\n}\n\ninterface IDescribeCategory {\n    totalrecords : number,\n    presentrecords : number,\n    values : { [key : string] : number},\n    multivalued : boolean\n  }\n\nexport function countRecordPresence(category : string, domain : string, theModel : IMatch.IModels) : IDescribeCategory {\n  var res = { totalrecords : 0,\n    presentrecords : 0,\n    values : { },  // an their frequency\n    multivalued : false\n  } as IDescribeCategory;\n  theModel.records.forEach(function(record) {\n    //debuglog(JSON.stringify(record,undefined,2));\n    if(record._domain !== domain) {\n      return;\n    }\n    res.totalrecords++;\n    var val = record[category];\n    var valarr = [val];\n    if(Array.isArray(val)) {\n      res.multivalued = true;\n      valarr = val;\n    }\n    // todo wrap arr\n    if(val !== undefined && val !== \"n/a\") {\n      res.presentrecords ++;\n    }\n    valarr.forEach(function(val) {\n      res.values[val] = (res.values[val] || 0) + 1;\n    })\n  })\n  return res;\n}\n\n// category => matchedwords[];\n\ninterface IDescribeFact {\n    totalrecords : number,\n    presentrecords : number,\n    multivalued : boolean\n  }\n\nexport function countRecordPresenceFact(fact : string, category : string, domain : string, theModel : IMatch.IModels) : IDescribeFact {\n  var res = { totalrecords : 0,\n    presentrecords : 0,\n    values : { },  // an their frequency\n    multivalued : false\n  } as IDescribeCategory;\n  theModel.records.forEach(function(record) {\n    //debuglog(JSON.stringify(record,undefined,2));\n    if(record._domain !== domain) {\n      return;\n    }\n    res.totalrecords++;\n    var val = record[category];\n    var valarr = [val];\n    if(Array.isArray(val)) {\n      if(val.indexOf(fact) >= 0) {\n        res.multivalued = true;\n        valarr = val;\n        res.presentrecords++;\n      }\n    } else if (val === fact) {\n        res.presentrecords++;\n    }\n  })\n  return res;\n}\n\nexport function makeValuesListString(realvalues: string[]) : string {\n  var valuesString = \"\";\n  var totallen = 0;\n  var listValues = realvalues.filter(function(val, index) {\n    totallen = totallen + val.length;\n  return (index < Algol.DescribeValueListMinCountValueList) || (totallen < Algol.DescribeValueListLengthCharLimit);\n  });\n  if(listValues.length === 1 && realvalues.length === 1) {\n    return 'The sole value is \\\"' + listValues[0] + '\"';\n  }\n  var maxlen = listValues.reduce( (prev,val) => Math.max(prev,val.length),0);\n  if(maxlen > 30) {\n    return \"Possible values are ...\\n\" +\n      listValues.reduce( (prev,val,index) => (prev + \"(\" + (index + 1) + '): \"' + val + '\"\\n'\n      ),\"\")\n      + ( listValues.length === realvalues.length ? \"\" : \"...\");\n  }\n  var list = \"\";\n  if(listValues.length === realvalues.length) {\n    list = Utils.listToQuotedCommaOr(listValues);\n  } else {\n    list = '\"' + listValues.join('\", \"') + '\"';\n  }\n  return \"Possible values are ...\\n\"\n    + list\n    + ( listValues.length === realvalues.length ? \"\" : \" ...\");\n}\n\nexport function toPercent(a : number, b: number) : string {\n  return \"\" + (100* a / b).toFixed(1);\n}\n\n\nexport interface ICategoryStats {\n  categoryDesc : IMatch.ICategoryDesc,\n  presentRecords : number,\n  distinct : string,\n  delta : string,\n  percPresent : string,\n  sampleValues : string,\n};\n\nexport function getCategoryStatsInDomain(category : string, filterdomain : string, theModel: IMatch.IModels) : ICategoryStats {\n  const recordCount = countRecordPresence(category, filterdomain, theModel);\n  debuglog(JSON.stringify(theModel.records.filter(a => a._domain === \"Cosmos\"),undefined,2));\n  const percent = toPercent(recordCount.presentrecords , recordCount.totalrecords);\n  debuglog(JSON.stringify(recordCount.values));\n  var allValues =Object.keys(recordCount.values);\n  var realvalues = allValues.filter(value => (value !== 'undefined') && (value !== 'n/a'));\n  debuglog\n  realvalues.sort();\n  var undefNaDelta =  (allValues.length - realvalues.length);\n  var delta =  (undefNaDelta) ?  \"(+\" + undefNaDelta + \")\" : \"\";\n  const distinct = '' + realvalues.length;\n  const valuesList = makeValuesListString(realvalues);\n  return {\n    categoryDesc : theModel.full.domain[filterdomain].categories[category],\n    distinct : distinct,\n    delta : delta,\n    presentRecords : recordCount.presentrecords,\n    percPresent : percent,\n    sampleValues : valuesList\n  }\n}\n\nexport function describeCategoryInDomain(category : string, filterdomain : string, theModel: IMatch.IModels) : string {\n/*  const recordCount = countRecordPresence(category, filterdomain, theModel);\n  debuglog(JSON.stringify(theModel.records.filter(a => a._domain === \"Cosmos\"),undefined,2));\n  const percent = toPercent(recordCount.presentrecords , recordCount.totalrecords);\n  debuglog(JSON.stringify(recordCount.values));\n  var allValues =Object.keys(recordCount.values);\n  var realvalues = allValues.filter(value => (value !== 'undefined') && (value !== 'n/a'));\n  debuglog\n  realvalues.sort();\n  var undefNaDelta =  (allValues.length - realvalues.length);\n  var delta =  (undefNaDelta) ?  \"(+\" + undefNaDelta + \")\" : \"\";\n  const distinct = '' + realvalues.length;\n\n  const valuesList = makeValuesListString(realvalues);\n*/\n  var stats = getCategoryStatsInDomain(category,filterdomain,theModel);\n\n  var res = 'is a category in domain \"' + filterdomain + '\"\\n'\n  + `It is present in ${stats.presentRecords} (${stats.percPresent}%) of records in this domain,\\n` +\n   `having ${stats.distinct + ''}${stats.delta} distinct values.\\n`\n  + stats.sampleValues;\n\n  var desc = theModel.full.domain[filterdomain].categories[category] || {} as IMatch.ICategoryDesc;\n  var description = desc.description || \"\";\n  if (description) {\n    res += `\\nDescription: ${description}`;\n  }\n  return res;\n}\n\nexport function findRecordsWithFact(matchedString: string, category : string, records : any, domains : { [key : string] : number}) : any[] {\n  return records.filter(function(record)  {\n\n    let res = (record[category] === matchedString);\n    if( res) {\n      increment(domains,records._domain);\n    }\n    return res;\n  });\n}\n\nexport function increment(map : {[key: string] : number}, key : string) {\n  map[key] = (map[key] || 0) + 1;\n}\n\nfunction sortedKeys<T>(map : {[key : string] : T}) : string[] {\n  var r = Object.keys(map);\n  r.sort();\n  return r;\n}\n\nexport function describeDomain(fact : string, domain: string, theModel: IMatch.IModels) : string {\n  var count = theModel.records.reduce(function(prev, record) {\n    return prev + ((record._domain === domain) ? 1 : 0);\n  },0);\n  var catcount = Model.getCategoriesForDomain(theModel, domain).length;\n  var res = sloppyOrExact(domain, fact, theModel) + `is a domain with ${catcount} categories and ${count} records\\n`;\n  var desc = theModel.full.domain[domain].description || \"\";\n  if(desc) {\n    res += `Description:` + desc + `\\n`;\n  }\n  return res;\n}\n\nexport function describeFactInDomain(fact : string, filterdomain : string, theModel: IMatch.IModels) : string {\n  var sentences = WhatIs.analyzeContextString(fact,  theModel.rules);\n  //console.log(\"here sentences \" + JSON.stringify(sentences));\n  var lengthOneSentences = sentences.sentences.filter(oSentence => oSentence.length === 1);\n  var res = '';\n  // remove categories and domains\n  var onlyFacts = lengthOneSentences.filter(oSentence =>{\n    debuglog(JSON.stringify(oSentence[0]));\n    return !Word.Word.isDomain(oSentence[0]) &&\n           !Word.Word.isFiller(oSentence[0]) && !Word.Word.isCategory(oSentence[0])\n  }\n  );\n  var onlyDomains = lengthOneSentences.filter(oSentence =>{\n    return Word.Word.isDomain(oSentence[0]);\n  });\n  if(onlyDomains && onlyDomains.length > 0) {\n    debuglog(JSON.stringify(onlyDomains));\n    onlyDomains.forEach(function(sentence) {\n      var domain = sentence[0].matchedString;\n      if( !filterdomain || domain === filterdomain) {\n        debuglog(\"here match \" + JSON.stringify(sentence));\n        res += describeDomain(fact, sentence[0].matchedString, theModel);\n      }\n    })\n  }\n\n  debuglog(\"only facts: \" + JSON.stringify(onlyFacts));\n  var recordMap = {};\n  var domainsMap = {} as {[key: string] : number};\n  var matchedwordMap = {} as {[key: string] : number};\n  var matchedCategoryMap = {} as {[key: string] : number};\n  // look for all records\n  onlyFacts.forEach(oSentence =>\n    oSentence.forEach(oWord =>\n      {\n        increment(matchedwordMap, oWord.matchedString);\n        increment(matchedCategoryMap, oWord.category);\n      }\n    )\n  );\n  // we have:\n  // a list of categories,\n  // a list of matchedWords  ->\n  //\n\n  var categories = sortedKeys(matchedCategoryMap);\n  var matchedwords = sortedKeys(matchedwordMap);\n  debuglog(\"matchedwords: \" + JSON.stringify(matchedwords));\n  debuglog(\"categories: \" + JSON.stringify(categories));\n\n  //var allMatchedWords = { [key : string] : number };\n  var domainRecordCount = {} as {[key: string] : number};\n  var domainMatchCatCount = {} as {[key: string] :\n       {[key: string] :\n     {[key: string] : number}}};\n  // we prepare the following structure\n  //\n  // {domain} : recordcount;\n  // {matchedwords} :\n  // {domain} {matchedword} {category} presencecount\n  theModel.records.forEach(function(record) {\n    if(!filterdomain || record._domain === filterdomain ) {\n      domainRecordCount[record._domain] = (domainRecordCount[record._domain] || 0) + 1;\n      matchedwords.forEach(matchedword =>\n        categories.forEach(category => {\n          if( record[category] === matchedword) {\n            var md = domainMatchCatCount[record._domain] = domainMatchCatCount[record._domain] || {};\n            var mdc = md[matchedword] =  md[matchedword] || {};\n            increment(mdc,category);\n          };\n        }\n        )\n      );\n    }\n  });\n  debuglog(JSON.stringify(domainMatchCatCount,undefined,2));\n  debuglog(JSON.stringify(domainRecordCount,undefined,2));\n  var domains = sortedKeys(domainMatchCatCount);\n  var resNext =  '\"' + fact + '\" has a meaning in ';\n  var single = false;\n  if(Object.keys(domainMatchCatCount).length > 1) {\n    resNext += '' + domains.length +\n              ' domains: ' + Utils.listToQuotedCommaAnd(domains) + \"\";\n  } else if(domains.length === 1) {\n    if(!filterdomain) {\n      resNext += `one `;\n    }\n    resNext += `domain \"${domains[0]}\":`;\n    single = true;\n  } else {\n    if(res) {\n      return res;\n    }\n    var factclean = Utils.stripQuotes(fact);\n    if(filterdomain) {\n      return `\"${factclean}\" is no known fact in domain \"${filterdomain}\".\\n`;\n    }\n    return `I don't know anything about \"${factclean}\".\\n`;\n  }\n  res += resNext + \"\\n\"; // ...\\n\";\n  domains.forEach(function(domain) {\n    var md = domainMatchCatCount[domain];\n    Object.keys(md).forEach(matchedstring => {\n      var mdc = md[matchedstring];\n      if(!single) {\n        res += 'in domain \"' + domain + '\" ';\n      }\n      var catsingle = Object.keys(mdc).length === 1;\n      res += `${sloppyOrExact(matchedstring,fact,theModel)} `;\n      if(!catsingle) {\n        res += `...\\n`;\n      }\n      Object.keys(mdc).forEach(category => {\n      var percent =  toPercent(mdc[category],domainRecordCount[domain]);\n\n        res += `is a value for category \"${category}\" present in ${mdc[category]}(${percent}%) of records;\\n`;\n      });\n    });\n  });\n  return res;\n}\n\nexport function describeCategory(category : string, filterDomain: string, model: IMatch.IModels,message : string) : string[] {\n  var res = [];\n  var doms = Model.getDomainsForCategory(model,category);\n  if(filterDomain) {\n    if(doms.indexOf(filterDomain) >= 0) {\n      res.push(describeCategoryInDomain(category,filterDomain,model));\n      return res;\n    } else {\n      return [];\n    }\n  }\n  doms.sort();\n  doms.forEach(function(domain) {\n        res.push(describeCategoryInDomain(category, domain, model));\n  });\n  return res;\n}\n"],"sourceRoot":"ABC"}