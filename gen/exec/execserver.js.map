{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/exec/execserver.ts"],"names":[],"mappings":"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","file":"exec/execserver.js","sourcesContent":["/**\r\n * Functionality to execute a certain response on the server,\r\n * interpreting a general model context\r\n *\r\n *\r\n * via a) commandline (e.g. browser startup)\r\n * @file\r\n * @copyright (c) 2016 Gerd Forstmann\r\n */\r\n\r\nimport * as intf from 'constants';\r\n\r\nimport * as debug from 'debug';\r\n\r\nimport *  as IFMatch from '../match/ifmatch';\r\n\r\nconst debuglog = debug('execserver')\r\n\r\nimport { exec } from 'child_process';\r\n\r\nimport * as IMatch from '../match/ifmatch';\r\nimport * as Match from '../match/match';\r\n\r\n\r\nimport * as inputFilterRules from '../match/inputFilterRules';\r\n\r\n\r\nimport * as Toolmatch from '../match/toolmatch';\r\n\r\nimport * as Exectemplate from './exectemplate';\r\n\r\nexport function noStar(a: string, b: string) {\r\n  if (b === '*') {\r\n    return a;\r\n  }\r\n  if (a === '*') {\r\n    return b;\r\n  }\r\n  if (a !== b) {\r\n    throw new Error('Illegal Argument no match ' + a + \" \" + b);\r\n  }\r\n  return b;\r\n}\r\n\r\nexport function makeGenericText(match: IMatch.IToolMatch, setId: string, record: IMatch.IRecord): string {\r\n  var res = \"start \" + match.tool.name;\r\n  var set = match.tool.sets[setId];\r\n  var context = Toolmatch.makeMatchSet(match, set);\r\n  set.set.forEach(function (category, index) {\r\n    var value = noStar(context[category], record[category]);\r\n    var prefix = \"\";\r\n    if (index === 0) {\r\n      prefix += ' using ';\r\n    } else if (index === set.set.length - 1) {\r\n      prefix += ' and ';\r\n    } else {\r\n      prefix = '; ';\r\n    }\r\n    if (category === \"category\") {\r\n      res = res + prefix +'\"' + value + '\"';\r\n    }\r\n    res = res + prefix + category + ' \"' + value  + '\"';\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function execTool(match: IMatch.IToolMatch, records: IMatch.IRecord[], bExplain?: boolean ): {\r\n  text: string,\r\n  action: any\r\n} {\r\n  //\r\n  debuglog(\"records for match \" + JSON.stringify(match));\r\n  var matchSetRecord = Toolmatch.findFirstSetRecord(match, records);\r\n  if(!matchSetRecord) {\r\n    return {\r\n      text : \"cannot start\",\r\n      action: {}\r\n    }\r\n  };\r\n  var set = match.tool.sets[matchSetRecord.setId];\r\n  var pattern = matchSetRecord.record[set.response];\r\n\r\n  var context = Toolmatch.makeMatchSet(match, set);\r\n  var url = Exectemplate.expandTemplate(context, pattern);\r\n  var text = \"\";\r\n  debuglog(\"record \" +JSON.stringify(\"matchSetRecord \"));\r\n  var patternText = matchSetRecord.record[\"_text\" + set.response];\r\n  if (patternText) {\r\n    text = Exectemplate.expandTemplate(context, patternText);\r\n  } else {\r\n    text = makeGenericText(match, matchSetRecord.setId, matchSetRecord.record)\r\n  }\r\n  return {\r\n    text: text,\r\n    action: { url: url }\r\n  }\r\n}\r\n"],"sourceRoot":"ABC"}