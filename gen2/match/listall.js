/**
 *
 * @module jfseb.fdevstart.analyze
 * @file analyze.ts
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('listall');
var logger = require("../utils/logger");
var logPerf = logger.perf("perflistall");
var perflog = debug('perf');
var BreakDown = require("./breakdown");
var Operator = require("./operator");
var WhatIs = require("./whatis");
var ErError = require("./ererror");
var Model = require("../model/model");
var sWords = {};
function matchRecordHavingCategory(category, records) {
    debuglog(debuglog.enabled ? JSON.stringify(records, undefined, 2) : "-");
    var relevantRecords = records.filter(function (record) {
        return record[category] !== undefined && record[category] !== null;
    });
    var res = [];
    debuglog("relevant records nr:" + relevantRecords.length);
    return relevantRecords;
}
exports.matchRecordHavingCategory = matchRecordHavingCategory;
function analyzeContextString(contextQueryString, rules) {
    return WhatIs.analyzeContextString(contextQueryString, rules);
}
exports.analyzeContextString = analyzeContextString;
// const result = WhatIs.resolveCategory(cat, a1.entity,
//   theModel.mRules, theModel.tools, theModel.records);
function listAllWithContext(category, contextQueryString, aRules, records, domainCategoryFilter) {
    var res = listAllTupelWithContext([category], contextQueryString, aRules, records, domainCategoryFilter);
    var answers = res.tupelanswers.map(function (o) {
        return {
            sentence: o.sentence,
            record: o.record,
            category: o.categories[0],
            result: o.result[0],
            _ranking: o._ranking
        };
    });
    return {
        sentences: res.sentences,
        errors: res.errors,
        tokens: res.tokens,
        answers: answers
    };
}
exports.listAllWithContext = listAllWithContext;
function listAllWithCategory(category, records) {
    var matchedAnswers = matchRecordHavingCategory(category, records); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
    debuglog(" listAllWithCategory:" + JSON.stringify(matchedAnswers, undefined, 2));
    return matchedAnswers;
}
exports.listAllWithCategory = listAllWithCategory;
function listAllTupelWithContext(categories, contextQueryString, aRules, records, domainCategoryFilter) {
    if (contextQueryString.length === 0) {
        return {
            tupelanswers: [],
            errors: [ErError.makeError_EMPTY_INPUT()],
            tokens: []
        };
    } else {
        logPerf('listAllWithContext');
        perflog("totalListAllWithContext");
        var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);
        perflog("LATWC matching records (s=" + aSentencesReinforced.sentences.length + ")...");
        var matchedAnswers = WhatIs.matchRecordsQuickMultipleCategories(aSentencesReinforced, categories, records, domainCategoryFilter); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {
        if (debuglog.enabled) {
            debuglog(" matched Answers" + JSON.stringify(matchedAnswers, undefined, 2));
        }
        perflog("filtering topRanked (a=" + matchedAnswers.tupelanswers.length + ")...");
        var matchedFiltered = WhatIs.filterOnlyTopRankedTupel(matchedAnswers.tupelanswers);
        if (debuglog.enabled) {
            debuglog("LATWC matched top-ranked Answers" + JSON.stringify(matchedFiltered, undefined, 2));
        }
        perflog("totalListAllWithContext (a=" + matchedFiltered.length + ")");
        logPerf('listAllWithContext');
        return {
            tupelanswers: matchedFiltered,
            errors: aSentencesReinforced.errors,
            tokens: aSentencesReinforced.tokens
        };
    }
}
exports.listAllTupelWithContext = listAllTupelWithContext;
function filterStringListByOp(operator, fragment, srcarr) {
    var fragmentLC = BreakDown.trimQuotedSpaced(fragment.toLowerCase());
    return srcarr.filter(function (str) {
        return Operator.matches(operator, fragmentLC, str.toLowerCase());
    }).sort();
}
exports.filterStringListByOp = filterStringListByOp;
function compareCaseInsensitive(a, b) {
    var r = a.toLowerCase().localeCompare(b.toLowerCase());
    if (r) {
        return r;
    }
    return -a.localeCompare(b);
}
/**
 * Sort string list case insensitive, then remove duplicates retaining
 * "largest" match
 */
function removeCaseDuplicates(arr) {
    arr.sort(compareCaseInsensitive);
    debuglog('sorted arr' + JSON.stringify(arr));
    return arr.filter(function (s, index) {
        return index === 0 || 0 !== arr[index - 1].toLowerCase().localeCompare(s.toLowerCase());
    });
}
exports.removeCaseDuplicates = removeCaseDuplicates;
;
function getCategoryOpFilterAsDistinctStrings(operator, fragment, category, records, filterDomain) {
    var fragmentLC = BreakDown.trimQuoted(fragment.toLowerCase());
    var res = [];
    var seen = {};
    records.forEach(function (record) {
        if (filterDomain && record['_domain'] !== filterDomain) {
            return;
        }
        if (record[category] && Operator.matches(operator, fragmentLC, record[category].toLowerCase())) {
            if (!seen[record[category]]) {
                seen[record[category]] = true;
                res.push(record[category]);
            }
        }
    });
    return removeCaseDuplicates(res);
}
exports.getCategoryOpFilterAsDistinctStrings = getCategoryOpFilterAsDistinctStrings;
;
function likelyPluralDiff(a, pluralOfa) {
    var aLC = BreakDown.trimQuoted(a.toLowerCase()) || "";
    var pluralOfALC = BreakDown.trimQuoted((pluralOfa || "").toLowerCase()) || "";
    if (aLC === pluralOfALC) {
        return true;
    }
    if (aLC + 's' === pluralOfALC) {
        return true;
    }
    return false;
}
exports.likelyPluralDiff = likelyPluralDiff;
;
function joinSortedQuoted(strings) {
    if (strings.length === 0) {
        return "";
    }
    return '"' + strings.sort().join('"; "') + '"';
}
exports.joinSortedQuoted = joinSortedQuoted;
function joinDistinct(category, records) {
    var res = records.reduce(function (prev, oRecord) {
        prev[oRecord[category]] = 1;
        return prev;
    }, {});
    return joinSortedQuoted(Object.keys(res));
}
exports.joinDistinct = joinDistinct;
function formatDistinctFromWhatIfResult(answers) {
    return joinSortedQuoted(answers.map(function (oAnswer) {
        return oAnswer.result;
    }));
}
exports.formatDistinctFromWhatIfResult = formatDistinctFromWhatIfResult;
function joinResults(results) {
    var res = [];
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            if (res.indexOf(result.result) < 0) {
                res.push(result.result);
            }
            return prev + 1;
        }
    }, 0);
    return res;
}
exports.joinResults = joinResults;
var Utils = require("../utils/utils");
function joinResultsTupel(results) {
    var res = [];
    var cnt = results.reduce(function (prev, result) {
        if (result._ranking === results[0]._ranking) {
            var value = Utils.listToQuotedCommaAnd(result.result);
            if (res.indexOf(value) < 0) {
                res.push(value);
            }
            return prev + 1;
        }
    }, 0);
    return res;
}
exports.joinResultsTupel = joinResultsTupel;
function inferDomain(theModel, contextQueryString) {
    // console.log("here the string" + contextQueryString);
    //  console.log("here the rules" + JSON.stringify(theModel.mRules));
    var res = analyzeContextString(contextQueryString, theModel.rules);
    //console.log(JSON.stringify(res,undefined,2));
    // run through the string, search for a category
    if (!res.sentences.length) {
        return undefined;
    }
    var domains = [];
    //console.log(Sentence.dumpNiceArr(res));
    // do we have a domain ?
    res.sentences[0].forEach(function (oWordGroup) {
        if (oWordGroup.category === "domain") {
            domains.push(oWordGroup.matchedString);
        }
    });
    if (domains.length === 1) {
        debuglog("got a precise domain " + domains[0]);
        return domains[0];
    }
    if (domains.length > 0) {
        debuglog(debuglog.enabled ? "got more than one domain, confused  " + domains.join("\n") : '-');
        return undefined;
    }
    debuglog("attempting to determine categories");
    // try a category reverse map
    res.sentences[0].forEach(function (oWordGroup) {
        if (oWordGroup.category === "category") {
            var sCat = oWordGroup.matchedString;
            var doms = Model.getDomainsForCategory(theModel, sCat);
            doms.forEach(function (sDom) {
                if (domains.indexOf(sDom) < 0) {
                    domains.push(sDom);
                }
            });
        }
    });
    if (domains.length === 1) {
        debuglog("got a precise domain " + domains[0]);
        return domains[0];
    }
    debuglog(debuglog.enabled ? "got more than one domain, confused  " + domains.join("\n") : '-');
    return undefined;
}
exports.inferDomain = inferDomain;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9saXN0YWxsLnRzIiwibWF0Y2gvbGlzdGFsbC5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJkZWJ1Z2xvZyIsImxvZ2dlciIsImxvZ1BlcmYiLCJwZXJmIiwicGVyZmxvZyIsIkJyZWFrRG93biIsIk9wZXJhdG9yIiwiV2hhdElzIiwiRXJFcnJvciIsIk1vZGVsIiwic1dvcmRzIiwibWF0Y2hSZWNvcmRIYXZpbmdDYXRlZ29yeSIsImNhdGVnb3J5IiwicmVjb3JkcyIsImVuYWJsZWQiLCJKU09OIiwic3RyaW5naWZ5IiwidW5kZWZpbmVkIiwicmVsZXZhbnRSZWNvcmRzIiwiZmlsdGVyIiwicmVjb3JkIiwicmVzIiwibGVuZ3RoIiwiZXhwb3J0cyIsImFuYWx5emVDb250ZXh0U3RyaW5nIiwiY29udGV4dFF1ZXJ5U3RyaW5nIiwicnVsZXMiLCJsaXN0QWxsV2l0aENvbnRleHQiLCJhUnVsZXMiLCJkb21haW5DYXRlZ29yeUZpbHRlciIsImxpc3RBbGxUdXBlbFdpdGhDb250ZXh0IiwiYW5zd2VycyIsInR1cGVsYW5zd2VycyIsIm1hcCIsIm8iLCJzZW50ZW5jZSIsImNhdGVnb3JpZXMiLCJyZXN1bHQiLCJfcmFua2luZyIsInNlbnRlbmNlcyIsImVycm9ycyIsInRva2VucyIsImxpc3RBbGxXaXRoQ2F0ZWdvcnkiLCJtYXRjaGVkQW5zd2VycyIsIm1ha2VFcnJvcl9FTVBUWV9JTlBVVCIsImFTZW50ZW5jZXNSZWluZm9yY2VkIiwibWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXMiLCJtYXRjaGVkRmlsdGVyZWQiLCJmaWx0ZXJPbmx5VG9wUmFua2VkVHVwZWwiLCJmaWx0ZXJTdHJpbmdMaXN0QnlPcCIsIm9wZXJhdG9yIiwiZnJhZ21lbnQiLCJzcmNhcnIiLCJmcmFnbWVudExDIiwidHJpbVF1b3RlZFNwYWNlZCIsInRvTG93ZXJDYXNlIiwic3RyIiwibWF0Y2hlcyIsInNvcnQiLCJjb21wYXJlQ2FzZUluc2Vuc2l0aXZlIiwiYSIsImIiLCJyIiwibG9jYWxlQ29tcGFyZSIsInJlbW92ZUNhc2VEdXBsaWNhdGVzIiwiYXJyIiwicyIsImluZGV4IiwiZ2V0Q2F0ZWdvcnlPcEZpbHRlckFzRGlzdGluY3RTdHJpbmdzIiwiZmlsdGVyRG9tYWluIiwidHJpbVF1b3RlZCIsInNlZW4iLCJmb3JFYWNoIiwicHVzaCIsImxpa2VseVBsdXJhbERpZmYiLCJwbHVyYWxPZmEiLCJhTEMiLCJwbHVyYWxPZkFMQyIsImpvaW5Tb3J0ZWRRdW90ZWQiLCJzdHJpbmdzIiwiam9pbiIsImpvaW5EaXN0aW5jdCIsInJlZHVjZSIsInByZXYiLCJvUmVjb3JkIiwiT2JqZWN0Iiwia2V5cyIsImZvcm1hdERpc3RpbmN0RnJvbVdoYXRJZlJlc3VsdCIsIm9BbnN3ZXIiLCJqb2luUmVzdWx0cyIsInJlc3VsdHMiLCJjbnQiLCJpbmRleE9mIiwiVXRpbHMiLCJqb2luUmVzdWx0c1R1cGVsIiwidmFsdWUiLCJsaXN0VG9RdW90ZWRDb21tYUFuZCIsImluZmVyRG9tYWluIiwidGhlTW9kZWwiLCJkb21haW5zIiwib1dvcmRHcm91cCIsIm1hdGNoZWRTdHJpbmciLCJzQ2F0IiwiZG9tcyIsImdldERvbWFpbnNGb3JDYXRlZ29yeSIsInNEb20iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNQTs7QURLQSxJQUFBQSxRQUFBQyxRQUFBLE9BQUEsQ0FBQTtBQUVBLElBQU1DLFdBQVdGLE1BQU0sU0FBTixDQUFqQjtBQUNBLElBQUFHLFNBQUFGLFFBQUEsaUJBQUEsQ0FBQTtBQUNBLElBQUlHLFVBQVVELE9BQU9FLElBQVAsQ0FBWSxhQUFaLENBQWQ7QUFDQSxJQUFJQyxVQUFVTixNQUFNLE1BQU4sQ0FBZDtBQVFBLElBQUFPLFlBQUFOLFFBQUEsYUFBQSxDQUFBO0FBS0EsSUFBQU8sV0FBQVAsUUFBQSxZQUFBLENBQUE7QUFFQSxJQUFBUSxTQUFBUixRQUFBLFVBQUEsQ0FBQTtBQUNBLElBQUFTLFVBQUFULFFBQUEsV0FBQSxDQUFBO0FBRUEs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Ii8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIElucHV0RmlsdGVyIGZyb20gJy4vaW5wdXRGaWx0ZXInO1xuXG5pbXBvcnQgKiBhcyBBbGdvbCBmcm9tICcuL2FsZ29sJztcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgZGVidWdsb2cgPSBkZWJ1ZygnbGlzdGFsbCcpO1xuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG52YXIgbG9nUGVyZiA9IGxvZ2dlci5wZXJmKFwicGVyZmxpc3RhbGxcIik7XG52YXIgcGVyZmxvZyA9IGRlYnVnKCdwZXJmJyk7XG4vL2NvbnN0IHBlcmZsb2cgPSBsb2dnZXIucGVyZihcInBlcmZsaXN0YWxsXCIpO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5pbXBvcnQgKiBhcyBUb29sbWF0Y2hlciBmcm9tICcuL3Rvb2xtYXRjaGVyJztcbmltcG9ydCAqIGFzIEJyZWFrRG93biBmcm9tICcuL2JyZWFrZG93bic7XG5cbmltcG9ydCAqIGFzIFNlbnRlbmNlIGZyb20gJy4vc2VudGVuY2UnO1xuXG5pbXBvcnQgKiBhcyBXb3JkIGZyb20gJy4vd29yZCc7XG5pbXBvcnQgKiBhcyBPcGVyYXRvciBmcm9tICcuL29wZXJhdG9yJztcblxuaW1wb3J0ICogYXMgV2hhdElzIGZyb20gJy4vd2hhdGlzJztcbmltcG9ydCAqIGFzIEVyRXJyb3IgZnJvbSAnLi9lcmVycm9yJztcblxuaW1wb3J0ICogYXMgTW9kZWwgZnJvbSAnLi4vbW9kZWwvbW9kZWwnO1xuaW1wb3J0ICogYXMgTWF0Y2ggZnJvbSAnLi9tYXRjaCc7XG5cbnZhciBzV29yZHMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUmVjb3JkSGF2aW5nQ2F0ZWdvcnkoY2F0ZWdvcnk6IHN0cmluZywgcmVjb3JkczogQXJyYXk8SU1hdGNoLklSZWNvcmQ+KVxuICA6IEFycmF5PElNYXRjaC5JUmVjb3JkPiB7XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyBKU09OLnN0cmluZ2lmeShyZWNvcmRzLHVuZGVmaW5lZCwyKSA6IFwiLVwiKTtcbiAgdmFyIHJlbGV2YW50UmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQ6IElNYXRjaC5JUmVjb3JkKSB7XG4gICAgcmV0dXJuIChyZWNvcmRbY2F0ZWdvcnldICE9PSB1bmRlZmluZWQpICYmIChyZWNvcmRbY2F0ZWdvcnldICE9PSBudWxsKTtcbiAgfSk7XG4gIHZhciByZXMgPSBbXTtcbiAgZGVidWdsb2coXCJyZWxldmFudCByZWNvcmRzIG5yOlwiICsgcmVsZXZhbnRSZWNvcmRzLmxlbmd0aCk7XG4gIHJldHVybiByZWxldmFudFJlY29yZHM7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVDb250ZXh0U3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZyA6IHN0cmluZywgIHJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcykge1xuICByZXR1cm4gV2hhdElzLmFuYWx5emVDb250ZXh0U3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZyxydWxlcyk7XG59XG5cbi8vIGNvbnN0IHJlc3VsdCA9IFdoYXRJcy5yZXNvbHZlQ2F0ZWdvcnkoY2F0LCBhMS5lbnRpdHksXG4vLyAgIHRoZU1vZGVsLm1SdWxlcywgdGhlTW9kZWwudG9vbHMsIHRoZU1vZGVsLnJlY29yZHMpO1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RBbGxXaXRoQ29udGV4dChjYXRlZ29yeTogc3RyaW5nLCBjb250ZXh0UXVlcnlTdHJpbmc6IHN0cmluZyxcbiAgYVJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgcmVjb3JkczogQXJyYXk8SU1hdGNoLklSZWNvcmQ+LCBkb21haW5DYXRlZ29yeUZpbHRlcj86IElNYXRjaC5JRG9tYWluQ2F0ZWdvcnlGaWx0ZXIpOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc0Fuc3dlcnMge1xuICB2YXIgcmVzID0gbGlzdEFsbFR1cGVsV2l0aENvbnRleHQoW2NhdGVnb3J5XSwgY29udGV4dFF1ZXJ5U3RyaW5nLCBhUnVsZXMsIHJlY29yZHMsIGRvbWFpbkNhdGVnb3J5RmlsdGVyKTtcblxuICB2YXIgYW5zd2VycyA9IHJlcy50dXBlbGFuc3dlcnMubWFwKGZ1bmN0aW9uIChvKTogSU1hdGNoLklXaGF0SXNBbnN3ZXIge1xuICAgIHJldHVybiB7XG4gICAgICBzZW50ZW5jZTogby5zZW50ZW5jZSxcbiAgICAgIHJlY29yZDogby5yZWNvcmQsXG4gICAgICBjYXRlZ29yeTogby5jYXRlZ29yaWVzWzBdLFxuICAgICAgcmVzdWx0OiBvLnJlc3VsdFswXSxcbiAgICAgIF9yYW5raW5nOiBvLl9yYW5raW5nXG4gICAgfTtcbiAgfVxuICApO1xuICByZXR1cm4ge1xuICAgIHNlbnRlbmNlczogcmVzLnNlbnRlbmNlcyxcbiAgICBlcnJvcnM6IHJlcy5lcnJvcnMsXG4gICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgIGFuc3dlcnM6IGFuc3dlcnNcbiAgfTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdEFsbFdpdGhDYXRlZ29yeShjYXRlZ29yeTogc3RyaW5nLCByZWNvcmRzOiBBcnJheTxJTWF0Y2guSVJlY29yZD4pOiBBcnJheTxJTWF0Y2guSVJlY29yZD4ge1xuICB2YXIgbWF0Y2hlZEFuc3dlcnMgPSBtYXRjaFJlY29yZEhhdmluZ0NhdGVnb3J5KGNhdGVnb3J5LCByZWNvcmRzKTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gIGRlYnVnbG9nKFwiIGxpc3RBbGxXaXRoQ2F0ZWdvcnk6XCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkQW5zd2VycywgdW5kZWZpbmVkLCAyKSk7XG4gIHJldHVybiBtYXRjaGVkQW5zd2Vycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KGNhdGVnb3JpZXM6IHN0cmluZ1tdLCBjb250ZXh0UXVlcnlTdHJpbmc6IHN0cmluZyxcbiAgYVJ1bGVzOiBJTWF0Y2guU3BsaXRSdWxlcywgcmVjb3JkczogQXJyYXk8SU1hdGNoLklSZWNvcmQ+LCBkb21haW5DYXRlZ29yeUZpbHRlcj86IElNYXRjaC5JRG9tYWluQ2F0ZWdvcnlGaWx0ZXIpOiBJTWF0Y2guSVByb2Nlc3NlZFdoYXRJc1R1cGVsQW5zd2VycyB7XG4gIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR1cGVsYW5zd2VycyA6IFtdLFxuICAgICAgZXJyb3JzIDogW0VyRXJyb3IubWFrZUVycm9yX0VNUFRZX0lOUFVUKCldICxcbiAgICAgIHRva2VucyA6W10sXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBsb2dQZXJmKCdsaXN0QWxsV2l0aENvbnRleHQnKTtcbiAgICBwZXJmbG9nKFwidG90YWxMaXN0QWxsV2l0aENvbnRleHRcIik7XG4gICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gYW5hbHl6ZUNvbnRleHRTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBhUnVsZXMpO1xuICAgIHBlcmZsb2coXCJMQVRXQyBtYXRjaGluZyByZWNvcmRzIChzPVwiICsgYVNlbnRlbmNlc1JlaW5mb3JjZWQuc2VudGVuY2VzLmxlbmd0aCArIFwiKS4uLlwiKTtcbiAgICB2YXIgbWF0Y2hlZEFuc3dlcnMgPSBXaGF0SXMubWF0Y2hSZWNvcmRzUXVpY2tNdWx0aXBsZUNhdGVnb3JpZXMoYVNlbnRlbmNlc1JlaW5mb3JjZWQsIGNhdGVnb3JpZXMsIHJlY29yZHMsIGRvbWFpbkNhdGVnb3J5RmlsdGVyKTsgLy9hVG9vbDogQXJyYXk8SU1hdGNoLklUb29sPik6IGFueSAvKiBvYmplY3RzdHJlYW0qLyB7XG4gICAgaWYoZGVidWdsb2cuZW5hYmxlZCl7XG4gICAgICBkZWJ1Z2xvZyhcIiBtYXRjaGVkIEFuc3dlcnNcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWRBbnN3ZXJzLCB1bmRlZmluZWQsIDIpKTtcbiAgICB9XG4gICAgcGVyZmxvZyhcImZpbHRlcmluZyB0b3BSYW5rZWQgKGE9XCIgKyBtYXRjaGVkQW5zd2Vycy50dXBlbGFuc3dlcnMubGVuZ3RoICsgXCIpLi4uXCIpO1xuICAgIHZhciBtYXRjaGVkRmlsdGVyZWQgPSBXaGF0SXMuZmlsdGVyT25seVRvcFJhbmtlZFR1cGVsKG1hdGNoZWRBbnN3ZXJzLnR1cGVsYW5zd2Vycyk7XG4gICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgIGRlYnVnbG9nKFwiTEFUV0MgbWF0Y2hlZCB0b3AtcmFua2VkIEFuc3dlcnNcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWRGaWx0ZXJlZCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgfVxuICAgIHBlcmZsb2coXCJ0b3RhbExpc3RBbGxXaXRoQ29udGV4dCAoYT1cIiArIG1hdGNoZWRGaWx0ZXJlZC5sZW5ndGggKyBcIilcIik7XG4gICAgbG9nUGVyZignbGlzdEFsbFdpdGhDb250ZXh0Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR1cGVsYW5zd2VycyA6IG1hdGNoZWRGaWx0ZXJlZCwgLy8gPz8/IEFuc3dlcnM7XG4gICAgICBlcnJvcnMgOiBhU2VudGVuY2VzUmVpbmZvcmNlZC5lcnJvcnMsXG4gICAgICB0b2tlbnM6IGFTZW50ZW5jZXNSZWluZm9yY2VkLnRva2Vuc1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyU3RyaW5nTGlzdEJ5T3Aob3BlcmF0b3I6IElNYXRjaC5JT3BlcmF0b3IsIGZyYWdtZW50IDogc3RyaW5nLCAgc3JjYXJyIDogc3RyaW5nW10gKSA6IHN0cmluZ1tdIHtcbiAgdmFyIGZyYWdtZW50TEMgPSBCcmVha0Rvd24udHJpbVF1b3RlZFNwYWNlZChmcmFnbWVudC50b0xvd2VyQ2FzZSgpKTtcbiAgcmV0dXJuIHNyY2Fyci5maWx0ZXIoZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIE9wZXJhdG9yLm1hdGNoZXMob3BlcmF0b3IsIGZyYWdtZW50TEMsIHN0ci50b0xvd2VyQ2FzZSgpKTtcbiAgfSkuc29ydCgpO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlQ2FzZUluc2Vuc2l0aXZlKGE6IHN0cmluZywgYiA6IHN0cmluZykge1xuICB2YXIgciA9IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSk7XG4gIGlmIChyKSB7XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgcmV0dXJuIC1hLmxvY2FsZUNvbXBhcmUoYik7XG59XG5cbi8qKlxuICogU29ydCBzdHJpbmcgbGlzdCBjYXNlIGluc2Vuc2l0aXZlLCB0aGVuIHJlbW92ZSBkdXBsaWNhdGVzIHJldGFpbmluZ1xuICogXCJsYXJnZXN0XCIgbWF0Y2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNhc2VEdXBsaWNhdGVzKGFyciA6IHN0cmluZ1tdKSA6IHN0cmluZ1tdIHtcbiAgYXJyLnNvcnQoY29tcGFyZUNhc2VJbnNlbnNpdGl2ZSk7XG4gIGRlYnVnbG9nKCdzb3J0ZWQgYXJyJyArIEpTT04uc3RyaW5naWZ5KGFycikpO1xuICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbihzLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gMCB8fCAoMCAhPT0gYXJyW2luZGV4IC0xIF0udG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKHMudG9Mb3dlckNhc2UoKSkpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXRlZ29yeU9wRmlsdGVyQXNEaXN0aW5jdFN0cmluZ3Mob3BlcmF0b3I6IElNYXRjaC5JT3BlcmF0b3IsIGZyYWdtZW50IDogc3RyaW5nLFxuICBjYXRlZ29yeSA6IHN0cmluZywgcmVjb3JkczogQXJyYXk8SU1hdGNoLklSZWNvcmQ+LCBmaWx0ZXJEb21haW4/IDogc3RyaW5nKSA6IHN0cmluZ1tdIHtcbiAgICB2YXIgZnJhZ21lbnRMQyA9IEJyZWFrRG93bi50cmltUXVvdGVkKGZyYWdtZW50LnRvTG93ZXJDYXNlKCkpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IHt9O1xuICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbihyZWNvcmQpIHtcbiAgICAgIGlmKGZpbHRlckRvbWFpbiAmJiByZWNvcmQgWydfZG9tYWluJ10gIT09IGZpbHRlckRvbWFpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZihyZWNvcmRbY2F0ZWdvcnldICYmIE9wZXJhdG9yLm1hdGNoZXMob3BlcmF0b3IsIGZyYWdtZW50TEMsIHJlY29yZFtjYXRlZ29yeV0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgaWYoIXNlZW5bcmVjb3JkW2NhdGVnb3J5XV0pIHtcbiAgICAgICAgICBzZWVuW3JlY29yZFtjYXRlZ29yeV1dID0gdHJ1ZTtcbiAgICAgICAgICByZXMucHVzaChyZWNvcmRbY2F0ZWdvcnldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZW1vdmVDYXNlRHVwbGljYXRlcyhyZXMpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpa2VseVBsdXJhbERpZmYoYSA6IHN0cmluZywgcGx1cmFsT2ZhIDogc3RyaW5nKSA6IGJvb2xlYW4ge1xuICB2YXIgYUxDID0gQnJlYWtEb3duLnRyaW1RdW90ZWQoYS50b0xvd2VyQ2FzZSgpKSAgfHwgXCJcIjtcbiAgdmFyIHBsdXJhbE9mQUxDID0gQnJlYWtEb3duLnRyaW1RdW90ZWQoKHBsdXJhbE9mYSB8fFwiXCIpLnRvTG93ZXJDYXNlKCkpIHx8IFwiXCI7XG4gIGlmIChhTEMgPT09IHBsdXJhbE9mQUxDKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYoIGFMQyArJ3MnID09PSBwbHVyYWxPZkFMQykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luU29ydGVkUXVvdGVkKHN0cmluZ3MgOiBzdHJpbmdbXSApIDogc3RyaW5nIHtcbiAgaWYgKHN0cmluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcmV0dXJuICdcIicgKyBzdHJpbmdzLnNvcnQoKS5qb2luKCdcIjsgXCInKSArICdcIic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luRGlzdGluY3QoY2F0ZWdvcnkgOiBzdHJpbmcsIHJlY29yZHMgOiBBcnJheTxJTWF0Y2guSVJlY29yZD4pIDogc3RyaW5nIHtcbiAgdmFyIHJlcyA9IHJlY29yZHMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG9SZWNvcmQpIHtcbiAgICBwcmV2W29SZWNvcmRbY2F0ZWdvcnldXSA9IDE7XG4gICAgcmV0dXJuIHByZXY7XG4gIH0se30gYXMgYW55KTtcbiAgcmV0dXJuIGpvaW5Tb3J0ZWRRdW90ZWQoT2JqZWN0LmtleXMocmVzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREaXN0aW5jdEZyb21XaGF0SWZSZXN1bHQoIGFuc3dlcnMgOiBBcnJheTxJTWF0Y2guSVdoYXRJc0Fuc3dlcj4pIDogc3RyaW5nIHtcbiAgcmV0dXJuIGpvaW5Tb3J0ZWRRdW90ZWQoYW5zd2Vycy5tYXAoZnVuY3Rpb24ob0Fuc3dlcikge1xuICAgIHJldHVybiBvQW5zd2VyLnJlc3VsdDtcbiAgfSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pblJlc3VsdHMocmVzdWx0czogQXJyYXk8SU1hdGNoLklXaGF0SXNBbnN3ZXI+KTogc3RyaW5nW10ge1xuICB2YXIgcmVzICA9IFtdO1xuICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIGlmKHJlcy5pbmRleE9mKHJlc3VsdC5yZXN1bHQpIDwgMCApe1xuICAgICAgICByZXMucHVzaChyZXN1bHQucmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2ICsgMTtcbiAgICB9XG4gIH0sIDApO1xuICByZXR1cm4gcmVzO1xufVxuXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luUmVzdWx0c1R1cGVsKHJlc3VsdHM6IEFycmF5PElNYXRjaC5JV2hhdElzVHVwZWxBbnN3ZXI+KTogc3RyaW5nW10ge1xuICB2YXIgcmVzICA9IFtdO1xuICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgIHZhciB2YWx1ZSA9IFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHJlc3VsdC5yZXN1bHQpO1xuICAgICAgaWYocmVzLmluZGV4T2YodmFsdWUpIDwgMCApe1xuICAgICAgICByZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgfVxuICB9LCAwKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZmVyRG9tYWluKHRoZU1vZGVsIDogSU1hdGNoLklNb2RlbHMsIGNvbnRleHRRdWVyeVN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAvLyBjb25zb2xlLmxvZyhcImhlcmUgdGhlIHN0cmluZ1wiICsgY29udGV4dFF1ZXJ5U3RyaW5nKTtcbiAvLyAgY29uc29sZS5sb2coXCJoZXJlIHRoZSBydWxlc1wiICsgSlNPTi5zdHJpbmdpZnkodGhlTW9kZWwubVJ1bGVzKSk7XG4gIHZhciByZXMgPSBhbmFseXplQ29udGV4dFN0cmluZyhjb250ZXh0UXVlcnlTdHJpbmcsIHRoZU1vZGVsLnJ1bGVzKTtcbiAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXMsdW5kZWZpbmVkLDIpKTtcbiAgLy8gcnVuIHRocm91Z2ggdGhlIHN0cmluZywgc2VhcmNoIGZvciBhIGNhdGVnb3J5XG4gIGlmKCFyZXMuc2VudGVuY2VzLmxlbmd0aCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIGRvbWFpbnMgPSBbXTtcbiAgLy9jb25zb2xlLmxvZyhTZW50ZW5jZS5kdW1wTmljZUFycihyZXMpKTtcbiAgLy8gZG8gd2UgaGF2ZSBhIGRvbWFpbiA/XG4gIHJlcy5zZW50ZW5jZXNbMF0uZm9yRWFjaChmdW5jdGlvbihvV29yZEdyb3VwKSB7XG4gICAgaWYob1dvcmRHcm91cC5jYXRlZ29yeSA9PT0gXCJkb21haW5cIikge1xuICAgICAgZG9tYWlucy5wdXNoKG9Xb3JkR3JvdXAubWF0Y2hlZFN0cmluZylcbiAgICB9XG4gIH0pO1xuICBpZihkb21haW5zLmxlbmd0aCA9PT0gMSkge1xuICAgIGRlYnVnbG9nKFwiZ290IGEgcHJlY2lzZSBkb21haW4gXCIgKyBkb21haW5zWzBdKTtcbiAgICByZXR1cm4gZG9tYWluc1swXTtcbiAgfVxuICBpZihkb21haW5zLmxlbmd0aCA+IDAgKSB7XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZD8gKFwiZ290IG1vcmUgdGhhbiBvbmUgZG9tYWluLCBjb25mdXNlZCAgXCIgKyBkb21haW5zLmpvaW4oXCJcXG5cIikpOictJyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAvLyBUT0RPRFxuICB9XG4gIGRlYnVnbG9nKFwiYXR0ZW1wdGluZyB0byBkZXRlcm1pbmUgY2F0ZWdvcmllc1wiKVxuICAvLyB0cnkgYSBjYXRlZ29yeSByZXZlcnNlIG1hcFxuICByZXMuc2VudGVuY2VzWzBdLmZvckVhY2goZnVuY3Rpb24ob1dvcmRHcm91cCl7XG4gICAgaWYob1dvcmRHcm91cC5jYXRlZ29yeSA9PT0gXCJjYXRlZ29yeVwiKSB7XG4gICAgICB2YXIgc0NhdCA9IG9Xb3JkR3JvdXAubWF0Y2hlZFN0cmluZztcbiAgICAgIHZhciBkb21zID0gTW9kZWwuZ2V0RG9tYWluc0ZvckNhdGVnb3J5KHRoZU1vZGVsLHNDYXQpO1xuICAgICAgZG9tcy5mb3JFYWNoKGZ1bmN0aW9uKHNEb20pIHtcbiAgICAgICAgaWYoZG9tYWlucy5pbmRleE9mKHNEb20pIDwgMCkge1xuICAgICAgICAgIGRvbWFpbnMucHVzaChzRG9tKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgaWYoZG9tYWlucy5sZW5ndGggPT09IDEpIHtcbiAgICAgZGVidWdsb2coXCJnb3QgYSBwcmVjaXNlIGRvbWFpbiBcIiArIGRvbWFpbnNbMF0pO1xuICAgIHJldHVybiBkb21haW5zWzBdO1xuICB9XG4gIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJnb3QgbW9yZSB0aGFuIG9uZSBkb21haW4sIGNvbmZ1c2VkICBcIiArIGRvbWFpbnMuam9pbihcIlxcblwiKSkgOictJyk7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59OyIsIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGFuYWx5emUudHNcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG52YXIgZGVidWdsb2cgPSBkZWJ1ZygnbGlzdGFsbCcpO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoXCIuLi91dGlscy9sb2dnZXJcIik7XG52YXIgbG9nUGVyZiA9IGxvZ2dlci5wZXJmKFwicGVyZmxpc3RhbGxcIik7XG52YXIgcGVyZmxvZyA9IGRlYnVnKCdwZXJmJyk7XG52YXIgQnJlYWtEb3duID0gcmVxdWlyZShcIi4vYnJlYWtkb3duXCIpO1xudmFyIE9wZXJhdG9yID0gcmVxdWlyZShcIi4vb3BlcmF0b3JcIik7XG52YXIgV2hhdElzID0gcmVxdWlyZShcIi4vd2hhdGlzXCIpO1xudmFyIEVyRXJyb3IgPSByZXF1aXJlKFwiLi9lcmVycm9yXCIpO1xudmFyIE1vZGVsID0gcmVxdWlyZShcIi4uL21vZGVsL21vZGVsXCIpO1xudmFyIHNXb3JkcyA9IHt9O1xuZnVuY3Rpb24gbWF0Y2hSZWNvcmRIYXZpbmdDYXRlZ29yeShjYXRlZ29yeSwgcmVjb3Jkcykge1xuICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyBKU09OLnN0cmluZ2lmeShyZWNvcmRzLCB1bmRlZmluZWQsIDIpIDogXCItXCIpO1xuICAgIHZhciByZWxldmFudFJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gdW5kZWZpbmVkKSAmJiAocmVjb3JkW2NhdGVnb3J5XSAhPT0gbnVsbCk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGRlYnVnbG9nKFwicmVsZXZhbnQgcmVjb3JkcyBucjpcIiArIHJlbGV2YW50UmVjb3Jkcy5sZW5ndGgpO1xuICAgIHJldHVybiByZWxldmFudFJlY29yZHM7XG59XG5leHBvcnRzLm1hdGNoUmVjb3JkSGF2aW5nQ2F0ZWdvcnkgPSBtYXRjaFJlY29yZEhhdmluZ0NhdGVnb3J5O1xuZnVuY3Rpb24gYW5hbHl6ZUNvbnRleHRTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcykge1xuICAgIHJldHVybiBXaGF0SXMuYW5hbHl6ZUNvbnRleHRTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBydWxlcyk7XG59XG5leHBvcnRzLmFuYWx5emVDb250ZXh0U3RyaW5nID0gYW5hbHl6ZUNvbnRleHRTdHJpbmc7XG4vLyBjb25zdCByZXN1bHQgPSBXaGF0SXMucmVzb2x2ZUNhdGVnb3J5KGNhdCwgYTEuZW50aXR5LFxuLy8gICB0aGVNb2RlbC5tUnVsZXMsIHRoZU1vZGVsLnRvb2xzLCB0aGVNb2RlbC5yZWNvcmRzKTtcbmZ1bmN0aW9uIGxpc3RBbGxXaXRoQ29udGV4dChjYXRlZ29yeSwgY29udGV4dFF1ZXJ5U3RyaW5nLCBhUnVsZXMsIHJlY29yZHMsIGRvbWFpbkNhdGVnb3J5RmlsdGVyKSB7XG4gICAgdmFyIHJlcyA9IGxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KFtjYXRlZ29yeV0sIGNvbnRleHRRdWVyeVN0cmluZywgYVJ1bGVzLCByZWNvcmRzLCBkb21haW5DYXRlZ29yeUZpbHRlcik7XG4gICAgdmFyIGFuc3dlcnMgPSByZXMudHVwZWxhbnN3ZXJzLm1hcChmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VudGVuY2U6IG8uc2VudGVuY2UsXG4gICAgICAgICAgICByZWNvcmQ6IG8ucmVjb3JkLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IG8uY2F0ZWdvcmllc1swXSxcbiAgICAgICAgICAgIHJlc3VsdDogby5yZXN1bHRbMF0sXG4gICAgICAgICAgICBfcmFua2luZzogby5fcmFua2luZ1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbnRlbmNlczogcmVzLnNlbnRlbmNlcyxcbiAgICAgICAgZXJyb3JzOiByZXMuZXJyb3JzLFxuICAgICAgICB0b2tlbnM6IHJlcy50b2tlbnMsXG4gICAgICAgIGFuc3dlcnM6IGFuc3dlcnNcbiAgICB9O1xufVxuZXhwb3J0cy5saXN0QWxsV2l0aENvbnRleHQgPSBsaXN0QWxsV2l0aENvbnRleHQ7XG5mdW5jdGlvbiBsaXN0QWxsV2l0aENhdGVnb3J5KGNhdGVnb3J5LCByZWNvcmRzKSB7XG4gICAgdmFyIG1hdGNoZWRBbnN3ZXJzID0gbWF0Y2hSZWNvcmRIYXZpbmdDYXRlZ29yeShjYXRlZ29yeSwgcmVjb3Jkcyk7IC8vYVRvb2w6IEFycmF5PElNYXRjaC5JVG9vbD4pOiBhbnkgLyogb2JqZWN0c3RyZWFtKi8ge1xuICAgIGRlYnVnbG9nKFwiIGxpc3RBbGxXaXRoQ2F0ZWdvcnk6XCIgKyBKU09OLnN0cmluZ2lmeShtYXRjaGVkQW5zd2VycywgdW5kZWZpbmVkLCAyKSk7XG4gICAgcmV0dXJuIG1hdGNoZWRBbnN3ZXJzO1xufVxuZXhwb3J0cy5saXN0QWxsV2l0aENhdGVnb3J5ID0gbGlzdEFsbFdpdGhDYXRlZ29yeTtcbmZ1bmN0aW9uIGxpc3RBbGxUdXBlbFdpdGhDb250ZXh0KGNhdGVnb3JpZXMsIGNvbnRleHRRdWVyeVN0cmluZywgYVJ1bGVzLCByZWNvcmRzLCBkb21haW5DYXRlZ29yeUZpbHRlcikge1xuICAgIGlmIChjb250ZXh0UXVlcnlTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0dXBlbGFuc3dlcnM6IFtdLFxuICAgICAgICAgICAgZXJyb3JzOiBbRXJFcnJvci5tYWtlRXJyb3JfRU1QVFlfSU5QVVQoKV0sXG4gICAgICAgICAgICB0b2tlbnM6IFtdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nUGVyZignbGlzdEFsbFdpdGhDb250ZXh0Jyk7XG4gICAgICAgIHBlcmZsb2coXCJ0b3RhbExpc3RBbGxXaXRoQ29udGV4dFwiKTtcbiAgICAgICAgdmFyIGFTZW50ZW5jZXNSZWluZm9yY2VkID0gYW5hbHl6ZUNvbnRleHRTdHJpbmcoY29udGV4dFF1ZXJ5U3RyaW5nLCBhUnVsZXMpO1xuICAgICAgICBwZXJmbG9nKFwiTEFUV0MgbWF0Y2hpbmcgcmVjb3JkcyAocz1cIiArIGFTZW50ZW5jZXNSZWluZm9yY2VkLnNlbnRlbmNlcy5sZW5ndGggKyBcIikuLi5cIik7XG4gICAgICAgIHZhciBtYXRjaGVkQW5zd2VycyA9IFdoYXRJcy5tYXRjaFJlY29yZHNRdWlja011bHRpcGxlQ2F0ZWdvcmllcyhhU2VudGVuY2VzUmVpbmZvcmNlZCwgY2F0ZWdvcmllcywgcmVjb3JkcywgZG9tYWluQ2F0ZWdvcnlGaWx0ZXIpOyAvL2FUb29sOiBBcnJheTxJTWF0Y2guSVRvb2w+KTogYW55IC8qIG9iamVjdHN0cmVhbSovIHtcbiAgICAgICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiIG1hdGNoZWQgQW5zd2Vyc1wiICsgSlNPTi5zdHJpbmdpZnkobWF0Y2hlZEFuc3dlcnMsIHVuZGVmaW5lZCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHBlcmZsb2coXCJmaWx0ZXJpbmcgdG9wUmFua2VkIChhPVwiICsgbWF0Y2hlZEFuc3dlcnMudHVwZWxhbnN3ZXJzLmxlbmd0aCArIFwiKS4uLlwiKTtcbiAgICAgICAgdmFyIG1hdGNoZWRGaWx0ZXJlZCA9IFdoYXRJcy5maWx0ZXJPbmx5VG9wUmFua2VkVHVwZWwobWF0Y2hlZEFuc3dlcnMudHVwZWxhbnN3ZXJzKTtcbiAgICAgICAgaWYgKGRlYnVnbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGRlYnVnbG9nKFwiTEFUV0MgbWF0Y2hlZCB0b3AtcmFua2VkIEFuc3dlcnNcIiArIEpTT04uc3RyaW5naWZ5KG1hdGNoZWRGaWx0ZXJlZCwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGVyZmxvZyhcInRvdGFsTGlzdEFsbFdpdGhDb250ZXh0IChhPVwiICsgbWF0Y2hlZEZpbHRlcmVkLmxlbmd0aCArIFwiKVwiKTtcbiAgICAgICAgbG9nUGVyZignbGlzdEFsbFdpdGhDb250ZXh0Jyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0dXBlbGFuc3dlcnM6IG1hdGNoZWRGaWx0ZXJlZCxcbiAgICAgICAgICAgIGVycm9yczogYVNlbnRlbmNlc1JlaW5mb3JjZWQuZXJyb3JzLFxuICAgICAgICAgICAgdG9rZW5zOiBhU2VudGVuY2VzUmVpbmZvcmNlZC50b2tlbnNcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmxpc3RBbGxUdXBlbFdpdGhDb250ZXh0ID0gbGlzdEFsbFR1cGVsV2l0aENvbnRleHQ7XG5mdW5jdGlvbiBmaWx0ZXJTdHJpbmdMaXN0QnlPcChvcGVyYXRvciwgZnJhZ21lbnQsIHNyY2Fycikge1xuICAgIHZhciBmcmFnbWVudExDID0gQnJlYWtEb3duLnRyaW1RdW90ZWRTcGFjZWQoZnJhZ21lbnQudG9Mb3dlckNhc2UoKSk7XG4gICAgcmV0dXJuIHNyY2Fyci5maWx0ZXIoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gT3BlcmF0b3IubWF0Y2hlcyhvcGVyYXRvciwgZnJhZ21lbnRMQywgc3RyLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0pLnNvcnQoKTtcbn1cbmV4cG9ydHMuZmlsdGVyU3RyaW5nTGlzdEJ5T3AgPSBmaWx0ZXJTdHJpbmdMaXN0QnlPcDtcbmZ1bmN0aW9uIGNvbXBhcmVDYXNlSW5zZW5zaXRpdmUoYSwgYikge1xuICAgIHZhciByID0gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAocikge1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIC1hLmxvY2FsZUNvbXBhcmUoYik7XG59XG4vKipcbiAqIFNvcnQgc3RyaW5nIGxpc3QgY2FzZSBpbnNlbnNpdGl2ZSwgdGhlbiByZW1vdmUgZHVwbGljYXRlcyByZXRhaW5pbmdcbiAqIFwibGFyZ2VzdFwiIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNhc2VEdXBsaWNhdGVzKGFycikge1xuICAgIGFyci5zb3J0KGNvbXBhcmVDYXNlSW5zZW5zaXRpdmUpO1xuICAgIGRlYnVnbG9nKCdzb3J0ZWQgYXJyJyArIEpTT04uc3RyaW5naWZ5KGFycikpO1xuICAgIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChzLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IDAgfHwgKDAgIT09IGFycltpbmRleCAtIDFdLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShzLnRvTG93ZXJDYXNlKCkpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVtb3ZlQ2FzZUR1cGxpY2F0ZXMgPSByZW1vdmVDYXNlRHVwbGljYXRlcztcbjtcbmZ1bmN0aW9uIGdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncyhvcGVyYXRvciwgZnJhZ21lbnQsIGNhdGVnb3J5LCByZWNvcmRzLCBmaWx0ZXJEb21haW4pIHtcbiAgICB2YXIgZnJhZ21lbnRMQyA9IEJyZWFrRG93bi50cmltUXVvdGVkKGZyYWdtZW50LnRvTG93ZXJDYXNlKCkpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IHt9O1xuICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGlmIChmaWx0ZXJEb21haW4gJiYgcmVjb3JkWydfZG9tYWluJ10gIT09IGZpbHRlckRvbWFpbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNvcmRbY2F0ZWdvcnldICYmIE9wZXJhdG9yLm1hdGNoZXMob3BlcmF0b3IsIGZyYWdtZW50TEMsIHJlY29yZFtjYXRlZ29yeV0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICghc2VlbltyZWNvcmRbY2F0ZWdvcnldXSkge1xuICAgICAgICAgICAgICAgIHNlZW5bcmVjb3JkW2NhdGVnb3J5XV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHJlY29yZFtjYXRlZ29yeV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlbW92ZUNhc2VEdXBsaWNhdGVzKHJlcyk7XG59XG5leHBvcnRzLmdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncyA9IGdldENhdGVnb3J5T3BGaWx0ZXJBc0Rpc3RpbmN0U3RyaW5ncztcbjtcbmZ1bmN0aW9uIGxpa2VseVBsdXJhbERpZmYoYSwgcGx1cmFsT2ZhKSB7XG4gICAgdmFyIGFMQyA9IEJyZWFrRG93bi50cmltUXVvdGVkKGEudG9Mb3dlckNhc2UoKSkgfHwgXCJcIjtcbiAgICB2YXIgcGx1cmFsT2ZBTEMgPSBCcmVha0Rvd24udHJpbVF1b3RlZCgocGx1cmFsT2ZhIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkpIHx8IFwiXCI7XG4gICAgaWYgKGFMQyA9PT0gcGx1cmFsT2ZBTEMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhTEMgKyAncycgPT09IHBsdXJhbE9mQUxDKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmxpa2VseVBsdXJhbERpZmYgPSBsaWtlbHlQbHVyYWxEaWZmO1xuO1xuZnVuY3Rpb24gam9pblNvcnRlZFF1b3RlZChzdHJpbmdzKSB7XG4gICAgaWYgKHN0cmluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gJ1wiJyArIHN0cmluZ3Muc29ydCgpLmpvaW4oJ1wiOyBcIicpICsgJ1wiJztcbn1cbmV4cG9ydHMuam9pblNvcnRlZFF1b3RlZCA9IGpvaW5Tb3J0ZWRRdW90ZWQ7XG5mdW5jdGlvbiBqb2luRGlzdGluY3QoY2F0ZWdvcnksIHJlY29yZHMpIHtcbiAgICB2YXIgcmVzID0gcmVjb3Jkcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG9SZWNvcmQpIHtcbiAgICAgICAgcHJldltvUmVjb3JkW2NhdGVnb3J5XV0gPSAxO1xuICAgICAgICByZXR1cm4gcHJldjtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIGpvaW5Tb3J0ZWRRdW90ZWQoT2JqZWN0LmtleXMocmVzKSk7XG59XG5leHBvcnRzLmpvaW5EaXN0aW5jdCA9IGpvaW5EaXN0aW5jdDtcbmZ1bmN0aW9uIGZvcm1hdERpc3RpbmN0RnJvbVdoYXRJZlJlc3VsdChhbnN3ZXJzKSB7XG4gICAgcmV0dXJuIGpvaW5Tb3J0ZWRRdW90ZWQoYW5zd2Vycy5tYXAoZnVuY3Rpb24gKG9BbnN3ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9BbnN3ZXIucmVzdWx0O1xuICAgIH0pKTtcbn1cbmV4cG9ydHMuZm9ybWF0RGlzdGluY3RGcm9tV2hhdElmUmVzdWx0ID0gZm9ybWF0RGlzdGluY3RGcm9tV2hhdElmUmVzdWx0O1xuZnVuY3Rpb24gam9pblJlc3VsdHMocmVzdWx0cykge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgY250ID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0Ll9yYW5raW5nID09PSByZXN1bHRzWzBdLl9yYW5raW5nKSB7XG4gICAgICAgICAgICBpZiAocmVzLmluZGV4T2YocmVzdWx0LnJlc3VsdCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gocmVzdWx0LnJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgICAgIH1cbiAgICB9LCAwKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luUmVzdWx0cyA9IGpvaW5SZXN1bHRzO1xudmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xuZnVuY3Rpb24gam9pblJlc3VsdHNUdXBlbChyZXN1bHRzKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBjbnQgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQuX3JhbmtpbmcgPT09IHJlc3VsdHNbMF0uX3JhbmtpbmcpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKHJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHJlcy5pbmRleE9mKHZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgICAgIH1cbiAgICB9LCAwKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luUmVzdWx0c1R1cGVsID0gam9pblJlc3VsdHNUdXBlbDtcbmZ1bmN0aW9uIGluZmVyRG9tYWluKHRoZU1vZGVsLCBjb250ZXh0UXVlcnlTdHJpbmcpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImhlcmUgdGhlIHN0cmluZ1wiICsgY29udGV4dFF1ZXJ5U3RyaW5nKTtcbiAgICAvLyAgY29uc29sZS5sb2coXCJoZXJlIHRoZSBydWxlc1wiICsgSlNPTi5zdHJpbmdpZnkodGhlTW9kZWwubVJ1bGVzKSk7XG4gICAgdmFyIHJlcyA9IGFuYWx5emVDb250ZXh0U3RyaW5nKGNvbnRleHRRdWVyeVN0cmluZywgdGhlTW9kZWwucnVsZXMpO1xuICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzLHVuZGVmaW5lZCwyKSk7XG4gICAgLy8gcnVuIHRocm91Z2ggdGhlIHN0cmluZywgc2VhcmNoIGZvciBhIGNhdGVnb3J5XG4gICAgaWYgKCFyZXMuc2VudGVuY2VzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgZG9tYWlucyA9IFtdO1xuICAgIC8vY29uc29sZS5sb2coU2VudGVuY2UuZHVtcE5pY2VBcnIocmVzKSk7XG4gICAgLy8gZG8gd2UgaGF2ZSBhIGRvbWFpbiA/XG4gICAgcmVzLnNlbnRlbmNlc1swXS5mb3JFYWNoKGZ1bmN0aW9uIChvV29yZEdyb3VwKSB7XG4gICAgICAgIGlmIChvV29yZEdyb3VwLmNhdGVnb3J5ID09PSBcImRvbWFpblwiKSB7XG4gICAgICAgICAgICBkb21haW5zLnB1c2gob1dvcmRHcm91cC5tYXRjaGVkU3RyaW5nKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChkb21haW5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBkZWJ1Z2xvZyhcImdvdCBhIHByZWNpc2UgZG9tYWluIFwiICsgZG9tYWluc1swXSk7XG4gICAgICAgIHJldHVybiBkb21haW5zWzBdO1xuICAgIH1cbiAgICBpZiAoZG9tYWlucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRlYnVnbG9nKGRlYnVnbG9nLmVuYWJsZWQgPyAoXCJnb3QgbW9yZSB0aGFuIG9uZSBkb21haW4sIGNvbmZ1c2VkICBcIiArIGRvbWFpbnMuam9pbihcIlxcblwiKSkgOiAnLScpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkZWJ1Z2xvZyhcImF0dGVtcHRpbmcgdG8gZGV0ZXJtaW5lIGNhdGVnb3JpZXNcIik7XG4gICAgLy8gdHJ5IGEgY2F0ZWdvcnkgcmV2ZXJzZSBtYXBcbiAgICByZXMuc2VudGVuY2VzWzBdLmZvckVhY2goZnVuY3Rpb24gKG9Xb3JkR3JvdXApIHtcbiAgICAgICAgaWYgKG9Xb3JkR3JvdXAuY2F0ZWdvcnkgPT09IFwiY2F0ZWdvcnlcIikge1xuICAgICAgICAgICAgdmFyIHNDYXQgPSBvV29yZEdyb3VwLm1hdGNoZWRTdHJpbmc7XG4gICAgICAgICAgICB2YXIgZG9tcyA9IE1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgc0NhdCk7XG4gICAgICAgICAgICBkb21zLmZvckVhY2goZnVuY3Rpb24gKHNEb20pIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9tYWlucy5pbmRleE9mKHNEb20pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBkb21haW5zLnB1c2goc0RvbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZG9tYWlucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGVidWdsb2coXCJnb3QgYSBwcmVjaXNlIGRvbWFpbiBcIiArIGRvbWFpbnNbMF0pO1xuICAgICAgICByZXR1cm4gZG9tYWluc1swXTtcbiAgICB9XG4gICAgZGVidWdsb2coZGVidWdsb2cuZW5hYmxlZCA/IChcImdvdCBtb3JlIHRoYW4gb25lIGRvbWFpbiwgY29uZnVzZWQgIFwiICsgZG9tYWlucy5qb2luKFwiXFxuXCIpKSA6ICctJyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuaW5mZXJEb21haW4gPSBpbmZlckRvbWFpbjtcbjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
