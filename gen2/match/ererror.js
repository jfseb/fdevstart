/**
 *
 * @module jfseb.fdevstart.analyze
 * @file erbase
 * @copyright (c) 2016 Gerd Forstmann
 *
 * Basic domain based entity recognition
 */
"use strict";

var debug = require("debug");
var debuglog = debug('erbase');
var debuglogV = debug('erbase');
var perflog = debug('perf');
var AnyObject = Object;
var IMatch = require("./ifmatch");
function makeError_NO_KNOWN_WORD(index, tokens) {
    if (index < 0 || index >= tokens.length) {
        throw Error("invalid index in Error construction " + index + "tokens.lenth=" + tokens.length);
    }
    return {
        err_code: IMatch.ERR_NO_KNOWN_WORD,
        text: "I do not understand \"" + tokens[index] + "\".",
        context: {
            tokens: tokens,
            token: tokens[index],
            index: index
        }
    };
}
exports.makeError_NO_KNOWN_WORD = makeError_NO_KNOWN_WORD;
function makeError_EMPTY_INPUT() {
    return {
        err_code: IMatch.ERR_EMPTY_INPUT,
        text: "I did not get an input."
    };
}
exports.makeError_EMPTY_INPUT = makeError_EMPTY_INPUT;
function explainError(errors) {
    if (errors.length) {
        return "\n" + errors.map(function (err) {
            return err.text;
        }).join("\n");
    }
    return;
}
exports.explainError = explainError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9lcmVycm9yLnRzIiwibWF0Y2gvZXJlcnJvci5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJkZWJ1Z2xvZyIsImRlYnVnbG9nViIsInBlcmZsb2ciLCJBbnlPYmplY3QiLCJPYmplY3QiLCJJTWF0Y2giLCJtYWtlRXJyb3JfTk9fS05PV05fV09SRCIsImluZGV4IiwidG9rZW5zIiwibGVuZ3RoIiwiRXJyb3IiLCJlcnJfY29kZSIsIkVSUl9OT19LTk9XTl9XT1JEIiwidGV4dCIsImNvbnRleHQiLCJ0b2tlbiIsImV4cG9ydHMiLCJtYWtlRXJyb3JfRU1QVFlfSU5QVVQiLCJFUlJfRU1QVFlfSU5QVVQiLCJleHBsYWluRXJyb3IiLCJlcnJvcnMiLCJtYXAiLCJlcnIiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUNRQTs7QURJQSxJQUFBQSxRQUFBQyxRQUFBLE9BQUEsQ0FBQTtBQUVBLElBQU1DLFdBQVdGLE1BQU0sUUFBTixDQUFqQjtBQUNBLElBQU1HLFlBQVlILE1BQU0sUUFBTixDQUFsQjtBQUNBLElBQU1JLFVBQVVKLE1BQU0sTUFBTixDQUFoQjtBQUVBLElBQU1LLFlBQWlCQyxNQUF2QjtBQUtBLElBQUFDLFNBQUFOLFFBQUEsV0FBQSxDQUFBO0FBRUEsU0FBQU8sdUJBQUEsQ0FBd0NDLEtBQXhDLEVBQXdEQyxNQUF4RCxFQUF5RTtBQUNyRSxRQUFHRCxRQUFRLENBQVIsSUFBYUEsU0FBU0MsT0FBT0MsTUFBaEMsRUFBd0M7QUFDdEMsY0FBTUMsTUFBTSx5Q0FBeUNILEtBQXpDLEdBQWlELGVBQWpELEdBQW1FQyxPQUFPQyxNQUFoRixDQUFOO0FBQ0Q7QUFDSCxXQUFPO0FBQ0xFLGtCQUFVTixPQUFPTyxpQkFEWjtBQUVMQyxjQUFPLDJCQUF3QkwsT0FBT0QsS0FBUCxDQUF4QixHQUFxQyxLQUZ2QztBQUdMTyxpQkFBVTtBQUNSTixvQkFBUUEsTUFEQTtBQUVSTyxtQkFBUVAsT0FBT0QsS0FBUCxDQUZBO0FBR1JBLG1CQUFRQTtBQUhBO0FBSEwsS0FBUDtBQVNEO0FBYkRTLFFBQUFWLHVCQUFBLEdBQUFBLHVCQUFBO0FBZ0JBLFNBQUFXLHFCQUFBLEdBQUE7QUFDRSxXQUFPO0FBQ0xOLGtCQUFVTixPQUFPYSxlQURaO0FBRUxMLGNBQU87QUFGRixLQUFQO0FBSUQ7QUFMREcsUUFBQUMscUJBQUEsR0FBQUEscUJBQUE7QUFPQSxTQUFBRSxZQUFBLENBQTZCQyxNQUE3QixFQUF1RDtBQUNyRCxRQUFHQSxPQUFPWCxNQUFWLEVBQWtCO0FBQ2hCLGVBQU8sT0FBT1csT0FBT0MsR0FBUCxDQUFXLFVBQUFDLEdBQUEsRUFBRztBQUFJLG1CQUFBQSxJQUFJVCxJQUFKO0FBQVEsU0FBMUIsRUFBNEJVLElBQTVCLENBQWlDLElBQWpDLENBQWQ7QUFDRDtBQUNEO0FBQ0Q7QUFMRFAsUUFBQUcsWUFBQSxHQUFBQSxZQUFBIiwiZmlsZSI6Im1hdGNoL2VyZXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBAbW9kdWxlIGpmc2ViLmZkZXZzdGFydC5hbmFseXplXG4gKiBAZmlsZSBlcmJhc2VcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqXG4gKiBCYXNpYyBkb21haW4gYmFzZWQgZW50aXR5IHJlY29nbml0aW9uXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBJbnB1dEZpbHRlciBmcm9tICcuL2lucHV0RmlsdGVyJztcblxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdlcmJhc2UnKTtcbmNvbnN0IGRlYnVnbG9nViA9IGRlYnVnKCdlcmJhc2UnKTtcbmNvbnN0IHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xuXG5jb25zdCBBbnlPYmplY3QgPSA8YW55Pk9iamVjdDtcblxuXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICdhYm90X3V0aWxzJztcblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4vaWZtYXRjaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXJyb3JfTk9fS05PV05fV09SRChpbmRleCA6IG51bWJlciwgdG9rZW5zIDogc3RyaW5nW10pIDpJTWF0Y2guSUVSRXJyb3JOT19LTk9XTl9XT1JEIHtcbiAgICBpZihpbmRleCA8IDAgfHwgaW5kZXggPj0gdG9rZW5zLmxlbmd0aCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGluZGV4IGluIEVycm9yIGNvbnN0cnVjdGlvbiBcIiArIGluZGV4ICsgXCJ0b2tlbnMubGVudGg9XCIgKyB0b2tlbnMubGVuZ3RoKTtcbiAgICB9XG4gIHJldHVybiB7XG4gICAgZXJyX2NvZGU6IElNYXRjaC5FUlJfTk9fS05PV05fV09SRCxcbiAgICB0ZXh0IDogYEkgZG8gbm90IHVuZGVyc3RhbmQgXCIke3Rva2Vuc1tpbmRleF19XCIuYCxcbiAgICBjb250ZXh0IDoge1xuICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICB0b2tlbiA6IHRva2Vuc1tpbmRleF0sXG4gICAgICBpbmRleCA6IGluZGV4XG4gICAgfVxuICB9IGFzIElNYXRjaC5JRVJFcnJvck5PX0tOT1dOX1dPUkQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFcnJvcl9FTVBUWV9JTlBVVCggKSA6SU1hdGNoLklFUkVycm9yIHtcbiAgcmV0dXJuIHtcbiAgICBlcnJfY29kZTogSU1hdGNoLkVSUl9FTVBUWV9JTlBVVCxcbiAgICB0ZXh0IDogYEkgZGlkIG5vdCBnZXQgYW4gaW5wdXQuYCxcbiAgfSBhcyBJTWF0Y2guSUVSRXJyb3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBsYWluRXJyb3IoZXJyb3JzIDogSU1hdGNoLklFUkVycm9yW10pIHtcbiAgaWYoZXJyb3JzLmxlbmd0aCkge1xuICAgIHJldHVybiBcIlxcblwiICsgZXJyb3JzLm1hcChlcnIgPT4gZXJyLnRleHQpLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuO1xufSIsIi8qKlxuICpcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0LmFuYWx5emVcbiAqIEBmaWxlIGVyYmFzZVxuICogQGNvcHlyaWdodCAoYykgMjAxNiBHZXJkIEZvcnN0bWFublxuICpcbiAqIEJhc2ljIGRvbWFpbiBiYXNlZCBlbnRpdHkgcmVjb2duaXRpb25cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG52YXIgZGVidWdsb2cgPSBkZWJ1ZygnZXJiYXNlJyk7XG52YXIgZGVidWdsb2dWID0gZGVidWcoJ2VyYmFzZScpO1xudmFyIHBlcmZsb2cgPSBkZWJ1ZygncGVyZicpO1xudmFyIEFueU9iamVjdCA9IE9iamVjdDtcbnZhciBJTWF0Y2ggPSByZXF1aXJlKFwiLi9pZm1hdGNoXCIpO1xuZnVuY3Rpb24gbWFrZUVycm9yX05PX0tOT1dOX1dPUkQoaW5kZXgsIHRva2Vucykge1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdG9rZW5zLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImludmFsaWQgaW5kZXggaW4gRXJyb3IgY29uc3RydWN0aW9uIFwiICsgaW5kZXggKyBcInRva2Vucy5sZW50aD1cIiArIHRva2Vucy5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJfY29kZTogSU1hdGNoLkVSUl9OT19LTk9XTl9XT1JELFxuICAgICAgICB0ZXh0OiBcIkkgZG8gbm90IHVuZGVyc3RhbmQgXFxcIlwiICsgdG9rZW5zW2luZGV4XSArIFwiXFxcIi5cIixcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICAgICAgICB0b2tlbjogdG9rZW5zW2luZGV4XSxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUVycm9yX05PX0tOT1dOX1dPUkQgPSBtYWtlRXJyb3JfTk9fS05PV05fV09SRDtcbmZ1bmN0aW9uIG1ha2VFcnJvcl9FTVBUWV9JTlBVVCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJfY29kZTogSU1hdGNoLkVSUl9FTVBUWV9JTlBVVCxcbiAgICAgICAgdGV4dDogXCJJIGRpZCBub3QgZ2V0IGFuIGlucHV0LlwiLFxuICAgIH07XG59XG5leHBvcnRzLm1ha2VFcnJvcl9FTVBUWV9JTlBVVCA9IG1ha2VFcnJvcl9FTVBUWV9JTlBVVDtcbmZ1bmN0aW9uIGV4cGxhaW5FcnJvcihlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gXCJcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXJyLnRleHQ7IH0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybjtcbn1cbmV4cG9ydHMuZXhwbGFpbkVycm9yID0gZXhwbGFpbkVycm9yO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
