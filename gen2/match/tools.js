"use strict";
/**
 * @file toolmatcher
 * @module jfseb.fdevstart.toolmatcher
 * @copyright (c) Gerd Forstmann
 *
 * Match a tool record on a sentence,
 *
 * This will unify matching required and optional category words
 * with the requirements of the tool.
 *
 */

Object.defineProperty(exports, "__esModule", { value: true });
var oToolFLPD = {
    'name': 'FLPD',
    'requires': { 'systemId': {}, 'client': {} },
    'optional': { 'fiori catalog': {}, 'fiori group': {} }
};
var oToolFLP = {
    'name': 'FLP',
    'requires': { 'systemId': {}, 'client': {} },
    "optional": {
        "fiori intent": {}
    },
    "sets": {
        "intent": {
            "set": ["systemId", "client", "fiori intent"],
            "response": "_urlpattern1"
        },
        "none": {
            "set": ["systemId", "client"],
            "response": "_urlpattern2"
        }
    }
};
var oToolTA = {
    'name': 'StartTA',
    'requires': { 'transaction': {}, 'systemId': {}, 'client': {} },
    'optional': {}
};
var oToolWiki = {
    'name': 'wiki',
    'requires': { 'wiki': {} },
    'optional': { 'wikipage': {} }
};
var oToolUnitTest = {
    'name': 'unit test',
    'requires': { 'unit test': {} },
    optional: {}
};
var tools = [oToolWiki, oToolTA, oToolUnitTest, oToolFLPD, oToolFLP];
function cmpTools(a, b) {
    return a.name.localeCompare(b.name);
}
exports.cmpTools = cmpTools;
function getTools() {
    return tools.sort(cmpTools);
}
exports.getTools = getTools;
;
function findMatchingSet(a) {}
exports.findMatchingSet = findMatchingSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoL3Rvb2xzLmpzIiwiLi4vc3JjL21hdGNoL3Rvb2xzLnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib1Rvb2xGTFBEIiwib1Rvb2xGTFAiLCJvVG9vbFRBIiwib1Rvb2xXaWtpIiwib1Rvb2xVbml0VGVzdCIsIm9wdGlvbmFsIiwidG9vbHMiLCJjbXBUb29scyIsImEiLCJiIiwibmFtZSIsImxvY2FsZUNvbXBhcmUiLCJnZXRUb29scyIsInNvcnQiLCJmaW5kTWF0Y2hpbmdTZXQiXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7Ozs7Ozs7OztBRFlBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUNPQSxJQUFJQyxZQUFZO0FBQ2QsWUFBUSxNQURNO0FBRWQsZ0JBQVksRUFBRSxZQUFZLEVBQWQsRUFBa0IsVUFBVSxFQUE1QixFQUZFO0FBR2QsZ0JBQVksRUFBRSxpQkFBaUIsRUFBbkIsRUFBdUIsZUFBZSxFQUF0QztBQUhFLENBQWhCO0FBTUEsSUFBSUMsV0FBVztBQUNiLFlBQVEsS0FESztBQUViLGdCQUFZLEVBQUUsWUFBWSxFQUFkLEVBQWtCLFVBQVUsRUFBNUIsRUFGQztBQUdiLGdCQUFZO0FBQ1Ysd0JBQWdCO0FBRE4sS0FIQztBQU1iLFlBQVE7QUFDTixrQkFBVTtBQUNSLG1CQUFPLENBQ0wsVUFESyxFQUVMLFFBRkssRUFHTCxjQUhLLENBREM7QUFNUix3QkFBWTtBQU5KLFNBREo7QUFTTixnQkFBUTtBQUNOLG1CQUFPLENBQ0wsVUFESyxFQUVMLFFBRkssQ0FERDtBQUtOLHdCQUFZO0FBTE47QUFURjtBQU5LLENBQWY7QUF5QkEsSUFBSUMsVUFBVTtBQUNaLFlBQVEsU0FESTtBQUVaLGdCQUFZLEVBQUUsZUFBZSxFQUFqQixFQUFxQixZQUFZLEVBQWpDLEVBQXFDLFVBQVUsRUFBL0MsRUFGQTtBQUdaLGdCQUFZO0FBSEEsQ0FBZDtBQU1BLElBQUlDLFlBQVk7QUFDZCxZQUFRLE1BRE07QUFFZCxnQkFBWSxFQUFFLFFBQVEsRUFBVixFQUZFO0FBR2QsZ0JBQVksRUFBRSxZQUFZLEVBQWQ7QUFIRSxDQUFoQjtBQU9BLElBQUlDLGdCQUFnQjtBQUNsQixZQUFRLFdBRFU7QUFFbEIsZ0JBQVksRUFBRSxhQUFhLEVBQWYsRUFGTTtBQUdsQkMsY0FBVTtBQUhRLENBQXBCO0FBT0EsSUFBTUMsUUFBUSxDQUFDSCxTQUFELEVBQVlELE9BQVosRUFBcUJFLGFBQXJCLEVBQW9DSixTQUFwQyxFQUErQ0MsUUFBL0MsQ0FBZDtBQUVBLFNBQUFNLFFBQUEsQ0FBeUJDLENBQXpCLEVBQTBDQyxDQUExQyxFQUF5RDtBQUN2RCxXQUFPRCxFQUFFRSxJQUFGLENBQU9DLGFBQVAsQ0FBcUJGLEVBQUVDLElBQXZCLENBQVA7QUFDRDtBQUZEWixRQUFBUyxRQUFBLEdBQUFBLFFBQUE7QUFJQSxTQUFBSyxRQUFBLEdBQUE7QUFDRSxXQUFPTixNQUFNTyxJQUFOLENBQVdOLFFBQVgsQ0FBUDtBQUNEO0FBRkRULFFBQUFjLFFBQUEsR0FBQUEsUUFBQTtBQUVDO0FBR0QsU0FBQUUsZUFBQSxDQUFnQ04sQ0FBaEMsRUFBNEQsQ0FFM0Q7QUFGRFYsUUFBQWdCLGVBQUEsR0FBQUEsZUFBQSIsImZpbGUiOiJtYXRjaC90b29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAZmlsZSB0b29sbWF0Y2hlclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQudG9vbG1hdGNoZXJcbiAqIEBjb3B5cmlnaHQgKGMpIEdlcmQgRm9yc3RtYW5uXG4gKlxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxuICpcbiAqIFRoaXMgd2lsbCB1bmlmeSBtYXRjaGluZyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0ZWdvcnkgd29yZHNcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBvVG9vbEZMUEQgPSB7XG4gICAgJ25hbWUnOiAnRkxQRCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgJ29wdGlvbmFsJzogeyAnZmlvcmkgY2F0YWxvZyc6IHt9LCAnZmlvcmkgZ3JvdXAnOiB7fSB9XG59O1xudmFyIG9Ub29sRkxQID0ge1xuICAgICduYW1lJzogJ0ZMUCcsXG4gICAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXG4gICAgXCJvcHRpb25hbFwiOiB7XG4gICAgICAgIFwiZmlvcmkgaW50ZW50XCI6IHt9XG4gICAgfSxcbiAgICBcInNldHNcIjoge1xuICAgICAgICBcImludGVudFwiOiB7XG4gICAgICAgICAgICBcInNldFwiOiBbXG4gICAgICAgICAgICAgICAgXCJzeXN0ZW1JZFwiLFxuICAgICAgICAgICAgICAgIFwiY2xpZW50XCIsXG4gICAgICAgICAgICAgICAgXCJmaW9yaSBpbnRlbnRcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2VcIjogXCJfdXJscGF0dGVybjFcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5vbmVcIjoge1xuICAgICAgICAgICAgXCJzZXRcIjogW1xuICAgICAgICAgICAgICAgIFwic3lzdGVtSWRcIixcbiAgICAgICAgICAgICAgICBcImNsaWVudFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJyZXNwb25zZVwiOiBcIl91cmxwYXR0ZXJuMlwiXG4gICAgICAgIH1cbiAgICB9XG59O1xudmFyIG9Ub29sVEEgPSB7XG4gICAgJ25hbWUnOiAnU3RhcnRUQScsXG4gICAgJ3JlcXVpcmVzJzogeyAndHJhbnNhY3Rpb24nOiB7fSwgJ3N5c3RlbUlkJzoge30sICdjbGllbnQnOiB7fSB9LFxuICAgICdvcHRpb25hbCc6IHt9XG59O1xudmFyIG9Ub29sV2lraSA9IHtcbiAgICAnbmFtZSc6ICd3aWtpJyxcbiAgICAncmVxdWlyZXMnOiB7ICd3aWtpJzoge30gfSxcbiAgICAnb3B0aW9uYWwnOiB7ICd3aWtpcGFnZSc6IHt9IH1cbn07XG52YXIgb1Rvb2xVbml0VGVzdCA9IHtcbiAgICAnbmFtZSc6ICd1bml0IHRlc3QnLFxuICAgICdyZXF1aXJlcyc6IHsgJ3VuaXQgdGVzdCc6IHt9IH0sXG4gICAgb3B0aW9uYWw6IHt9XG59O1xudmFyIHRvb2xzID0gW29Ub29sV2lraSwgb1Rvb2xUQSwgb1Rvb2xVbml0VGVzdCwgb1Rvb2xGTFBELCBvVG9vbEZMUF07XG5mdW5jdGlvbiBjbXBUb29scyhhLCBiKSB7XG4gICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG59XG5leHBvcnRzLmNtcFRvb2xzID0gY21wVG9vbHM7XG5mdW5jdGlvbiBnZXRUb29scygpIHtcbiAgICByZXR1cm4gdG9vbHMuc29ydChjbXBUb29scyk7XG59XG5leHBvcnRzLmdldFRvb2xzID0gZ2V0VG9vbHM7XG47XG5mdW5jdGlvbiBmaW5kTWF0Y2hpbmdTZXQoYSkge1xufVxuZXhwb3J0cy5maW5kTWF0Y2hpbmdTZXQgPSBmaW5kTWF0Y2hpbmdTZXQ7XG4iLCIvKipcclxuICogQGZpbGUgdG9vbG1hdGNoZXJcclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQudG9vbG1hdGNoZXJcclxuICogQGNvcHlyaWdodCAoYykgR2VyZCBGb3JzdG1hbm5cclxuICpcclxuICogTWF0Y2ggYSB0b29sIHJlY29yZCBvbiBhIHNlbnRlbmNlLFxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgdW5pZnkgbWF0Y2hpbmcgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIGNhdGVnb3J5IHdvcmRzXHJcbiAqIHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgdG9vbC5cclxuICpcclxuICovXHJcblxyXG4vLyAvIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYi9ub2RlLTQuZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xyXG5cclxuXHJcblxyXG52YXIgb1Rvb2xGTFBEID0ge1xyXG4gICduYW1lJzogJ0ZMUEQnLFxyXG4gICdyZXF1aXJlcyc6IHsgJ3N5c3RlbUlkJzoge30sICdjbGllbnQnOiB7fSB9LFxyXG4gICdvcHRpb25hbCc6IHsgJ2Zpb3JpIGNhdGFsb2cnOiB7fSwgJ2Zpb3JpIGdyb3VwJzoge30gfVxyXG59O1xyXG5cclxudmFyIG9Ub29sRkxQID0ge1xyXG4gICduYW1lJzogJ0ZMUCcsXHJcbiAgJ3JlcXVpcmVzJzogeyAnc3lzdGVtSWQnOiB7fSwgJ2NsaWVudCc6IHt9IH0sXHJcbiAgXCJvcHRpb25hbFwiOiB7XHJcbiAgICBcImZpb3JpIGludGVudFwiOiB7fVxyXG4gIH0sXHJcbiAgXCJzZXRzXCI6IHtcclxuICAgIFwiaW50ZW50XCI6IHtcclxuICAgICAgXCJzZXRcIjogW1xyXG4gICAgICAgIFwic3lzdGVtSWRcIixcclxuICAgICAgICBcImNsaWVudFwiLFxyXG4gICAgICAgIFwiZmlvcmkgaW50ZW50XCJcclxuICAgICAgXSxcclxuICAgICAgXCJyZXNwb25zZVwiOiBcIl91cmxwYXR0ZXJuMVwiXHJcbiAgICB9LFxyXG4gICAgXCJub25lXCI6IHtcclxuICAgICAgXCJzZXRcIjogW1xyXG4gICAgICAgIFwic3lzdGVtSWRcIixcclxuICAgICAgICBcImNsaWVudFwiXHJcbiAgICAgIF0sXHJcbiAgICAgIFwicmVzcG9uc2VcIjogXCJfdXJscGF0dGVybjJcIlxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbnZhciBvVG9vbFRBID0ge1xyXG4gICduYW1lJzogJ1N0YXJ0VEEnLFxyXG4gICdyZXF1aXJlcyc6IHsgJ3RyYW5zYWN0aW9uJzoge30sICdzeXN0ZW1JZCc6IHt9LCAnY2xpZW50Jzoge30gfSxcclxuICAnb3B0aW9uYWwnOiB7fVxyXG59O1xyXG5cclxudmFyIG9Ub29sV2lraSA9IHtcclxuICAnbmFtZSc6ICd3aWtpJyxcclxuICAncmVxdWlyZXMnOiB7ICd3aWtpJzoge30gfSxcclxuICAnb3B0aW9uYWwnOiB7ICd3aWtpcGFnZSc6IHt9IH1cclxufTtcclxuXHJcblxyXG52YXIgb1Rvb2xVbml0VGVzdCA9IHtcclxuICAnbmFtZSc6ICd1bml0IHRlc3QnLFxyXG4gICdyZXF1aXJlcyc6IHsgJ3VuaXQgdGVzdCc6IHt9IH0sXHJcbiAgb3B0aW9uYWw6IHt9XHJcbn07XHJcblxyXG5cclxuY29uc3QgdG9vbHMgPSBbb1Rvb2xXaWtpLCBvVG9vbFRBLCBvVG9vbFVuaXRUZXN0LCBvVG9vbEZMUEQsIG9Ub29sRkxQXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbXBUb29scyhhOiBJTWF0Y2guSVRvb2wsIGI6IElNYXRjaC5JVG9vbCkge1xyXG4gIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbHMoKSB7XHJcbiAgcmV0dXJuIHRvb2xzLnNvcnQoY21wVG9vbHMpO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdTZXQoYSA6IEFycmF5PElNYXRjaC5JVG9vbE1hdGNoPiApIHtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
