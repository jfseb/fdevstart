/**
 * @file operator
 * @module jfseb.fdevstart.operator
 * @copyright (c) Gerd Forstmann
 *
 * Operator implementation
 *
 * These functions expose parf the underlying model,
 *
 */
"use strict";
/**
 * Note: both arguments are expected to be lowercased
 */

function matches(operator, fragmentLC, strLC) {
    if (!strLC) {
        return false;
    }
    switch (operator.operator) {
        case "starting with":
            return strLC.indexOf(fragmentLC) === 0;
        case "containing":
            return strLC.indexOf(fragmentLC) >= 0;
        case "ending with":
            return strLC.length >= fragmentLC.length && strLC.substring(strLC.length - fragmentLC.length) === fragmentLC;
        default:
            throw new Error('Unknown operator or illegal operator usage: ' + operator.operator);
    }
    //return false;
}
exports.matches = matches;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRjaC9vcGVyYXRvci50cyIsIm1hdGNoL29wZXJhdG9yLmpzIl0sIm5hbWVzIjpbIm1hdGNoZXMiLCJvcGVyYXRvciIsImZyYWdtZW50TEMiLCJzdHJMQyIsImluZGV4T2YiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJFcnJvciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FDVUE7QURVQTs7OztBQUdBLFNBQUFBLE9BQUEsQ0FBd0JDLFFBQXhCLEVBQXFEQyxVQUFyRCxFQUEwRUMsS0FBMUUsRUFBd0Y7QUFDdEYsUUFBRyxDQUFDQSxLQUFKLEVBQVc7QUFDVCxlQUFPLEtBQVA7QUFDRDtBQUNELFlBQU9GLFNBQVNBLFFBQWhCO0FBQ0UsYUFBSyxlQUFMO0FBQ0UsbUJBQU9FLE1BQU1DLE9BQU4sQ0FBY0YsVUFBZCxNQUE4QixDQUFyQztBQUNGLGFBQUssWUFBTDtBQUNFLG1CQUFPQyxNQUFNQyxPQUFOLENBQWNGLFVBQWQsS0FBNkIsQ0FBcEM7QUFDRixhQUFLLGFBQUw7QUFDRSxtQkFBT0MsTUFBTUUsTUFBTixJQUFnQkgsV0FBV0csTUFBM0IsSUFDTEYsTUFBTUcsU0FBTixDQUFnQkgsTUFBTUUsTUFBTixHQUFlSCxXQUFXRyxNQUExQyxNQUFzREgsVUFEeEQ7QUFFRjtBQUNFLGtCQUFNLElBQUlLLEtBQUosQ0FBVSxpREFBaUROLFNBQVNBLFFBQXBFLENBQU47QUFUSjtBQVdBO0FBQ0Q7QUFoQkRPLFFBQUFSLE9BQUEsR0FBQUEsT0FBQSIsImZpbGUiOiJtYXRjaC9vcGVyYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgb3BlcmF0b3JcbiAqIEBtb2R1bGUgamZzZWIuZmRldnN0YXJ0Lm9wZXJhdG9yXG4gKiBAY29weXJpZ2h0IChjKSBHZXJkIEZvcnN0bWFublxuICpcbiAqIE9wZXJhdG9yIGltcGxlbWVudGF0aW9uXG4gKlxuICogVGhlc2UgZnVuY3Rpb25zIGV4cG9zZSBwYXJmIHRoZSB1bmRlcmx5aW5nIG1vZGVsLFxuICpcbiAqL1xuXG4vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9saWIvbm9kZS00LmQudHNcIiAvPlxuXG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuL2lmbWF0Y2gnO1xuXG5cblxuXG5cbi8qKlxuICogTm90ZTogYm90aCBhcmd1bWVudHMgYXJlIGV4cGVjdGVkIHRvIGJlIGxvd2VyY2FzZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoZXMob3BlcmF0b3IgOiBJTWF0Y2guSU9wZXJhdG9yLCBmcmFnbWVudExDIDogc3RyaW5nLCBzdHJMQyA6IHN0cmluZykgIDogYm9vbGVhbiB7XG4gIGlmKCFzdHJMQykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2gob3BlcmF0b3Iub3BlcmF0b3IpIHtcbiAgICBjYXNlIFwic3RhcnRpbmcgd2l0aFwiOlxuICAgICAgcmV0dXJuIHN0ckxDLmluZGV4T2YoZnJhZ21lbnRMQykgPT09IDA7XG4gICAgY2FzZSBcImNvbnRhaW5pbmdcIjpcbiAgICAgIHJldHVybiBzdHJMQy5pbmRleE9mKGZyYWdtZW50TEMpID49IDA7XG4gICAgY2FzZSBcImVuZGluZyB3aXRoXCI6XG4gICAgICByZXR1cm4gc3RyTEMubGVuZ3RoID49IGZyYWdtZW50TEMubGVuZ3RoICYmXG4gICAgICAgIHN0ckxDLnN1YnN0cmluZyhzdHJMQy5sZW5ndGggLSBmcmFnbWVudExDLmxlbmd0aCkgPT09IGZyYWdtZW50TEM7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBvcGVyYXRvciBvciBpbGxlZ2FsIG9wZXJhdG9yIHVzYWdlOiAnICsgb3BlcmF0b3Iub3BlcmF0b3IpO1xuICB9XG4gIC8vcmV0dXJuIGZhbHNlO1xufVxuIiwiLyoqXG4gKiBAZmlsZSBvcGVyYXRvclxuICogQG1vZHVsZSBqZnNlYi5mZGV2c3RhcnQub3BlcmF0b3JcbiAqIEBjb3B5cmlnaHQgKGMpIEdlcmQgRm9yc3RtYW5uXG4gKlxuICogT3BlcmF0b3IgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBUaGVzZSBmdW5jdGlvbnMgZXhwb3NlIHBhcmYgdGhlIHVuZGVybHlpbmcgbW9kZWwsXG4gKlxuICovXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTm90ZTogYm90aCBhcmd1bWVudHMgYXJlIGV4cGVjdGVkIHRvIGJlIGxvd2VyY2FzZWRcbiAqL1xuZnVuY3Rpb24gbWF0Y2hlcyhvcGVyYXRvciwgZnJhZ21lbnRMQywgc3RyTEMpIHtcbiAgICBpZiAoIXN0ckxDKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3dpdGNoIChvcGVyYXRvci5vcGVyYXRvcikge1xuICAgICAgICBjYXNlIFwic3RhcnRpbmcgd2l0aFwiOlxuICAgICAgICAgICAgcmV0dXJuIHN0ckxDLmluZGV4T2YoZnJhZ21lbnRMQykgPT09IDA7XG4gICAgICAgIGNhc2UgXCJjb250YWluaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gc3RyTEMuaW5kZXhPZihmcmFnbWVudExDKSA+PSAwO1xuICAgICAgICBjYXNlIFwiZW5kaW5nIHdpdGhcIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJMQy5sZW5ndGggPj0gZnJhZ21lbnRMQy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBzdHJMQy5zdWJzdHJpbmcoc3RyTEMubGVuZ3RoIC0gZnJhZ21lbnRMQy5sZW5ndGgpID09PSBmcmFnbWVudExDO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9wZXJhdG9yIG9yIGlsbGVnYWwgb3BlcmF0b3IgdXNhZ2U6ICcgKyBvcGVyYXRvci5vcGVyYXRvcik7XG4gICAgfVxuICAgIC8vcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5tYXRjaGVzID0gbWF0Y2hlcztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
