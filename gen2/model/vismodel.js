"use strict";
/**
 * visualize a model and calculate some statistics
 */

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var fdevsta_monmove_1 = require("fdevsta_monmove");
var Util = require("abot_utils");
var Describe = require("../match/describe");
var _ = require("lodash");
var debug = require("debug");
//import * as elasticlunr from 'elasticlunr';
var debuglog = debug('vismodel.ts');
;
var elasticlunr = require('elasticlunr');
function JSONEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\'/g, "\\'").replace(/\"/g, '\\"').replace(/\&/g, "\\&").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
    // .replace(/\b/g, "\\b")
    // .replace(/\f/g, "\\f");
}
exports.JSONEscape = JSONEscape;
;
function makeLunrIndex(modelpath, output, silent) {
    var mdl = JSON.parse('' + fs.readFileSync(modelpath + '.model.json'));
    var data = JSON.parse('' + fs.readFileSync(modelpath + '.data.json'));
    var cats = mdl.category.filter(function (a) {
        return typeof a !== 'string';
    });
    var qbeDataObjects = cats.filter(function (cat) {
        return cat.QBE || cat.QBEInclude;
    });
    //console.log("here cats" + JSON.stringify(cats));
    //console.log("\nhere data objects" + JSON.stringify(qbeDataObjects));
    var qbeDataNames = qbeDataObjects.map(function (cat) {
        return cat.name;
    });
    qbeDataNames = _.union(qbeDataNames, mdl.columns);
    var LUNRIndex = cats.filter(function (cat) {
        return cat.LUNRIndex;
    }).map(function (cat) {
        return cat.name;
    });
    //var elasticlunr = require('lunr');
    var bomdata = data;
    // index all LUNR properties
    var index = elasticlunr(function () {
        var that = this;
        LUNRIndex /*
                  ["appId",
                  "AppKey",
                  "AppName",
                    "ApplicationComponent",
                    "RoleName",
                    "ApplicationType",
                    "BSPName",
                    "BSPApplicationURL",
                    "releaseName",
                    "BusinessCatalog",
                    "TechnicalCatalog"] */
        .forEach(function (field) {
            that.addField(field);
        });
        this.setRef('id');
        this.saveDocument(false);
    });
    bomdata.forEach(function (o, index) {
        o.id = index;
    });
    bomdata.forEach(function (record) {
        index.addDoc(record);
    });
    var elastic = index;
    // dump the lunr index
    //
    var theIndex = index.toJSON();
    var columns = mdl.columns.map(function (colname) {
        var res = cats.filter(function (cat) {
            return cat.name === colname;
        });
        if (res.length !== 1) {
            throw new Error("undefined or non-object column : " + colname);
        }
        ;
        return res[0];
    });
    var columnNames = columns.map(function (col) {
        return col.name;
    });
    var jsonp = "var mdldata = {};\n//columns \n mdldata.columns = [\"" + columns.map(function (col) {
        return col.name;
    }).join('","') + "\"];";
    var json = "{ \"columns\"  : [\"" + columns.map(function (col) {
        return JSONEscape(col.name);
    }).join('","') + "\"],";
    // jsonp += `\n mdldata.fulldata = ${JSON.stringify(bomdata)};\n`;
    //jsonp += `\n//columns info \n mdldata.lunrcolumns = ["{${LUNRIndex.join('","')}"];`;
    jsonp += "\n//columns info \n mdldata.columnsDescription = {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" :  \"" + JSONEscape(col.description || col.name) + "\" ";
    }).join(',') + "\n      };";
    json += "\"columnsDescription\" : {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" :  \"" + JSONEscape(col.description || col.name) + "\" ";
    }).join(',') + "\n      },";
    jsonp += "\n//columns info \n mdldata.columnsDefaultWidth = {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" : " + (col.defaultWidth || 150) + " ";
    }).join(',') + "\n      };";
    json += "\n\"columnsDefaultWidth\" : {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" : " + (col.defaultWidth || 150) + " ";
    }).join(',') + "\n      },";
    var theIndexStr = JSON.stringify(theIndex);
    jsonp += "\nvar serIndex =\"" + JSONEscape(theIndexStr) + "\";\n";
    // jsonp += "\nvar serIndex =" + JSON.stringify(theIndex) + ";\n";
    json += '\n"serIndex" :' + theIndexStr + ',';
    //console.log("here all names " + JSON.stringify(qbeDataNames));
    var cleanseddata = bomdata.map(function (o) {
        var res = {};
        qbeDataNames.forEach(function (key) {
            res[key] = o[key];
        });
        return res;
    });
    if (!silent) {
        console.log("dumping " + output);
        console.log("length of index str" + theIndexStr.length);
        console.log("available          " + columns.length + " columns");
        console.log("returning as data  " + qbeDataNames.length + " columns");
        console.log("indexing           " + LUNRIndex.length + " columns");
        console.log('returned but not available', _.difference(qbeDataNames, columnNames).join(", "));
        console.log('returned but not indexed', _.difference(qbeDataNames, LUNRIndex).join(", "));
    }
    jsonp += "var data=" + JSON.stringify(cleanseddata) + ";";
    json += '"data":' + JSON.stringify(cleanseddata) + "\n}";
    jsonp += "\n\n           // var elastic = elasticlunr.Index.load(serIndex);\n\n  ";
    //fs.writeFileSync(output + ".lunr.js", jsonp);
    fs.writeFileSync(output + ".lunr.json", json);
}
exports.makeLunrIndex = makeLunrIndex;
/*

  var index = elastilunr.Index.load(obj);


}

 "QBE" : false,
      "QBEInclude" : true,
      "LUNRIndex": false
*/
function calcCategoryRecord(m, category, domain) {
    var otherdomains = fdevsta_monmove_1.Model.getDomainsForCategory(m, category);
    _.pull(otherdomains, domain);
    var res = {
        otherdomains: otherdomains,
        nrDistinctValues: 0,
        nrDistinctValuesInDomain: 0,
        nrRecords: 0,
        nrRecordsInDomain: 0,
        nrTotalRecordsInDomain: 0
    };
    var values = [];
    var valuesInDomain = [];
    var nrRecordsInDomain = 0;
    var distinctValues = m.records.forEach(function (oEntry) {
        if (oEntry._domain === domain) {
            res.nrTotalRecordsInDomain += 1;
        }
        if (oEntry[category]) {
            var value = oEntry[category];
            if (oEntry._domain === domain) {
                valuesInDomain[value] = (valuesInDomain[value] || 0) + 1;
                res.nrRecordsInDomain += 1;
            }
            values[value] = (values[value] || 0) + 1;
            res.nrRecords += 1;
        }
    });
    res.nrDistinctValues = Object.keys(values).length;
    res.nrDistinctValuesInDomain = Object.keys(valuesInDomain).length;
    return res;
}
exports.calcCategoryRecord = calcCategoryRecord;
function graphDomain(domain, m) {
    // draw a model domains
    var res = "\n    digraph sdsu {\n\tsize=\"36,36\";\n   rankdir=LR\n\tnode [color=yellow, style=filled];\n    \"" + domain + "\"\n  ";
    // add all category nodes
    res += "node [shape=record, color=yellow, style=filled];\n ";
    var cats = fdevsta_monmove_1.Model.getCategoriesForDomain(m, domain);
    var categoryResults = {};
    var otherdomains = [];
    cats.forEach(function (cat) {
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        res += "\"" + cat + "\" [label=\"{ " + cat + " | " + catResult.nrDistinctValuesInDomain + " Values in " + catResult.nrRecordsInDomain + " ";
        if (catResult.nrRecordsInDomain !== catResult.nrRecords) {
            res += "|  " + (catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain) + " other values in " + (catResult.nrRecords - catResult.nrRecordsInDomain) + " other records";
        } else {
            res += " ";
        }
        res += "}\"]\n";
    });
    // calculate other domains.
    // draw "other categories"
    res += "node [color=purple, style=filled]; \n";
    otherdomains.forEach(function (otherdomain) {
        res += "\"" + otherdomain + "\" \n";
    });
    // count records in domain :
    var nrRecords = m.records.reduce(function (prev, entry) {
        return prev + (entry._domain === domain ? 1 : 0);
    }, 0);
    res += "node [shape=record]; \n";
    res += " \"record\" [label=\"{<f0> " + domain + " | " + nrRecords + "}\"] \n";
    res += " \"r_other\" [label=\"{<f0> other | " + nrRecords + "}\"] \n ";
    res += "# relation from categories to domain\n";
    cats.forEach(function (cat) {
        res += " \"" + cat + "\" -> \"" + domain + "\" \n";
    });
    res += "# relation from categories to records\n";
    cats.forEach(function (cat) {
        var rec = categoryResults[cat];
        res += " \"" + cat + "\" -> \"record\" \n";
    });
    //other domains to this
    cats.forEach(function (cat) {});
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "}\n";
    return res;
}
exports.graphDomain = graphDomain;
/*
    categoryDesc : theModel.full.domain[filterdomain].categories[category],
    distinct : distinct,
    delta : delta,
    presentRecords : recordCount.presentrecords,
    percPresent : percent,
    sampleValues : valuesList
  }
*/
function replaceBr(string) {
    string = string.replace(/\n/g, "\n\t\t\t\t\t\t\t\t\t\t\tbr\n\t\t\t\t\t\t\t\t\t\t\t| ");
    return string;
}
/**
 * generate a textual representation of a domain
 */
function tabDomain(domain, m) {
    // draw a model domains
    var cats = fdevsta_monmove_1.Model.getCategoriesForDomain(m, domain);
    cats = fdevsta_monmove_1.Model.sortCategoriesByImportance(m.full.domain[domain].categories || {}, cats);
    //console.log(cats.join("\n"));
    var catdesc = Describe.getCategoryStatsInDomain(cats[0], domain, m);
    var catResult = calcCategoryRecord(m, cats[0], domain);
    var domainDescr = m.full.domain[domain].description || "";
    domainDescr = replaceBr(domainDescr);
    var res = "\n\n// preset form values if we receive a userdata object //\n- user = user\n\nextends ../layout_p\n\nblock content\n\n\tnav.navbar.navbar-default.navbar-fixed-top\n\t\t.container\n\t\t\t.navbar-header\n\t\t\t\t.navbar-brand(style='bgcolor:orange;color:darkblue;font-family:Arial Black;font-size:15.118px') wosap domain " + domain + "\n\t\t\tul.nav.navbar-nav.navbar-right #{uid}\n\t\t\t\tli\n\t\t\t\t\t.navbar-btn#btn-logout.btn.btn-default(onclick=\"location.href='/home'\")\n\t\t\t\t\t\t| back to home\n\n\tp  &nbsp;\n\tp &nbsp;\n\tp\n\n\tdiv.well\n\t\th3 domain \"" + domain + "\"\n\t\t\tspan.pull-right " + catResult.nrTotalRecordsInDomain + " records\n\t\tp\n\t\tspan " + domainDescr + "\n\n\t\ttable.table.table-condensed.table-striped\n\t\t\tthead\n\t\t\t\ttr\n\t\t\t\t\tth category\n\t\t\t\t\tth(style=\"width:10%\") count\n\t\t\t\t\tth\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd synonyms\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd description\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd example values\n\t\t\ttbody\n";
    var categoryResults = {};
    var otherdomains = [];
    var categoryMap = m.full.domain[domain].categories || {};
    cats.forEach(function (cat) {
        var catdesc = Describe.getCategoryStatsInDomain(cat, domain, m);
        //console.log(JSON.stringify(catdesc));
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        /*
            res += `"${cat}" [label="{ ${cat} | ${catResult.nrDistinctValuesInDomain} Values in ${catResult.nrRecordsInDomain} `;
            if(catResult.nrRecordsInDomain !== catResult.nrRecords) {
              res +=  `|  ${catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain} other values in ${catResult.nrRecords - catResult.nrRecordsInDomain} other records`;
            } else {
              res += ` `;
            }
            res += `}"]\n`;
        */
        //console.log(JSON.stringify(m.full.domain[domain]));
        if (m.full.domain[domain].categories[cat]) {
            var synonymsString = Util.listToCommaAnd(catdesc.categoryDesc && catdesc.categoryDesc.synonyms && catdesc.categoryDesc.synonyms || []) || "&nbsp;";
            res += "\n\t\t\ttr\n\t\t\t\t\ttd.cat_count " + cat + "\n\t\t\t\t\ttd " + catdesc.presentRecords + " distinct values in " + catdesc.percPresent + "% of records\n\t\t\t\t\ttd\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr.cat_synonyms\n\t\t\t\t\t\t\t\ttd " + synonymsString + "\n\t\t\t\t\t\t\ttr.cat_description\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.categoryDesc && catdesc.categoryDesc.description || "") + "\n\t\t\t\t\t\t\ttr.cat_samplevalues\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.sampleValues) + "\n      ";
        }
    });
    var othercats = cats.length - Object.keys(m.full.domain[domain].categories).length;
    var remainingCategories = _.difference(cats, Object.keys(m.full.domain[domain].categories));
    if (othercats > 0) {
        res += "\n\t\tp   and " + othercats + " other categories\n\t\t| " + Util.listToCommaAnd(remainingCategories) + "\n       ";
    }
    /*
      // calculate other domains.
      // draw "other categories"
      res += `node [color=purple, style=filled]; \n`
      otherdomains.forEach(function(otherdomain) {
        res += `"${otherdomain}" \n`;
      });
      // count records in domain :
      var nrRecords = m.records.reduce(function(prev,entry) {
      return prev + ((entry._domain === domain) ? 1 : 0);
      },0);
      res += `node [shape=record]; \n`
      res += ` "record" [label="{<f0> ${domain} | ${nrRecords}}"] \n`;
          res += ` "r_other" [label="{<f0> other | ${nrRecords}}"] \n `;
          res += `# relation from categories to domain\n`;
      cats.forEach(function(cat) {
        res += ` "${cat}" -> "${domain}" \n`;
      })
      
      res += `# relation from categories to records\n`;
      cats.forEach(function(cat) {
        var rec = categoryResults[cat];
        res += ` "${cat}" -> "record" \n`;
      })
      
      //other domains to this
      cats.forEach(function(cat) {
      
      })
    */
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "\n\t\th3 Version\n\t\t\ta.small(href=\"/whatsnew\")\n\n\nblock scripts\n\tscript(src='/vendor/jquery-2.2.3.min.js')\n\tscript(src='/vendor/bootstrap.min.js')\n\tscript(src='/js/views/settings.js')\n";
    return res;
}
exports.tabDomain = tabDomain;
var child_process_1 = require("child_process");
function execCmd(cmd) {
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error("exec error: " + error);
            return;
        }
        console.log("stdout: " + stdout);
        console.log("stderr: " + stderr);
    });
}
;
function visModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = graphDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".gv";
        fs.writeFileSync(fnGraph, s);
        if (process.env.GRAPHVIZ) {
            console.log("here the file " + fnGraph);
            execCmd(process.env.GRAPHVIZ + " -Tjpeg -O " + fnGraph);
        }
    });
}
exports.visModels = visModels;
function tabModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = tabDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".jade";
        debuglog("here the file " + fnGraph);
        fs.writeFileSync(fnGraph, s);
    });
}
exports.tabModels = tabModels;
//# sourceMappingURL=data:application/json;base64,
