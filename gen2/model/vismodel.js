/**
 * visualize a model and calculate some statistics
 */
"use strict";

var fs = require("fs");
var fdevsta_monmove_1 = require("fdevsta_monmove");
var Util = require("abot_utils");
var Describe = require("../match/describe");
var _ = require("lodash");
var debug = require("debug");
//import * as elasticlunr from 'elasticlunr';
var debuglog = debug('vismodel.ts');
;
var elasticlunr = require('elasticlunr');
function JSONEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\'/g, "\\'").replace(/\"/g, '\\"').replace(/\&/g, "\\&").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
    // .replace(/\b/g, "\\b")
    // .replace(/\f/g, "\\f");
}
exports.JSONEscape = JSONEscape;
;
function makeLunrIndex(modelpath, output, silent) {
    var mdl = JSON.parse('' + fs.readFileSync(modelpath + '.model.json'));
    var data = JSON.parse('' + fs.readFileSync(modelpath + '.data.json'));
    var cats = mdl.category.filter(function (a) {
        return typeof a !== 'string';
    });
    var qbeDataObjects = cats.filter(function (cat) {
        return cat.QBE || cat.QBEInclude;
    });
    //console.log("here cats" + JSON.stringify(cats));
    //console.log("\nhere data objects" + JSON.stringify(qbeDataObjects));
    var qbeDataNames = qbeDataObjects.map(function (cat) {
        return cat.name;
    });
    qbeDataNames = _.union(qbeDataNames, mdl.columns);
    var LUNRIndex = cats.filter(function (cat) {
        return cat.LUNRIndex;
    }).map(function (cat) {
        return cat.name;
    });
    //var elasticlunr = require('lunr');
    var bomdata = data;
    // index all LUNR properties
    var index = elasticlunr(function () {
        var that = this;
        LUNRIndex /*
                  ["appId",
                  "AppKey",
                  "AppName",
                    "ApplicationComponent",
                    "RoleName",
                    "ApplicationType",
                    "BSPName",
                    "BSPApplicationURL",
                    "releaseName",
                    "BusinessCatalog",
                    "TechnicalCatalog"] */
        .forEach(function (field) {
            that.addField(field);
        });
        this.setRef('id');
        this.saveDocument(false);
    });
    bomdata.forEach(function (o, index) {
        o.id = index;
    });
    bomdata.forEach(function (record) {
        index.addDoc(record);
    });
    var elastic = index;
    // dump the lunr index
    //
    var theIndex = index.toJSON();
    var columns = mdl.columns.map(function (colname) {
        var res = cats.filter(function (cat) {
            return cat.name === colname;
        });
        if (res.length !== 1) {
            throw new Error("undefined or non-object column : " + colname);
        }
        ;
        return res[0];
    });
    var columnNames = columns.map(function (col) {
        return col.name;
    });
    var jsonp = "var mdldata = {};\n//columns \n mdldata.columns = [\"" + columns.map(function (col) {
        return col.name;
    }).join('","') + "\"];";
    var json = "{ \"columns\"  : [\"" + columns.map(function (col) {
        return JSONEscape(col.name);
    }).join('","') + "\"],";
    // jsonp += `\n mdldata.fulldata = ${JSON.stringify(bomdata)};\n`;
    //jsonp += `\n//columns info \n mdldata.lunrcolumns = ["{${LUNRIndex.join('","')}"];`;
    jsonp += "\n//columns info \n mdldata.columnsDescription = {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" :  \"" + JSONEscape(col.description || col.name) + "\" ";
    }).join(',') + "\n      };";
    json += "\"columnsDescription\" : {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" :  \"" + JSONEscape(col.description || col.name) + "\" ";
    }).join(',') + "\n      },";
    jsonp += "\n//columns info \n mdldata.columnsDefaultWidth = {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" : " + (col.defaultWidth || 150) + " ";
    }).join(',') + "\n      };";
    json += "\n\"columnsDefaultWidth\" : {" + columns.map(function (col) {
        return " \n \"" + col.name + "\" : " + (col.defaultWidth || 150) + " ";
    }).join(',') + "\n      },";
    var theIndexStr = JSON.stringify(theIndex);
    jsonp += "\nvar serIndex =\"" + JSONEscape(theIndexStr) + "\";\n";
    // jsonp += "\nvar serIndex =" + JSON.stringify(theIndex) + ";\n";
    json += '\n"serIndex" :' + theIndexStr + ',';
    //console.log("here all names " + JSON.stringify(qbeDataNames));
    var cleanseddata = bomdata.map(function (o) {
        var res = {};
        qbeDataNames.forEach(function (key) {
            res[key] = o[key];
        });
        return res;
    });
    if (!silent) {
        console.log("dumping " + output);
        console.log("length of index str" + theIndexStr.length);
        console.log("available          " + columns.length + " columns");
        console.log("returning as data  " + qbeDataNames.length + " columns");
        console.log("indexing           " + LUNRIndex.length + " columns");
        console.log('returned but not available', _.difference(qbeDataNames, columnNames).join(", "));
        console.log('returned but not indexed', _.difference(qbeDataNames, LUNRIndex).join(", "));
    }
    jsonp += "var data=" + JSON.stringify(cleanseddata) + ";";
    json += '"data":' + JSON.stringify(cleanseddata) + "\n}";
    jsonp += "\n\n           // var elastic = elasticlunr.Index.load(serIndex);\n\n  ";
    //fs.writeFileSync(output + ".lunr.js", jsonp);
    fs.writeFileSync(output + ".lunr.json", json);
}
exports.makeLunrIndex = makeLunrIndex;
/*

  var index = elastilunr.Index.load(obj);


}

 "QBE" : false,
      "QBEInclude" : true,
      "LUNRIndex": false
*/
function calcCategoryRecord(m, category, domain) {
    var otherdomains = fdevsta_monmove_1.Model.getDomainsForCategory(m, category);
    _.pull(otherdomains, domain);
    var res = {
        otherdomains: otherdomains,
        nrDistinctValues: 0,
        nrDistinctValuesInDomain: 0,
        nrRecords: 0,
        nrRecordsInDomain: 0,
        nrTotalRecordsInDomain: 0
    };
    var values = [];
    var valuesInDomain = [];
    var nrRecordsInDomain = 0;
    var distinctValues = m.records.forEach(function (oEntry) {
        if (oEntry._domain === domain) {
            res.nrTotalRecordsInDomain += 1;
        }
        if (oEntry[category]) {
            var value = oEntry[category];
            if (oEntry._domain === domain) {
                valuesInDomain[value] = (valuesInDomain[value] || 0) + 1;
                res.nrRecordsInDomain += 1;
            }
            values[value] = (values[value] || 0) + 1;
            res.nrRecords += 1;
        }
    });
    res.nrDistinctValues = Object.keys(values).length;
    res.nrDistinctValuesInDomain = Object.keys(valuesInDomain).length;
    return res;
}
exports.calcCategoryRecord = calcCategoryRecord;
function graphDomain(domain, m) {
    // draw a model domains
    var res = "\n    digraph sdsu {\n\tsize=\"36,36\";\n   rankdir=LR\n\tnode [color=yellow, style=filled];\n    \"" + domain + "\"\n  ";
    // add all category nodes
    res += "node [shape=record, color=yellow, style=filled];\n ";
    var cats = fdevsta_monmove_1.Model.getCategoriesForDomain(m, domain);
    var categoryResults = {};
    var otherdomains = [];
    cats.forEach(function (cat) {
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        res += "\"" + cat + "\" [label=\"{ " + cat + " | " + catResult.nrDistinctValuesInDomain + " Values in " + catResult.nrRecordsInDomain + " ";
        if (catResult.nrRecordsInDomain !== catResult.nrRecords) {
            res += "|  " + (catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain) + " other values in " + (catResult.nrRecords - catResult.nrRecordsInDomain) + " other records";
        } else {
            res += " ";
        }
        res += "}\"]\n";
    });
    // calculate other domains.
    // draw "other categories"
    res += "node [color=purple, style=filled]; \n";
    otherdomains.forEach(function (otherdomain) {
        res += "\"" + otherdomain + "\" \n";
    });
    // count records in domain :
    var nrRecords = m.records.reduce(function (prev, entry) {
        return prev + (entry._domain === domain ? 1 : 0);
    }, 0);
    res += "node [shape=record]; \n";
    res += " \"record\" [label=\"{<f0> " + domain + " | " + nrRecords + "}\"] \n";
    res += " \"r_other\" [label=\"{<f0> other | " + nrRecords + "}\"] \n ";
    res += "# relation from categories to domain\n";
    cats.forEach(function (cat) {
        res += " \"" + cat + "\" -> \"" + domain + "\" \n";
    });
    res += "# relation from categories to records\n";
    cats.forEach(function (cat) {
        var rec = categoryResults[cat];
        res += " \"" + cat + "\" -> \"record\" \n";
    });
    //other domains to this
    cats.forEach(function (cat) {});
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "}\n";
    return res;
}
exports.graphDomain = graphDomain;
/*
    categoryDesc : theModel.full.domain[filterdomain].categories[category],
    distinct : distinct,
    delta : delta,
    presentRecords : recordCount.presentrecords,
    percPresent : percent,
    sampleValues : valuesList
  }
*/
function replaceBr(string) {
    string = string.replace(/\n/g, "\n\t\t\t\t\t\t\t\t\t\t\tbr\n\t\t\t\t\t\t\t\t\t\t\t| ");
    return string;
}
/**
 * generate a textual representation of a domain
 */
function tabDomain(domain, m) {
    // draw a model domains
    var cats = fdevsta_monmove_1.Model.getCategoriesForDomain(m, domain);
    cats = fdevsta_monmove_1.Model.sortCategoriesByImportance(m.full.domain[domain].categories || {}, cats);
    //console.log(cats.join("\n"));
    var catdesc = Describe.getCategoryStatsInDomain(cats[0], domain, m);
    var catResult = calcCategoryRecord(m, cats[0], domain);
    var domainDescr = m.full.domain[domain].description || "";
    domainDescr = replaceBr(domainDescr);
    var res = "\n\n// preset form values if we receive a userdata object //\n- user = user\n\nextends ../layout_p\n\nblock content\n\n\tnav.navbar.navbar-default.navbar-fixed-top\n\t\t.container\n\t\t\t.navbar-header\n\t\t\t\t.navbar-brand(style='bgcolor:orange;color:darkblue;font-family:Arial Black;font-size:15.118px') wosap domain " + domain + "\n\t\t\tul.nav.navbar-nav.navbar-right #{uid}\n\t\t\t\tli\n\t\t\t\t\t.navbar-btn#btn-logout.btn.btn-default(onclick=\"location.href='/home'\")\n\t\t\t\t\t\t| back to home\n\n\tp  &nbsp;\n\tp &nbsp;\n\tp\n\n\tdiv.well\n\t\th3 domain \"" + domain + "\"\n\t\t\tspan.pull-right " + catResult.nrTotalRecordsInDomain + " records\n\t\tp\n\t\tspan " + domainDescr + "\n\n\t\ttable.table.table-condensed.table-striped\n\t\t\tthead\n\t\t\t\ttr\n\t\t\t\t\tth category\n\t\t\t\t\tth(style=\"width:10%\") count\n\t\t\t\t\tth\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd synonyms\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd description\n\t\t\t\t\t\t\ttr\n\t\t\t\t\t\t\t\ttd example values\n\t\t\ttbody\n";
    var categoryResults = {};
    var otherdomains = [];
    var categoryMap = m.full.domain[domain].categories || {};
    cats.forEach(function (cat) {
        var catdesc = Describe.getCategoryStatsInDomain(cat, domain, m);
        //console.log(JSON.stringify(catdesc));
        var catResult = calcCategoryRecord(m, cat, domain);
        categoryResults[cat] = catResult;
        otherdomains = _.union(otherdomains, categoryResults[cat].otherDomains);
        /*
            res += `"${cat}" [label="{ ${cat} | ${catResult.nrDistinctValuesInDomain} Values in ${catResult.nrRecordsInDomain} `;
            if(catResult.nrRecordsInDomain !== catResult.nrRecords) {
              res +=  `|  ${catResult.nrDistinctValues - catResult.nrDistinctValuesInDomain} other values in ${catResult.nrRecords - catResult.nrRecordsInDomain} other records`;
            } else {
              res += ` `;
            }
            res += `}"]\n`;
        */
        //console.log(JSON.stringify(m.full.domain[domain]));
        if (m.full.domain[domain].categories[cat]) {
            var synonymsString = Util.listToCommaAnd(catdesc.categoryDesc && catdesc.categoryDesc.synonyms && catdesc.categoryDesc.synonyms || []) || "&nbsp;";
            res += "\n\t\t\ttr\n\t\t\t\t\ttd.cat_count " + cat + "\n\t\t\t\t\ttd " + catdesc.presentRecords + " distinct values in " + catdesc.percPresent + "% of records\n\t\t\t\t\ttd\n\t\t\t\t\t\ttable\n\t\t\t\t\t\t\ttr.cat_synonyms\n\t\t\t\t\t\t\t\ttd " + synonymsString + "\n\t\t\t\t\t\t\ttr.cat_description\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.categoryDesc && catdesc.categoryDesc.description || "") + "\n\t\t\t\t\t\t\ttr.cat_samplevalues\n\t\t\t\t\t\t\t\ttd " + replaceBr(catdesc.sampleValues) + "\n      ";
        }
    });
    var othercats = cats.length - Object.keys(m.full.domain[domain].categories).length;
    var remainingCategories = _.difference(cats, Object.keys(m.full.domain[domain].categories));
    if (othercats > 0) {
        res += "\n\t\tp   and " + othercats + " other categories\n\t\t| " + Util.listToCommaAnd(remainingCategories) + "\n       ";
    }
    /*
      // calculate other domains.
      // draw "other categories"
      res += `node [color=purple, style=filled]; \n`
      otherdomains.forEach(function(otherdomain) {
        res += `"${otherdomain}" \n`;
      });
      // count records in domain :
      var nrRecords = m.records.reduce(function(prev,entry) {
      return prev + ((entry._domain === domain) ? 1 : 0);
      },0);
      res += `node [shape=record]; \n`
      res += ` "record" [label="{<f0> ${domain} | ${nrRecords}}"] \n`;
         res += ` "r_other" [label="{<f0> other | ${nrRecords}}"] \n `;
         res += `# relation from categories to domain\n`;
      cats.forEach(function(cat) {
        res += ` "${cat}" -> "${domain}" \n`;
      })
     
      res += `# relation from categories to records\n`;
      cats.forEach(function(cat) {
        var rec = categoryResults[cat];
        res += ` "${cat}" -> "record" \n`;
      })
     
      //other domains to this
      cats.forEach(function(cat) {
     
      })
    */
    /*
    cats fo
      digraph sdsu {
      size="36,36";
      node [color=yellow, style=filled];
      FLPD FLP "BOM Editor", "WIKIURL" "UI5 Documentation", "UI5 Example", "STARTTA"
      BCP
      node [color=grey, style=filled];
      node [fontname="Verdana", size="30,30"];
      node [color=grey, style=filled];
      graph [ fontname = "Arial",
    */
    res += "\n\t\th3 Version\n\t\t\ta.small(href=\"/whatsnew\")\n\n\nblock scripts\n\tscript(src='/vendor/jquery-2.2.3.min.js')\n\tscript(src='/vendor/bootstrap.min.js')\n\tscript(src='/js/views/settings.js')\n";
    return res;
}
exports.tabDomain = tabDomain;
var child_process_1 = require("child_process");
function execCmd(cmd) {
    child_process_1.exec(cmd, function (error, stdout, stderr) {
        if (error) {
            console.error("exec error: " + error);
            return;
        }
        console.log("stdout: " + stdout);
        console.log("stderr: " + stderr);
    });
}
;
function visModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = graphDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".gv";
        fs.writeFileSync(fnGraph, s);
        if (process.env.GRAPHVIZ) {
            console.log("here the file " + fnGraph);
            execCmd(process.env.GRAPHVIZ + " -Tjpeg -O " + fnGraph);
        }
    });
}
exports.visModels = visModels;
function tabModels(m, folderOut) {
    m.domains.forEach(function (sDomain) {
        var s = tabDomain(sDomain, m);
        var fnGraph = folderOut + "/" + sDomain.replace(/ /g, '_') + ".jade";
        debuglog("here the file " + fnGraph);
        fs.writeFileSync(fnGraph, s);
    });
}
exports.tabModels = tabModels;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC92aXNtb2RlbC50cyIsIm1vZGVsL3Zpc21vZGVsLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsImZkZXZzdGFfbW9ubW92ZV8xIiwiVXRpbCIsIkRlc2NyaWJlIiwiXyIsImRlYnVnIiwiZGVidWdsb2ciLCJlbGFzdGljbHVuciIsIkpTT05Fc2NhcGUiLCJzIiwicmVwbGFjZSIsImV4cG9ydHMiLCJtYWtlTHVuckluZGV4IiwibW9kZWxwYXRoIiwib3V0cHV0Iiwic2lsZW50IiwibWRsIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwiZGF0YSIsImNhdHMiLCJjYXRlZ29yeSIsImZpbHRlciIsImEiLCJxYmVEYXRhT2JqZWN0cyIsImNhdCIsIlFCRSIsIlFCRUluY2x1ZGUiLCJxYmVEYXRhTmFtZXMiLCJtYXAiLCJuYW1lIiwidW5pb24iLCJjb2x1bW5zIiwiTFVOUkluZGV4IiwiYm9tZGF0YSIsImluZGV4IiwidGhhdCIsImZvckVhY2giLCJmaWVsZCIsImFkZEZpZWxkIiwic2V0UmVmIiwic2F2ZURvY3VtZW50IiwibyIsImlkIiwicmVjb3JkIiwiYWRkRG9jIiwiZWxhc3RpYyIsInRoZUluZGV4IiwidG9KU09OIiwiY29sbmFtZSIsInJlcyIsImxlbmd0aCIsIkVycm9yIiwiY29sdW1uTmFtZXMiLCJjb2wiLCJqc29ucCIsImpvaW4iLCJqc29uIiwiZGVzY3JpcHRpb24iLCJkZWZhdWx0V2lkdGgiLCJ0aGVJbmRleFN0ciIsInN0cmluZ2lmeSIsImNsZWFuc2VkZGF0YSIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJkaWZmZXJlbmNlIiwid3JpdGVGaWxlU3luYyIsImNhbGNDYXRlZ29yeVJlY29yZCIsIm0iLCJkb21haW4iLCJvdGhlcmRvbWFpbnMiLCJNb2RlbCIsImdldERvbWFpbnNGb3JDYXRlZ29yeSIsInB1bGwiLCJuckRpc3RpbmN0VmFsdWVzIiwibnJEaXN0aW5jdFZhbHVlc0luRG9tYWluIiwibnJSZWNvcmRzIiwibnJSZWNvcmRzSW5Eb21haW4iLCJuclRvdGFsUmVjb3Jkc0luRG9tYWluIiwidmFsdWVzIiwidmFsdWVzSW5Eb21haW4iLCJkaXN0aW5jdFZhbHVlcyIsInJlY29yZHMiLCJvRW50cnkiLCJfZG9tYWluIiwidmFsdWUiLCJPYmplY3QiLCJrZXlzIiwiZ3JhcGhEb21haW4iLCJnZXRDYXRlZ29yaWVzRm9yRG9tYWluIiwiY2F0ZWdvcnlSZXN1bHRzIiwiY2F0UmVzdWx0Iiwib3RoZXJEb21haW5zIiwib3RoZXJkb21haW4iLCJyZWR1Y2UiLCJwcmV2IiwiZW50cnkiLCJyZWMiLCJyZXBsYWNlQnIiLCJzdHJpbmciLCJ0YWJEb21haW4iLCJzb3J0Q2F0ZWdvcmllc0J5SW1wb3J0YW5jZSIsImZ1bGwiLCJjYXRlZ29yaWVzIiwiY2F0ZGVzYyIsImdldENhdGVnb3J5U3RhdHNJbkRvbWFpbiIsImRvbWFpbkRlc2NyIiwiY2F0ZWdvcnlNYXAiLCJzeW5vbnltc1N0cmluZyIsImxpc3RUb0NvbW1hQW5kIiwiY2F0ZWdvcnlEZXNjIiwic3lub255bXMiLCJwcmVzZW50UmVjb3JkcyIsInBlcmNQcmVzZW50Iiwic2FtcGxlVmFsdWVzIiwib3RoZXJjYXRzIiwicmVtYWluaW5nQ2F0ZWdvcmllcyIsImNoaWxkX3Byb2Nlc3NfMSIsImV4ZWNDbWQiLCJjbWQiLCJleGVjIiwiZXJyb3IiLCJzdGRvdXQiLCJzdGRlcnIiLCJ2aXNNb2RlbHMiLCJmb2xkZXJPdXQiLCJkb21haW5zIiwic0RvbWFpbiIsImZuR3JhcGgiLCJwcm9jZXNzIiwiZW52IiwiR1JBUEhWSVoiLCJ0YWJNb2RlbHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNHQTs7QURNQSxJQUFBQSxLQUFBQyxRQUFBLElBQUEsQ0FBQTtBQUVBLElBQUFDLG9CQUFBRCxRQUFBLGlCQUFBLENBQUE7QUFFQSxJQUFBRSxPQUFBRixRQUFBLFlBQUEsQ0FBQTtBQUVBLElBQUFHLFdBQUFILFFBQUEsbUJBQUEsQ0FBQTtBQUVBLElBQUFJLElBQUFKLFFBQUEsUUFBQSxDQUFBO0FBQ0EsSUFBQUssUUFBQUwsUUFBQSxPQUFBLENBQUE7QUFFQTtBQUVBLElBQUlNLFdBQVdELE1BQU0sYUFBTixDQUFmO0FBU0M7QUFFRCxJQUFJRSxjQUFjUCxRQUFRLGFBQVIsQ0FBbEI7QUFHQSxTQUFBUSxVQUFBLENBQTJCQyxDQUEzQixFQUFvQztBQUVsQyxXQUFPQSxFQUFFQyxPQUFGLENBQVUsS0FBVixFQUFpQixNQUFqQixFQUF5QkEsT0FBekIsQ0FBaUMsS0FBakMsRUFBd0MsS0FBeEMsRUFDSkEsT0FESSxDQUNJLEtBREosRUFDVyxLQURYLEVBRUpBLE9BRkksQ0FFSSxLQUZKLEVBRVcsS0FGWCxFQUdKQSxPQUhJLENBR0ksS0FISixFQUdXLEtBSFgsRUFJSkEsT0FKSSxDQUlJLEtBSkosRUFJVyxLQUpYLEVBS0pBLE9BTEksQ0FLSSxLQUxKLEVBS1csS0FMWCxDQUFQO0FBTUE7QUFDQTtBQUNEO0FBVkRDLFFBQUFILFVBQUEsR0FBQUEsVUFBQTtBQVVDO0FBR0QsU0FBQUksYUFBQSxDQUE4QkMsU0FBOUIsRUFBaURDLE1BQWpELEVBQWlFQyxNQUFqRSxFQUFtRjtBQUNqRixRQUFJQyxNQUFNQyxLQUFLQyxLQUFMLENBQVcsS0FBS25CLEdBQUdvQixZQUFILENBQWdCTixZQUFZLGFBQTVCLENBQWhCLENBQVY7QUFDQSxRQUFJTyxPQUFPSCxLQUFLQyxLQUFMLENBQVcsS0FBS25CLEdBQUdvQixZQUFILENBQWdCTixZQUFZLFlBQTVCLENBQWhCLENBQVg7QUFFQSxRQUFJUSxPQUFPTCxJQUFJTSxRQUFKLENBQWFDLE1BQWIsQ0FBb0IsVUFBQUMsQ0FBQSxFQUFDO0FBQUksZUFBQSxPQUFPQSxDQUFQLEtBQWEsUUFBYjtBQUFxQixLQUE5QyxDQUFYO0FBRUEsUUFBSUMsaUJBQWlCSixLQUFLRSxNQUFMLENBQVksVUFBQUcsR0FBQSxFQUFHO0FBQUksZUFBQ0EsSUFBSUMsR0FBSixJQUFXRCxJQUFJRSxVQUFoQjtBQUEyQixLQUE5QyxDQUFyQjtBQUVBO0FBQ0E7QUFDQSxRQUFJQyxlQUFlSixlQUFlSyxHQUFmLENBQW1CLFVBQUFKLEdBQUEsRUFBRztBQUFJLGVBQUFBLElBQUlLLElBQUo7QUFBUSxLQUFsQyxDQUFuQjtBQUVBRixtQkFBZXpCLEVBQUU0QixLQUFGLENBQVFILFlBQVIsRUFBc0JiLElBQUlpQixPQUExQixDQUFmO0FBR0EsUUFBSUMsWUFBWWIsS0FBS0UsTUFBTCxDQUFZLFVBQUFHLEdBQUEsRUFBRztBQUFJLGVBQUFBLElBQUlRLFNBQUo7QUFBYSxLQUFoQyxFQUFrQ0osR0FBbEMsQ0FBc0MsVUFBQUosR0FBQSxFQUFHO0FBQUksZUFBQUEsSUFBSUssSUFBSjtBQUFRLEtBQXJELENBQWhCO0FBQ0E7QUFDQSxRQUFJSSxVQUFVZixJQUFkO0FBQ0E7QUFDQSxRQUFJZ0IsUUFBUTdCLFlBQVksWUFBQTtBQUN0QixZQUFJOEIsT0FBTyxJQUFYO0FBQ0FILGtCQUFVOzs7Ozs7Ozs7Ozs7QUFBVixTQVdvQ0ksT0FYcEMsQ0FXNEMsVUFBVUMsS0FBVixFQUFlO0FBQ3ZERixpQkFBS0csUUFBTCxDQUFjRCxLQUFkO0FBQ0QsU0FiSDtBQWNBLGFBQUtFLE1BQUwsQ0FBWSxJQUFaO0FBQ0EsYUFBS0MsWUFBTCxDQUFrQixLQUFsQjtBQUNELEtBbEJXLENBQVo7QUFtQkFQLFlBQVFHLE9BQVIsQ0FBZ0IsVUFBVUssQ0FBVixFQUFhUCxLQUFiLEVBQWtCO0FBQ2hDTyxVQUFFQyxFQUFGLEdBQU9SLEtBQVA7QUFDRCxLQUZEO0FBR0FELFlBQVFHLE9BQVIsQ0FBZ0IsVUFBVU8sTUFBVixFQUFnQjtBQUM5QlQsY0FBTVUsTUFBTixDQUFhRCxNQUFiO0FBQ0QsS0FGRDtBQUdBLFFBQUlFLFVBQVVYLEtBQWQ7QUFFQTtBQUNBO0FBQ0EsUUFBSVksV0FBV1osTUFBTWEsTUFBTixFQUFmO0FBQ0EsUUFBSWhCLFVBQVVqQixJQUFJaUIsT0FBSixDQUFZSCxHQUFaLENBQWdCLFVBQUFvQixPQUFBLEVBQU87QUFDbkMsWUFBSUMsTUFBTTlCLEtBQUtFLE1BQUwsQ0FBWSxVQUFBRyxHQUFBLEVBQUc7QUFBSSxtQkFBQUEsSUFBSUssSUFBSixLQUFhbUIsT0FBYjtBQUFvQixTQUF2QyxDQUFWO0FBQ0EsWUFBR0MsSUFBSUMsTUFBSixLQUFlLENBQWxCLEVBQXFCO0FBQ25CLGtCQUFNLElBQUlDLEtBQUosQ0FBVSxzQ0FBc0NILE9BQWhELENBQU47QUFDRDtBQUFBO0FBQ0QsZUFBT0MsSUFBSSxDQUFKLENBQVA7QUFDRCxLQU5hLENBQWQ7QUFRQSxRQUFJRyxjQUFjckIsUUFBUUgsR0FBUixDQUFZLFVBQUF5QixHQUFBLEVBQUc7QUFBSSxlQUFBQSxJQUFJeEIsSUFBSjtBQUFRLEtBQTNCLENBQWxCO0FBRUEsUUFBSXlCLFFBQVEsMERBQXVEdkIsUUFBUUgsR0FBUixDQUFZLFVBQUF5QixHQUFBLEVBQUc7QUFBSSxlQUFBQSxJQUFJeEIsSUFBSjtBQUFRLEtBQTNCLEVBQTZCMEIsSUFBN0IsQ0FBa0MsS0FBbEMsQ0FBdkQsR0FBK0YsTUFBM0c7QUFFQSxRQUFJQyxPQUFPLHlCQUFvQnpCLFFBQVFILEdBQVIsQ0FBWSxVQUFBeUIsR0FBQSxFQUFHO0FBQUksZUFBQS9DLFdBQVcrQyxJQUFJeEIsSUFBZixDQUFBO0FBQW9CLEtBQXZDLEVBQXlDMEIsSUFBekMsQ0FBOEMsS0FBOUMsQ0FBcEIsR0FBd0UsTUFBbkY7QUFDQTtBQUNBO0FBRUFELGFBQVMsdURBQXFEdkIsUUFBUUgsR0FBUixDQUFZLFVBQUF5QixHQUFBLEVBQUc7QUFDM0UsZUFBQSxXQUFRQSxJQUFJeEIsSUFBWixHQUFnQixVQUFoQixHQUF5QnZCLFdBQVcrQyxJQUFJSSxXQUFKLElBQW1CSixJQUFJeEIsSUFBbEMsQ0FBekIsR0FBZ0UsS0FBaEU7QUFBb0UsS0FEUixFQUU1RDBCLElBRjRELENBRXZELEdBRnVELENBQXJELEdBRUUsWUFGWDtBQUtBQyxZQUFRLCtCQUEyQnpCLFFBQVFILEdBQVIsQ0FBWSxVQUFBeUIsR0FBQSxFQUFHO0FBQ2hELGVBQUEsV0FBUUEsSUFBSXhCLElBQVosR0FBZ0IsVUFBaEIsR0FBeUJ2QixXQUFXK0MsSUFBSUksV0FBSixJQUFtQkosSUFBSXhCLElBQWxDLENBQXpCLEdBQWdFLEtBQWhFO0FBQW9FLEtBRG5DLEVBRWpDMEIsSUFGaUMsQ0FFNUIsR0FGNEIsQ0FBM0IsR0FFRyxZQUZYO0FBTUFELGFBQVMsd0RBQXNEdkIsUUFBUUgsR0FBUixDQUFZLFVBQUF5QixHQUFBLEVBQUc7QUFDNUUsZUFBQSxXQUFRQSxJQUFJeEIsSUFBWixHQUFnQixPQUFoQixJQUF1QndCLElBQUlLLFlBQUosSUFBb0IsR0FBM0MsSUFBOEMsR0FBOUM7QUFBaUQsS0FEWSxFQUU3REgsSUFGNkQsQ0FFeEQsR0FGd0QsQ0FBdEQsR0FFRSxZQUZYO0FBS0FDLFlBQVEsa0NBQThCekIsUUFBUUgsR0FBUixDQUFZLFVBQUF5QixHQUFBLEVBQUc7QUFDbkQsZUFBQSxXQUFRQSxJQUFJeEIsSUFBWixHQUFnQixPQUFoQixJQUF1QndCLElBQUlLLFlBQUosSUFBb0IsR0FBM0MsSUFBOEMsR0FBOUM7QUFBaUQsS0FEYixFQUVwQ0gsSUFGb0MsQ0FFL0IsR0FGK0IsQ0FBOUIsR0FFRyxZQUZYO0FBT0EsUUFBSUksY0FBYzVDLEtBQUs2QyxTQUFMLENBQWVkLFFBQWYsQ0FBbEI7QUFFQVEsYUFBUyx1QkFBdUJoRCxXQUFXcUQsV0FBWCxDQUF2QixHQUFpRCxPQUExRDtBQUNBO0FBR0FILFlBQVEsbUJBQW1CRyxXQUFuQixHQUFrQyxHQUExQztBQUVBO0FBQ0EsUUFBSUUsZUFBZTVCLFFBQVFMLEdBQVIsQ0FBWSxVQUFBYSxDQUFBLEVBQUM7QUFDOUIsWUFBSVEsTUFBTSxFQUFWO0FBQ0F0QixxQkFBYVMsT0FBYixDQUFxQixVQUFBMEIsR0FBQSxFQUFHO0FBQ3RCYixnQkFBSWEsR0FBSixJQUFXckIsRUFBRXFCLEdBQUYsQ0FBWDtBQUNELFNBRkQ7QUFHQSxlQUFPYixHQUFQO0FBQ0QsS0FOa0IsQ0FBbkI7QUFRQSxRQUFHLENBQUNwQyxNQUFKLEVBQVk7QUFDVmtELGdCQUFRQyxHQUFSLENBQVksYUFBYXBELE1BQXpCO0FBQ0FtRCxnQkFBUUMsR0FBUixDQUFZLHdCQUF3QkwsWUFBWVQsTUFBaEQ7QUFDQWEsZ0JBQVFDLEdBQVIsQ0FBWSx3QkFBd0JqQyxRQUFRbUIsTUFBaEMsR0FBeUMsVUFBckQ7QUFDQWEsZ0JBQVFDLEdBQVIsQ0FBWSx3QkFBd0JyQyxhQUFhdUIsTUFBckMsR0FBOEMsVUFBMUQ7QUFDQWEsZ0JBQVFDLEdBQVIsQ0FBWSx3QkFBd0JoQyxVQUFVa0IsTUFBbEMsR0FBMkMsVUFBdkQ7QUFDQWEsZ0JBQVFDLEdBQVIsQ0FBWSw0QkFBWixFQUEyQzlELEVBQUUrRCxVQUFGLENBQWF0QyxZQUFiLEVBQTJCeUIsV0FBM0IsRUFBd0NHLElBQXhDLENBQTZDLElBQTdDLENBQTNDO0FBQ0FRLGdCQUFRQyxHQUFSLENBQVksMEJBQVosRUFBeUM5RCxFQUFFK0QsVUFBRixDQUFhdEMsWUFBYixFQUEyQkssU0FBM0IsRUFBc0N1QixJQUF0QyxDQUEyQyxJQUEzQyxDQUF6QztBQUNEO0FBRURELGFBQVMsY0FBY3ZDLEtBQUs2QyxTQUFMLENBQWVDLFlBQWYsQ0FBZCxHQUE2QyxHQUF0RDtBQUVBTCxZQUFRLFlBQVl6QyxLQUFLNkMsU0FBTCxDQUFlQyxZQUFmLENBQVosR0FBMkMsS0FBbkQ7QUFFQVAsYUFBUyx5RUFBVDtBQU1BO0FBQ0F6RCxPQUFHcUUsYUFBSCxDQUFpQnRELFNBQVMsWUFBMUIsRUFBd0M0QyxJQUF4QztBQUNEO0FBL0hEL0MsUUFBQUMsYUFBQSxHQUFBQSxhQUFBO0FBcUlBOzs7Ozs7Ozs7OztBQWNBLFNBQUF5RCxrQkFBQSxDQUFtQ0MsQ0FBbkMsRUFBc0RoRCxRQUF0RCxFQUF3RWlELE1BQXhFLEVBQXNGO0FBRXBGLFFBQUlDLGVBQWV2RSxrQkFBQXdFLEtBQUEsQ0FBTUMscUJBQU4sQ0FBNEJKLENBQTVCLEVBQStCaEQsUUFBL0IsQ0FBbkI7QUFDQWxCLE1BQUV1RSxJQUFGLENBQU9ILFlBQVAsRUFBcUJELE1BQXJCO0FBQ0EsUUFBSXBCLE1BQU07QUFDUnFCLHNCQUFjQSxZQUROO0FBRVJJLDBCQUFrQixDQUZWO0FBR1JDLGtDQUEwQixDQUhsQjtBQUlSQyxtQkFBVyxDQUpIO0FBS1JDLDJCQUFtQixDQUxYO0FBTVJDLGdDQUF3QjtBQU5oQixLQUFWO0FBU0EsUUFBSUMsU0FBUyxFQUFiO0FBQ0EsUUFBSUMsaUJBQWlCLEVBQXJCO0FBQ0EsUUFBSUgsb0JBQW9CLENBQXhCO0FBQ0EsUUFBSUksaUJBQWlCYixFQUFFYyxPQUFGLENBQVU5QyxPQUFWLENBQWtCLFVBQVUrQyxNQUFWLEVBQWdCO0FBQ3JELFlBQUlBLE9BQU9DLE9BQVAsS0FBbUJmLE1BQXZCLEVBQStCO0FBQzdCcEIsZ0JBQUk2QixzQkFBSixJQUE4QixDQUE5QjtBQUNEO0FBQ0QsWUFBSUssT0FBTy9ELFFBQVAsQ0FBSixFQUFzQjtBQUNwQixnQkFBSWlFLFFBQVFGLE9BQU8vRCxRQUFQLENBQVo7QUFDQSxnQkFBSStELE9BQU9DLE9BQVAsS0FBbUJmLE1BQXZCLEVBQStCO0FBQzdCVywrQkFBZUssS0FBZixJQUF3QixDQUFDTCxlQUFlSyxLQUFmLEtBQXlCLENBQTFCLElBQStCLENBQXZEO0FBQ0FwQyxvQkFBSTRCLGlCQUFKLElBQXlCLENBQXpCO0FBQ0Q7QUFDREUsbUJBQU9NLEtBQVAsSUFBZ0IsQ0FBQ04sT0FBT00sS0FBUCxLQUFpQixDQUFsQixJQUF1QixDQUF2QztBQUNBcEMsZ0JBQUkyQixTQUFKLElBQWlCLENBQWpCO0FBQ0Q7QUFDRixLQWJvQixDQUFyQjtBQWNBM0IsUUFBSXlCLGdCQUFKLEdBQXVCWSxPQUFPQyxJQUFQLENBQVlSLE1BQVosRUFBb0I3QixNQUEzQztBQUNBRCxRQUFJMEIsd0JBQUosR0FBK0JXLE9BQU9DLElBQVAsQ0FBWVAsY0FBWixFQUE0QjlCLE1BQTNEO0FBQ0EsV0FBT0QsR0FBUDtBQUNEO0FBakNEeEMsUUFBQTBELGtCQUFBLEdBQUFBLGtCQUFBO0FBbUNBLFNBQUFxQixXQUFBLENBQTRCbkIsTUFBNUIsRUFBNENELENBQTVDLEVBQTZEO0FBQzNEO0FBQ0EsUUFBSW5CLE1BQU0seUdBS0xvQixNQUxLLEdBS0MsUUFMWDtBQU9BO0FBQ0FwQixXQUFPLHFEQUFQO0FBQ0EsUUFBSTlCLE9BQU9wQixrQkFBQXdFLEtBQUEsQ0FBTWtCLHNCQUFOLENBQTZCckIsQ0FBN0IsRUFBZ0NDLE1BQWhDLENBQVg7QUFFQSxRQUFJcUIsa0JBQWtCLEVBQXRCO0FBQ0EsUUFBSXBCLGVBQWUsRUFBbkI7QUFDQW5ELFNBQUtpQixPQUFMLENBQWEsVUFBVVosR0FBVixFQUFhO0FBQ3hCLFlBQUltRSxZQUFZeEIsbUJBQW1CQyxDQUFuQixFQUFzQjVDLEdBQXRCLEVBQTJCNkMsTUFBM0IsQ0FBaEI7QUFDQXFCLHdCQUFnQmxFLEdBQWhCLElBQXVCbUUsU0FBdkI7QUFDQXJCLHVCQUFlcEUsRUFBRTRCLEtBQUYsQ0FBUXdDLFlBQVIsRUFBc0JvQixnQkFBZ0JsRSxHQUFoQixFQUFxQm9FLFlBQTNDLENBQWY7QUFDQTNDLGVBQU8sT0FBSXpCLEdBQUosR0FBTyxnQkFBUCxHQUFzQkEsR0FBdEIsR0FBeUIsS0FBekIsR0FBK0JtRSxVQUFVaEIsd0JBQXpDLEdBQWlFLGFBQWpFLEdBQStFZ0IsVUFBVWQsaUJBQXpGLEdBQTBHLEdBQWpIO0FBQ0EsWUFBSWMsVUFBVWQsaUJBQVYsS0FBZ0NjLFVBQVVmLFNBQTlDLEVBQXlEO0FBQ3ZEM0IsbUJBQU8sU0FBTTBDLFVBQVVqQixnQkFBVixHQUE2QmlCLFVBQVVoQix3QkFBN0MsSUFBcUUsbUJBQXJFLElBQXlGZ0IsVUFBVWYsU0FBVixHQUFzQmUsVUFBVWQsaUJBQXpILElBQTBJLGdCQUFqSjtBQUNELFNBRkQsTUFFTztBQUNMNUIsbUJBQU8sR0FBUDtBQUNEO0FBQ0RBLGVBQU8sUUFBUDtBQUNELEtBWEQ7QUFhQTtBQUNBO0FBQ0FBLFdBQU8sdUNBQVA7QUFDQXFCLGlCQUFhbEMsT0FBYixDQUFxQixVQUFVeUQsV0FBVixFQUFxQjtBQUN4QzVDLGVBQU8sT0FBSTRDLFdBQUosR0FBZSxPQUF0QjtBQUNELEtBRkQ7QUFHQTtBQUNBLFFBQUlqQixZQUFZUixFQUFFYyxPQUFGLENBQVVZLE1BQVYsQ0FBaUIsVUFBVUMsSUFBVixFQUFnQkMsS0FBaEIsRUFBcUI7QUFDcEQsZUFBT0QsUUFBU0MsTUFBTVosT0FBTixLQUFrQmYsTUFBbkIsR0FBNkIsQ0FBN0IsR0FBaUMsQ0FBekMsQ0FBUDtBQUNELEtBRmUsRUFFYixDQUZhLENBQWhCO0FBR0FwQixXQUFPLHlCQUFQO0FBQ0FBLFdBQU8sZ0NBQTJCb0IsTUFBM0IsR0FBaUMsS0FBakMsR0FBdUNPLFNBQXZDLEdBQWdELFNBQXZEO0FBRUEzQixXQUFPLHlDQUFvQzJCLFNBQXBDLEdBQTZDLFVBQXBEO0FBRUEzQixXQUFPLHdDQUFQO0FBQ0E5QixTQUFLaUIsT0FBTCxDQUFhLFVBQVVaLEdBQVYsRUFBYTtBQUN4QnlCLGVBQU8sUUFBS3pCLEdBQUwsR0FBUSxVQUFSLEdBQWlCNkMsTUFBakIsR0FBdUIsT0FBOUI7QUFDRCxLQUZEO0FBS0FwQixXQUFPLHlDQUFQO0FBQ0E5QixTQUFLaUIsT0FBTCxDQUFhLFVBQVVaLEdBQVYsRUFBYTtBQUN4QixZQUFJeUUsTUFBTVAsZ0JBQWdCbEUsR0FBaEIsQ0FBVjtBQUNBeUIsZUFBTyxRQUFLekIsR0FBTCxHQUFRLHFCQUFmO0FBQ0QsS0FIRDtBQU1BO0FBQ0FMLFNBQUtpQixPQUFMLENBQWEsVUFBVVosR0FBVixFQUFhLENBR3pCLENBSEQ7QUFLQTs7Ozs7Ozs7Ozs7O0FBWUF5QixXQUFPLEtBQVA7QUFDQSxXQUFPQSxHQUFQO0FBQ0Q7QUE1RUR4QyxRQUFBK0UsV0FBQSxHQUFBQSxXQUFBO0FBNkVBOzs7Ozs7Ozs7QUFVQSxTQUFBVSxTQUFBLENBQW1CQyxNQUFuQixFQUFpQztBQUMvQkEsYUFBU0EsT0FBTzNGLE9BQVAsQ0FBZSxLQUFmLEVBQ1Asc0RBRE8sQ0FBVDtBQUtBLFdBQU8yRixNQUFQO0FBQ0Q7QUFLRDs7O0FBR0EsU0FBQUMsU0FBQSxDQUEwQi9CLE1BQTFCLEVBQTBDRCxDQUExQyxFQUEyRDtBQUN6RDtBQUVBLFFBQUlqRCxPQUFPcEIsa0JBQUF3RSxLQUFBLENBQU1rQixzQkFBTixDQUE2QnJCLENBQTdCLEVBQWdDQyxNQUFoQyxDQUFYO0FBQ0FsRCxXQUFPcEIsa0JBQUF3RSxLQUFBLENBQU04QiwwQkFBTixDQUFpQ2pDLEVBQUVrQyxJQUFGLENBQU9qQyxNQUFQLENBQWNBLE1BQWQsRUFBc0JrQyxVQUF0QixJQUFvQyxFQUFyRSxFQUF5RXBGLElBQXpFLENBQVA7QUFDQTtBQUNBLFFBQUlxRixVQUFVdkcsU0FBU3dHLHdCQUFULENBQWtDdEYsS0FBSyxDQUFMLENBQWxDLEVBQTJDa0QsTUFBM0MsRUFBbURELENBQW5ELENBQWQ7QUFDQSxRQUFJdUIsWUFBWXhCLG1CQUFtQkMsQ0FBbkIsRUFBc0JqRCxLQUFLLENBQUwsQ0FBdEIsRUFBK0JrRCxNQUEvQixDQUFoQjtBQUVBLFFBQUlxQyxjQUFjdEMsRUFBRWtDLElBQUYsQ0FBT2pDLE1BQVAsQ0FBY0EsTUFBZCxFQUFzQlosV0FBdEIsSUFBcUMsRUFBdkQ7QUFDQWlELGtCQUFjUixVQUFVUSxXQUFWLENBQWQ7QUFDQSxRQUFJekQsTUFBTSxxVUFZdUdvQixNQVp2RyxHQVk2Ryw0T0FaN0csR0F1QkdBLE1BdkJILEdBdUJTLDRCQXZCVCxHQXdCU3NCLFVBQVViLHNCQXhCbkIsR0F3QnlDLDRCQXhCekMsR0EwQkg0QixXQTFCRyxHQTBCUSxrVkExQmxCO0FBNENBLFFBQUloQixrQkFBa0IsRUFBdEI7QUFDQSxRQUFJcEIsZUFBZSxFQUFuQjtBQUNBLFFBQUlxQyxjQUFjdkMsRUFBRWtDLElBQUYsQ0FBT2pDLE1BQVAsQ0FBY0EsTUFBZCxFQUFzQmtDLFVBQXRCLElBQW9DLEVBQXREO0FBQ0FwRixTQUFLaUIsT0FBTCxDQUFhLFVBQVVaLEdBQVYsRUFBYTtBQUN4QixZQUFJZ0YsVUFBVXZHLFNBQVN3Ryx3QkFBVCxDQUFrQ2pGLEdBQWxDLEVBQXVDNkMsTUFBdkMsRUFBK0NELENBQS9DLENBQWQ7QUFDQTtBQUNBLFlBQUl1QixZQUFZeEIsbUJBQW1CQyxDQUFuQixFQUFzQjVDLEdBQXRCLEVBQTJCNkMsTUFBM0IsQ0FBaEI7QUFDQXFCLHdCQUFnQmxFLEdBQWhCLElBQXVCbUUsU0FBdkI7QUFDQXJCLHVCQUFlcEUsRUFBRTRCLEtBQUYsQ0FBUXdDLFlBQVIsRUFBc0JvQixnQkFBZ0JsRSxHQUFoQixFQUFxQm9FLFlBQTNDLENBQWY7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQSxZQUFJeEIsRUFBRWtDLElBQUYsQ0FBT2pDLE1BQVAsQ0FBY0EsTUFBZCxFQUFzQmtDLFVBQXRCLENBQWlDL0UsR0FBakMsQ0FBSixFQUEyQztBQUV6QyxnQkFBSW9GLGlCQUFpQjVHLEtBQUs2RyxjQUFMLENBQW9CTCxRQUFRTSxZQUFSLElBQXdCTixRQUFRTSxZQUFSLENBQXFCQyxRQUE3QyxJQUF5RFAsUUFBUU0sWUFBUixDQUFxQkMsUUFBOUUsSUFBMEYsRUFBOUcsS0FBcUgsUUFBMUk7QUFFQTlELG1CQUFPLHdDQUVPekIsR0FGUCxHQUVVLGlCQUZWLEdBR0VnRixRQUFRUSxjQUhWLEdBR3dCLHNCQUh4QixHQUcrQ1IsUUFBUVMsV0FIdkQsR0FHa0UsbUdBSGxFLEdBT1FMLGNBUFIsR0FPc0IseURBUHRCLEdBU1FWLFVBQVVNLFFBQVFNLFlBQVIsSUFBd0JOLFFBQVFNLFlBQVIsQ0FBcUJyRCxXQUE3QyxJQUE0RCxFQUF0RSxDQVRSLEdBU2lGLDBEQVRqRixHQVdReUMsVUFBVU0sUUFBUVUsWUFBbEIsQ0FYUixHQVd1QyxVQVg5QztBQWFEO0FBRUYsS0FuQ0Q7QUFxQ0EsUUFBSUMsWUFBWWhHLEtBQUsrQixNQUFMLEdBQWNvQyxPQUFPQyxJQUFQLENBQVluQixFQUFFa0MsSUFBRixDQUFPakMsTUFBUCxDQUFjQSxNQUFkLEVBQXNCa0MsVUFBbEMsRUFBOENyRCxNQUE1RTtBQUNBLFFBQUlrRSxzQkFBc0JsSCxFQUFFK0QsVUFBRixDQUFhOUMsSUFBYixFQUFtQm1FLE9BQU9DLElBQVAsQ0FBWW5CLEVBQUVrQyxJQUFGLENBQU9qQyxNQUFQLENBQWNBLE1BQWQsRUFBc0JrQyxVQUFsQyxDQUFuQixDQUExQjtBQUNBLFFBQUtZLFNBQUQsR0FBYyxDQUFsQixFQUFxQjtBQUNuQmxFLGVBQU8sbUJBQ0drRSxTQURILEdBQ1ksMkJBRFosR0FFSG5ILEtBQUs2RyxjQUFMLENBQW9CTyxtQkFBcEIsQ0FGRyxHQUVxQyxXQUY1QztBQUtEO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1DQTs7Ozs7Ozs7Ozs7O0FBWUFuRSxXQUFPLHdNQUFQO0FBVUEsV0FBT0EsR0FBUDtBQUNEO0FBbEtEeEMsUUFBQTJGLFNBQUEsR0FBQUEsU0FBQTtBQXNLQSxJQUFBaUIsa0JBQUF2SCxRQUFBLGVBQUEsQ0FBQTtBQUdBLFNBQUF3SCxPQUFBLENBQWlCQyxHQUFqQixFQUE0QjtBQUMxQkYsb0JBQUFHLElBQUEsQ0FBS0QsR0FBTCxFQUFVLFVBQVVFLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCQyxNQUF6QixFQUErQjtBQUN2QyxZQUFJRixLQUFKLEVBQVc7QUFDVDFELG9CQUFRMEQsS0FBUixDQUFjLGlCQUFlQSxLQUE3QjtBQUNBO0FBQ0Q7QUFDRDFELGdCQUFRQyxHQUFSLENBQVksYUFBVzBELE1BQXZCO0FBQ0EzRCxnQkFBUUMsR0FBUixDQUFZLGFBQVcyRCxNQUF2QjtBQUNELEtBUEQ7QUFRRDtBQUFBO0FBRUQsU0FBQUMsU0FBQSxDQUEwQnhELENBQTFCLEVBQTZDeUQsU0FBN0MsRUFBOEQ7QUFDNUR6RCxNQUFFMEQsT0FBRixDQUFVMUYsT0FBVixDQUFrQixVQUFVMkYsT0FBVixFQUFpQjtBQUNqQyxZQUFJeEgsSUFBSWlGLFlBQVl1QyxPQUFaLEVBQXFCM0QsQ0FBckIsQ0FBUjtBQUNBLFlBQUk0RCxVQUFVSCxZQUFZLEdBQVosR0FBa0JFLFFBQVF2SCxPQUFSLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLENBQWxCLEdBQStDLEtBQTdEO0FBQ0FYLFdBQUdxRSxhQUFILENBQWlCOEQsT0FBakIsRUFBMEJ6SCxDQUExQjtBQUNBLFlBQUkwSCxRQUFRQyxHQUFSLENBQVlDLFFBQWhCLEVBQTBCO0FBQ3hCcEUsb0JBQVFDLEdBQVIsQ0FBWSxtQkFBbUJnRSxPQUEvQjtBQUNBVixvQkFBUVcsUUFBUUMsR0FBUixDQUFZQyxRQUFaLEdBQXVCLGFBQXZCLEdBQXVDSCxPQUEvQztBQUNEO0FBQ0YsS0FSRDtBQVNEO0FBVkR2SCxRQUFBbUgsU0FBQSxHQUFBQSxTQUFBO0FBWUEsU0FBQVEsU0FBQSxDQUEwQmhFLENBQTFCLEVBQTZDeUQsU0FBN0MsRUFBOEQ7QUFDNUR6RCxNQUFFMEQsT0FBRixDQUFVMUYsT0FBVixDQUFrQixVQUFVMkYsT0FBVixFQUFpQjtBQUNqQyxZQUFJeEgsSUFBSTZGLFVBQVUyQixPQUFWLEVBQW1CM0QsQ0FBbkIsQ0FBUjtBQUNBLFlBQUk0RCxVQUFVSCxZQUFZLEdBQVosR0FBa0JFLFFBQVF2SCxPQUFSLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLENBQWxCLEdBQStDLE9BQTdEO0FBQ0FKLGlCQUFTLG1CQUFtQjRILE9BQTVCO0FBQ0FuSSxXQUFHcUUsYUFBSCxDQUFpQjhELE9BQWpCLEVBQTBCekgsQ0FBMUI7QUFDRCxLQUxEO0FBTUQ7QUFQREUsUUFBQTJILFNBQUEsR0FBQUEsU0FBQSIsImZpbGUiOiJtb2RlbC92aXNtb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdmlzdWFsaXplIGEgbW9kZWwgYW5kIGNhbGN1bGF0ZSBzb21lIHN0YXRpc3RpY3NcbiAqL1xuXG5cblxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xuXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxuaW1wb3J0IHtNb2RlbCBhcyBNb2RlbH0gIGZyb20gJ2ZkZXZzdGFfbW9ubW92ZSc7XG5cbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnYWJvdF91dGlscyc7XG5cbmltcG9ydCAqIGFzIERlc2NyaWJlIGZyb20gJy4uL21hdGNoL2Rlc2NyaWJlJztcblxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuXG4vL2ltcG9ydCAqIGFzIGVsYXN0aWNsdW5yIGZyb20gJ2VsYXN0aWNsdW5yJztcblxudmFyIGRlYnVnbG9nID0gZGVidWcoJ3Zpc21vZGVsLnRzJyk7XG5cbmludGVyZmFjZSBDYXRlZ29yeVJlY29yZCB7XG4gIG90aGVyZG9tYWluczogc3RyaW5nW10sXG4gIG5yRGlzdGluY3RWYWx1ZXM6IG51bWJlcixcbiAgbnJEaXN0aW5jdFZhbHVlc0luRG9tYWluOiBudW1iZXIsXG4gIG5yUmVjb3JkczogbnVtYmVyLFxuICBuclJlY29yZHNJbkRvbWFpbjogbnVtYmVyLFxuICBuclRvdGFsUmVjb3Jkc0luRG9tYWluOiBudW1iZXJcbn07XG5cbnZhciBlbGFzdGljbHVuciA9IHJlcXVpcmUoJ2VsYXN0aWNsdW5yJyk7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIEpTT05Fc2NhcGUoczogc3RyaW5nKSB7XG5cbiAgcmV0dXJuIHMucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpXG4gICAgLnJlcGxhY2UoL1xcJy9nLCBcIlxcXFwnXCIpXG4gICAgLnJlcGxhY2UoL1xcXCIvZywgJ1xcXFxcIicpXG4gICAgLnJlcGxhY2UoL1xcJi9nLCBcIlxcXFwmXCIpXG4gICAgLnJlcGxhY2UoL1xcci9nLCBcIlxcXFxyXCIpXG4gICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpO1xuICAvLyAucmVwbGFjZSgvXFxiL2csIFwiXFxcXGJcIilcbiAgLy8gLnJlcGxhY2UoL1xcZi9nLCBcIlxcXFxmXCIpO1xufTtcblxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUx1bnJJbmRleChtb2RlbHBhdGg6IHN0cmluZywgb3V0cHV0OiBzdHJpbmcsIHNpbGVudCA/IDogYm9vbGVhbikge1xuICB2YXIgbWRsID0gSlNPTi5wYXJzZSgnJyArIGZzLnJlYWRGaWxlU3luYyhtb2RlbHBhdGggKyAnLm1vZGVsLmpzb24nKSk7XG4gIHZhciBkYXRhID0gSlNPTi5wYXJzZSgnJyArIGZzLnJlYWRGaWxlU3luYyhtb2RlbHBhdGggKyAnLmRhdGEuanNvbicpKTtcblxuICB2YXIgY2F0cyA9IG1kbC5jYXRlZ29yeS5maWx0ZXIoYSA9PiB0eXBlb2YgYSAhPT0gJ3N0cmluZycpO1xuXG4gIHZhciBxYmVEYXRhT2JqZWN0cyA9IGNhdHMuZmlsdGVyKGNhdCA9PiAoY2F0LlFCRSB8fCBjYXQuUUJFSW5jbHVkZSkpO1xuXG4gIC8vY29uc29sZS5sb2coXCJoZXJlIGNhdHNcIiArIEpTT04uc3RyaW5naWZ5KGNhdHMpKTtcbiAgLy9jb25zb2xlLmxvZyhcIlxcbmhlcmUgZGF0YSBvYmplY3RzXCIgKyBKU09OLnN0cmluZ2lmeShxYmVEYXRhT2JqZWN0cykpO1xuICB2YXIgcWJlRGF0YU5hbWVzID0gcWJlRGF0YU9iamVjdHMubWFwKGNhdCA9PiBjYXQubmFtZSk7XG5cbiAgcWJlRGF0YU5hbWVzID0gXy51bmlvbihxYmVEYXRhTmFtZXMsIG1kbC5jb2x1bW5zKVxuXG5cbiAgdmFyIExVTlJJbmRleCA9IGNhdHMuZmlsdGVyKGNhdCA9PiBjYXQuTFVOUkluZGV4KS5tYXAoY2F0ID0+IGNhdC5uYW1lKTtcbiAgLy92YXIgZWxhc3RpY2x1bnIgPSByZXF1aXJlKCdsdW5yJyk7XG4gIHZhciBib21kYXRhID0gZGF0YTtcbiAgLy8gaW5kZXggYWxsIExVTlIgcHJvcGVydGllc1xuICB2YXIgaW5kZXggPSBlbGFzdGljbHVucihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIExVTlJJbmRleCAvKlxuICAgICAgICAgICAgW1wiYXBwSWRcIixcbiAgICAgICAgICAgIFwiQXBwS2V5XCIsXG4gICAgICAgICAgICBcIkFwcE5hbWVcIixcbiAgICAgICAgICAgICAgICBcIkFwcGxpY2F0aW9uQ29tcG9uZW50XCIsXG4gICAgICAgICAgICAgICAgXCJSb2xlTmFtZVwiLFxuICAgICAgICAgICAgICAgIFwiQXBwbGljYXRpb25UeXBlXCIsXG4gICAgICAgICAgICAgICAgXCJCU1BOYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJCU1BBcHBsaWNhdGlvblVSTFwiLFxuICAgICAgICAgICAgICAgIFwicmVsZWFzZU5hbWVcIixcbiAgICAgICAgICAgICAgICBcIkJ1c2luZXNzQ2F0YWxvZ1wiLFxuICAgICAgICAgICAgICAgIFwiVGVjaG5pY2FsQ2F0YWxvZ1wiXSAqLyAuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdGhhdC5hZGRGaWVsZChmaWVsZCk7XG4gICAgICB9KTtcbiAgICB0aGlzLnNldFJlZignaWQnKTtcbiAgICB0aGlzLnNhdmVEb2N1bWVudChmYWxzZSk7XG4gIH0pO1xuICBib21kYXRhLmZvckVhY2goZnVuY3Rpb24gKG8sIGluZGV4KSB7XG4gICAgby5pZCA9IGluZGV4O1xuICB9KTtcbiAgYm9tZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICBpbmRleC5hZGREb2MocmVjb3JkKTtcbiAgfSk7XG4gIHZhciBlbGFzdGljID0gaW5kZXg7XG5cbiAgLy8gZHVtcCB0aGUgbHVuciBpbmRleFxuICAvL1xuICB2YXIgdGhlSW5kZXggPSBpbmRleC50b0pTT04oKTtcbiAgdmFyIGNvbHVtbnMgPSBtZGwuY29sdW1ucy5tYXAoY29sbmFtZSA9PiAge1xuICAgIHZhciByZXMgPSBjYXRzLmZpbHRlcihjYXQgPT4gY2F0Lm5hbWUgPT09IGNvbG5hbWUpO1xuICAgIGlmKHJlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZGVmaW5lZCBvciBub24tb2JqZWN0IGNvbHVtbiA6IFwiICsgY29sbmFtZSApO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc1swXTtcbiAgfSk7XG5cbiAgdmFyIGNvbHVtbk5hbWVzID0gY29sdW1ucy5tYXAoY29sID0+IGNvbC5uYW1lKTtcblxuICB2YXIganNvbnAgPSBgdmFyIG1kbGRhdGEgPSB7fTtcXG4vL2NvbHVtbnMgXFxuIG1kbGRhdGEuY29sdW1ucyA9IFtcIiR7Y29sdW1ucy5tYXAoY29sID0+IGNvbC5uYW1lKS5qb2luKCdcIixcIicpfVwiXTtgO1xuXG4gIHZhciBqc29uID0gYHsgXCJjb2x1bW5zXCIgIDogW1wiJHtjb2x1bW5zLm1hcChjb2wgPT4gSlNPTkVzY2FwZShjb2wubmFtZSkpLmpvaW4oJ1wiLFwiJyl9XCJdLGA7XG4gIC8vIGpzb25wICs9IGBcXG4gbWRsZGF0YS5mdWxsZGF0YSA9ICR7SlNPTi5zdHJpbmdpZnkoYm9tZGF0YSl9O1xcbmA7XG4gIC8vanNvbnAgKz0gYFxcbi8vY29sdW1ucyBpbmZvIFxcbiBtZGxkYXRhLmx1bnJjb2x1bW5zID0gW1wieyR7TFVOUkluZGV4LmpvaW4oJ1wiLFwiJyl9XCJdO2A7XG5cbiAganNvbnAgKz0gYFxcbi8vY29sdW1ucyBpbmZvIFxcbiBtZGxkYXRhLmNvbHVtbnNEZXNjcmlwdGlvbiA9IHske2NvbHVtbnMubWFwKGNvbCA9PlxuICAgIGAgXFxuIFwiJHtjb2wubmFtZX1cIiA6ICBcIiR7SlNPTkVzY2FwZShjb2wuZGVzY3JpcHRpb24gfHwgY29sLm5hbWUpfVwiIGBcbiAgKS5qb2luKCcsJyl9XG4gICAgICB9O2A7XG5cbiAganNvbiArPSBgXCJjb2x1bW5zRGVzY3JpcHRpb25cIiA6IHske2NvbHVtbnMubWFwKGNvbCA9PlxuICAgIGAgXFxuIFwiJHtjb2wubmFtZX1cIiA6ICBcIiR7SlNPTkVzY2FwZShjb2wuZGVzY3JpcHRpb24gfHwgY29sLm5hbWUpfVwiIGBcbiAgKS5qb2luKCcsJyl9XG4gICAgICB9LGA7XG5cblxuICBqc29ucCArPSBgXFxuLy9jb2x1bW5zIGluZm8gXFxuIG1kbGRhdGEuY29sdW1uc0RlZmF1bHRXaWR0aCA9IHske2NvbHVtbnMubWFwKGNvbCA9PlxuICAgIGAgXFxuIFwiJHtjb2wubmFtZX1cIiA6ICR7Y29sLmRlZmF1bHRXaWR0aCB8fCAxNTB9IGBcbiAgKS5qb2luKCcsJyl9XG4gICAgICB9O2A7XG5cbiAganNvbiArPSBgXFxuXCJjb2x1bW5zRGVmYXVsdFdpZHRoXCIgOiB7JHtjb2x1bW5zLm1hcChjb2wgPT5cbiAgICBgIFxcbiBcIiR7Y29sLm5hbWV9XCIgOiAke2NvbC5kZWZhdWx0V2lkdGggfHwgMTUwfSBgXG4gICkuam9pbignLCcpfVxuICAgICAgfSxgO1xuXG5cblxuICB2YXIgdGhlSW5kZXhTdHIgPSBKU09OLnN0cmluZ2lmeSh0aGVJbmRleCk7XG5cbiAganNvbnAgKz0gXCJcXG52YXIgc2VySW5kZXggPVxcXCJcIiArIEpTT05Fc2NhcGUodGhlSW5kZXhTdHIpICsgXCJcXFwiO1xcblwiO1xuICAvLyBqc29ucCArPSBcIlxcbnZhciBzZXJJbmRleCA9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGVJbmRleCkgKyBcIjtcXG5cIjtcblxuXG4gIGpzb24gKz0gJ1xcblwic2VySW5kZXhcIiA6JyArIHRoZUluZGV4U3RyICsgICcsJztcblxuICAvL2NvbnNvbGUubG9nKFwiaGVyZSBhbGwgbmFtZXMgXCIgKyBKU09OLnN0cmluZ2lmeShxYmVEYXRhTmFtZXMpKTtcbiAgdmFyIGNsZWFuc2VkZGF0YSA9IGJvbWRhdGEubWFwKG8gPT4ge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBxYmVEYXRhTmFtZXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgcmVzW2tleV0gPSBvW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG5cbiAgaWYoIXNpbGVudCkge1xuICAgIGNvbnNvbGUubG9nKFwiZHVtcGluZyBcIiArIG91dHB1dCk7XG4gICAgY29uc29sZS5sb2coXCJsZW5ndGggb2YgaW5kZXggc3RyXCIgKyB0aGVJbmRleFN0ci5sZW5ndGgpXG4gICAgY29uc29sZS5sb2coXCJhdmFpbGFibGUgICAgICAgICAgXCIgKyBjb2x1bW5zLmxlbmd0aCArIFwiIGNvbHVtbnNcIik7XG4gICAgY29uc29sZS5sb2coXCJyZXR1cm5pbmcgYXMgZGF0YSAgXCIgKyBxYmVEYXRhTmFtZXMubGVuZ3RoICsgXCIgY29sdW1uc1wiKTtcbiAgICBjb25zb2xlLmxvZyhcImluZGV4aW5nICAgICAgICAgICBcIiArIExVTlJJbmRleC5sZW5ndGggKyBcIiBjb2x1bW5zXCIpO1xuICAgIGNvbnNvbGUubG9nKCdyZXR1cm5lZCBidXQgbm90IGF2YWlsYWJsZScgLCBfLmRpZmZlcmVuY2UocWJlRGF0YU5hbWVzLCBjb2x1bW5OYW1lcykuam9pbihcIiwgXCIpKTtcbiAgICBjb25zb2xlLmxvZygncmV0dXJuZWQgYnV0IG5vdCBpbmRleGVkJyAsIF8uZGlmZmVyZW5jZShxYmVEYXRhTmFtZXMsIExVTlJJbmRleCkuam9pbihcIiwgXCIpKTtcbiAgfVxuXG4gIGpzb25wICs9IFwidmFyIGRhdGE9XCIgKyBKU09OLnN0cmluZ2lmeShjbGVhbnNlZGRhdGEpICsgXCI7XCI7XG5cbiAganNvbiArPSAnXCJkYXRhXCI6JyArIEpTT04uc3RyaW5naWZ5KGNsZWFuc2VkZGF0YSkgKyBcIlxcbn1cIjtcblxuICBqc29ucCArPSBgXG5cbiAgICAgICAgICAgLy8gdmFyIGVsYXN0aWMgPSBlbGFzdGljbHVuci5JbmRleC5sb2FkKHNlckluZGV4KTtcblxuICBgO1xuXG4gIC8vZnMud3JpdGVGaWxlU3luYyhvdXRwdXQgKyBcIi5sdW5yLmpzXCIsIGpzb25wKTtcbiAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXQgKyBcIi5sdW5yLmpzb25cIiwganNvbik7XG59XG5cblxuXG5cblxuLypcblxuICB2YXIgaW5kZXggPSBlbGFzdGlsdW5yLkluZGV4LmxvYWQob2JqKTtcblxuXG59XG5cbiBcIlFCRVwiIDogZmFsc2UsXG4gICAgICBcIlFCRUluY2x1ZGVcIiA6IHRydWUsXG4gICAgICBcIkxVTlJJbmRleFwiOiBmYWxzZVxuKi9cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjQ2F0ZWdvcnlSZWNvcmQobTogSU1hdGNoLklNb2RlbHMsIGNhdGVnb3J5OiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nKTogQ2F0ZWdvcnlSZWNvcmQge1xuXG4gIHZhciBvdGhlcmRvbWFpbnMgPSBNb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkobSwgY2F0ZWdvcnkpO1xuICBfLnB1bGwob3RoZXJkb21haW5zLCBkb21haW4pO1xuICB2YXIgcmVzID0ge1xuICAgIG90aGVyZG9tYWluczogb3RoZXJkb21haW5zLFxuICAgIG5yRGlzdGluY3RWYWx1ZXM6IDAsXG4gICAgbnJEaXN0aW5jdFZhbHVlc0luRG9tYWluOiAwLFxuICAgIG5yUmVjb3JkczogMCxcbiAgICBuclJlY29yZHNJbkRvbWFpbjogMCxcbiAgICBuclRvdGFsUmVjb3Jkc0luRG9tYWluOiAwLFxuICB9IGFzIENhdGVnb3J5UmVjb3JkO1xuXG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIHZhbHVlc0luRG9tYWluID0gW107XG4gIHZhciBuclJlY29yZHNJbkRvbWFpbiA9IDA7XG4gIHZhciBkaXN0aW5jdFZhbHVlcyA9IG0ucmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICBpZiAob0VudHJ5Ll9kb21haW4gPT09IGRvbWFpbikge1xuICAgICAgcmVzLm5yVG90YWxSZWNvcmRzSW5Eb21haW4gKz0gMTtcbiAgICB9XG4gICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0pIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9FbnRyeVtjYXRlZ29yeV07XG4gICAgICBpZiAob0VudHJ5Ll9kb21haW4gPT09IGRvbWFpbikge1xuICAgICAgICB2YWx1ZXNJbkRvbWFpblt2YWx1ZV0gPSAodmFsdWVzSW5Eb21haW5bdmFsdWVdIHx8IDApICsgMTtcbiAgICAgICAgcmVzLm5yUmVjb3Jkc0luRG9tYWluICs9IDE7XG4gICAgICB9XG4gICAgICB2YWx1ZXNbdmFsdWVdID0gKHZhbHVlc1t2YWx1ZV0gfHwgMCkgKyAxO1xuICAgICAgcmVzLm5yUmVjb3JkcyArPSAxO1xuICAgIH1cbiAgfSk7XG4gIHJlcy5uckRpc3RpbmN0VmFsdWVzID0gT2JqZWN0LmtleXModmFsdWVzKS5sZW5ndGg7XG4gIHJlcy5uckRpc3RpbmN0VmFsdWVzSW5Eb21haW4gPSBPYmplY3Qua2V5cyh2YWx1ZXNJbkRvbWFpbikubGVuZ3RoO1xuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhEb21haW4oZG9tYWluOiBzdHJpbmcsIG06IElNYXRjaC5JTW9kZWxzKSB7XG4gIC8vIGRyYXcgYSBtb2RlbCBkb21haW5zXG4gIHZhciByZXMgPSBgXG4gICAgZGlncmFwaCBzZHN1IHtcblx0c2l6ZT1cIjM2LDM2XCI7XG4gICByYW5rZGlyPUxSXG5cdG5vZGUgW2NvbG9yPXllbGxvdywgc3R5bGU9ZmlsbGVkXTtcbiAgICBcIiR7ZG9tYWlufVwiXG4gIGA7XG4gIC8vIGFkZCBhbGwgY2F0ZWdvcnkgbm9kZXNcbiAgcmVzICs9IGBub2RlIFtzaGFwZT1yZWNvcmQsIGNvbG9yPXllbGxvdywgc3R5bGU9ZmlsbGVkXTtcXG4gYFxuICB2YXIgY2F0cyA9IE1vZGVsLmdldENhdGVnb3JpZXNGb3JEb21haW4obSwgZG9tYWluKTtcblxuICB2YXIgY2F0ZWdvcnlSZXN1bHRzID0ge307XG4gIHZhciBvdGhlcmRvbWFpbnMgPSBbXTtcbiAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICB2YXIgY2F0UmVzdWx0ID0gY2FsY0NhdGVnb3J5UmVjb3JkKG0sIGNhdCwgZG9tYWluKTtcbiAgICBjYXRlZ29yeVJlc3VsdHNbY2F0XSA9IGNhdFJlc3VsdDtcbiAgICBvdGhlcmRvbWFpbnMgPSBfLnVuaW9uKG90aGVyZG9tYWlucywgY2F0ZWdvcnlSZXN1bHRzW2NhdF0ub3RoZXJEb21haW5zKTtcbiAgICByZXMgKz0gYFwiJHtjYXR9XCIgW2xhYmVsPVwieyAke2NhdH0gfCAke2NhdFJlc3VsdC5uckRpc3RpbmN0VmFsdWVzSW5Eb21haW59IFZhbHVlcyBpbiAke2NhdFJlc3VsdC5uclJlY29yZHNJbkRvbWFpbn0gYDtcbiAgICBpZiAoY2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWluICE9PSBjYXRSZXN1bHQubnJSZWNvcmRzKSB7XG4gICAgICByZXMgKz0gYHwgICR7Y2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXMgLSBjYXRSZXN1bHQubnJEaXN0aW5jdFZhbHVlc0luRG9tYWlufSBvdGhlciB2YWx1ZXMgaW4gJHtjYXRSZXN1bHQubnJSZWNvcmRzIC0gY2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWlufSBvdGhlciByZWNvcmRzYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzICs9IGAgYDtcbiAgICB9XG4gICAgcmVzICs9IGB9XCJdXFxuYDtcbiAgfSk7XG5cbiAgLy8gY2FsY3VsYXRlIG90aGVyIGRvbWFpbnMuXG4gIC8vIGRyYXcgXCJvdGhlciBjYXRlZ29yaWVzXCJcbiAgcmVzICs9IGBub2RlIFtjb2xvcj1wdXJwbGUsIHN0eWxlPWZpbGxlZF07IFxcbmBcbiAgb3RoZXJkb21haW5zLmZvckVhY2goZnVuY3Rpb24gKG90aGVyZG9tYWluKSB7XG4gICAgcmVzICs9IGBcIiR7b3RoZXJkb21haW59XCIgXFxuYDtcbiAgfSk7XG4gIC8vIGNvdW50IHJlY29yZHMgaW4gZG9tYWluIDpcbiAgdmFyIG5yUmVjb3JkcyA9IG0ucmVjb3Jkcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGVudHJ5KSB7XG4gICAgcmV0dXJuIHByZXYgKyAoKGVudHJ5Ll9kb21haW4gPT09IGRvbWFpbikgPyAxIDogMCk7XG4gIH0sIDApO1xuICByZXMgKz0gYG5vZGUgW3NoYXBlPXJlY29yZF07IFxcbmBcbiAgcmVzICs9IGAgXCJyZWNvcmRcIiBbbGFiZWw9XCJ7PGYwPiAke2RvbWFpbn0gfCAke25yUmVjb3Jkc319XCJdIFxcbmA7XG5cbiAgcmVzICs9IGAgXCJyX290aGVyXCIgW2xhYmVsPVwiezxmMD4gb3RoZXIgfCAke25yUmVjb3Jkc319XCJdIFxcbiBgO1xuXG4gIHJlcyArPSBgIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gZG9tYWluXFxuYDtcbiAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICByZXMgKz0gYCBcIiR7Y2F0fVwiIC0+IFwiJHtkb21haW59XCIgXFxuYDtcbiAgfSlcblxuXG4gIHJlcyArPSBgIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gcmVjb3Jkc1xcbmA7XG4gIGNhdHMuZm9yRWFjaChmdW5jdGlvbiAoY2F0KSB7XG4gICAgdmFyIHJlYyA9IGNhdGVnb3J5UmVzdWx0c1tjYXRdO1xuICAgIHJlcyArPSBgIFwiJHtjYXR9XCIgLT4gXCJyZWNvcmRcIiBcXG5gO1xuICB9KVxuXG5cbiAgLy9vdGhlciBkb21haW5zIHRvIHRoaXNcbiAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcblxuXG4gIH0pXG5cbiAgLypcbiAgY2F0cyBmb1xuICAgIGRpZ3JhcGggc2RzdSB7XG5cdHNpemU9XCIzNiwzNlwiO1xuXHRub2RlIFtjb2xvcj15ZWxsb3csIHN0eWxlPWZpbGxlZF07XG5cdEZMUEQgRkxQIFwiQk9NIEVkaXRvclwiLCBcIldJS0lVUkxcIiBcIlVJNSBEb2N1bWVudGF0aW9uXCIsIFwiVUk1IEV4YW1wbGVcIiwgXCJTVEFSVFRBXCJcblx0QkNQXG5cdG5vZGUgW2NvbG9yPWdyZXksIHN0eWxlPWZpbGxlZF07XG5cdG5vZGUgW2ZvbnRuYW1lPVwiVmVyZGFuYVwiLCBzaXplPVwiMzAsMzBcIl07XG5cdG5vZGUgW2NvbG9yPWdyZXksIHN0eWxlPWZpbGxlZF07XG5cdGdyYXBoIFsgZm9udG5hbWUgPSBcIkFyaWFsXCIsXG4gICovXG4gIHJlcyArPSBgfVxcbmA7XG4gIHJldHVybiByZXM7XG59XG4vKlxuICAgIGNhdGVnb3J5RGVzYyA6IHRoZU1vZGVsLmZ1bGwuZG9tYWluW2ZpbHRlcmRvbWFpbl0uY2F0ZWdvcmllc1tjYXRlZ29yeV0sXG4gICAgZGlzdGluY3QgOiBkaXN0aW5jdCxcbiAgICBkZWx0YSA6IGRlbHRhLFxuICAgIHByZXNlbnRSZWNvcmRzIDogcmVjb3JkQ291bnQucHJlc2VudHJlY29yZHMsXG4gICAgcGVyY1ByZXNlbnQgOiBwZXJjZW50LFxuICAgIHNhbXBsZVZhbHVlcyA6IHZhbHVlc0xpc3RcbiAgfVxuKi9cblxuZnVuY3Rpb24gcmVwbGFjZUJyKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcbi9nLFxuICAgIGBcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdGJyXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHR8IGBcbiAgKTtcbiAgcmV0dXJuIHN0cmluZztcbn1cblxuXG5cblxuLyoqXG4gKiBnZW5lcmF0ZSBhIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgYSBkb21haW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhYkRvbWFpbihkb21haW46IHN0cmluZywgbTogSU1hdGNoLklNb2RlbHMpIHtcbiAgLy8gZHJhdyBhIG1vZGVsIGRvbWFpbnNcblxuICB2YXIgY2F0cyA9IE1vZGVsLmdldENhdGVnb3JpZXNGb3JEb21haW4obSwgZG9tYWluKTtcbiAgY2F0cyA9IE1vZGVsLnNvcnRDYXRlZ29yaWVzQnlJbXBvcnRhbmNlKG0uZnVsbC5kb21haW5bZG9tYWluXS5jYXRlZ29yaWVzIHx8IHt9LCBjYXRzKTtcbiAgLy9jb25zb2xlLmxvZyhjYXRzLmpvaW4oXCJcXG5cIikpO1xuICB2YXIgY2F0ZGVzYyA9IERlc2NyaWJlLmdldENhdGVnb3J5U3RhdHNJbkRvbWFpbihjYXRzWzBdLCBkb21haW4sIG0pO1xuICB2YXIgY2F0UmVzdWx0ID0gY2FsY0NhdGVnb3J5UmVjb3JkKG0sIGNhdHNbMF0sIGRvbWFpbik7XG5cbiAgdmFyIGRvbWFpbkRlc2NyID0gbS5mdWxsLmRvbWFpbltkb21haW5dLmRlc2NyaXB0aW9uIHx8IFwiXCI7XG4gIGRvbWFpbkRlc2NyID0gcmVwbGFjZUJyKGRvbWFpbkRlc2NyKTtcbiAgdmFyIHJlcyA9IGBcblxuLy8gcHJlc2V0IGZvcm0gdmFsdWVzIGlmIHdlIHJlY2VpdmUgYSB1c2VyZGF0YSBvYmplY3QgLy9cbi0gdXNlciA9IHVzZXJcblxuZXh0ZW5kcyAuLi9sYXlvdXRfcFxuXG5ibG9jayBjb250ZW50XG5cblx0bmF2Lm5hdmJhci5uYXZiYXItZGVmYXVsdC5uYXZiYXItZml4ZWQtdG9wXG5cdFx0LmNvbnRhaW5lclxuXHRcdFx0Lm5hdmJhci1oZWFkZXJcblx0XHRcdFx0Lm5hdmJhci1icmFuZChzdHlsZT0nYmdjb2xvcjpvcmFuZ2U7Y29sb3I6ZGFya2JsdWU7Zm9udC1mYW1pbHk6QXJpYWwgQmxhY2s7Zm9udC1zaXplOjE1LjExOHB4Jykgd29zYXAgZG9tYWluICR7ZG9tYWlufVxuXHRcdFx0dWwubmF2Lm5hdmJhci1uYXYubmF2YmFyLXJpZ2h0ICN7dWlkfVxuXHRcdFx0XHRsaVxuXHRcdFx0XHRcdC5uYXZiYXItYnRuI2J0bi1sb2dvdXQuYnRuLmJ0bi1kZWZhdWx0KG9uY2xpY2s9XCJsb2NhdGlvbi5ocmVmPScvaG9tZSdcIilcblx0XHRcdFx0XHRcdHwgYmFjayB0byBob21lXG5cblx0cCAgJm5ic3A7XG5cdHAgJm5ic3A7XG5cdHBcblxuXHRkaXYud2VsbFxuXHRcdGgzIGRvbWFpbiBcIiR7ZG9tYWlufVwiXG5cdFx0XHRzcGFuLnB1bGwtcmlnaHQgJHtjYXRSZXN1bHQubnJUb3RhbFJlY29yZHNJbkRvbWFpbn0gcmVjb3Jkc1xuXHRcdHBcblx0XHRzcGFuICR7ZG9tYWluRGVzY3J9XG5cblx0XHR0YWJsZS50YWJsZS50YWJsZS1jb25kZW5zZWQudGFibGUtc3RyaXBlZFxuXHRcdFx0dGhlYWRcblx0XHRcdFx0dHJcblx0XHRcdFx0XHR0aCBjYXRlZ29yeVxuXHRcdFx0XHRcdHRoKHN0eWxlPVwid2lkdGg6MTAlXCIpIGNvdW50XG5cdFx0XHRcdFx0dGhcblx0XHRcdFx0XHRcdHRhYmxlXG5cdFx0XHRcdFx0XHRcdHRyXG5cdFx0XHRcdFx0XHRcdFx0dGQgc3lub255bXNcblx0XHRcdFx0XHRcdFx0dHJcblx0XHRcdFx0XHRcdFx0XHR0ZCBkZXNjcmlwdGlvblxuXHRcdFx0XHRcdFx0XHR0clxuXHRcdFx0XHRcdFx0XHRcdHRkIGV4YW1wbGUgdmFsdWVzXG5cdFx0XHR0Ym9keVxuYDtcblxuICB2YXIgY2F0ZWdvcnlSZXN1bHRzID0ge307XG4gIHZhciBvdGhlcmRvbWFpbnMgPSBbXTtcbiAgdmFyIGNhdGVnb3J5TWFwID0gbS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXMgfHwge307XG4gIGNhdHMuZm9yRWFjaChmdW5jdGlvbiAoY2F0KSB7XG4gICAgdmFyIGNhdGRlc2MgPSBEZXNjcmliZS5nZXRDYXRlZ29yeVN0YXRzSW5Eb21haW4oY2F0LCBkb21haW4sIG0pO1xuICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoY2F0ZGVzYykpO1xuICAgIHZhciBjYXRSZXN1bHQgPSBjYWxjQ2F0ZWdvcnlSZWNvcmQobSwgY2F0LCBkb21haW4pO1xuICAgIGNhdGVnb3J5UmVzdWx0c1tjYXRdID0gY2F0UmVzdWx0O1xuICAgIG90aGVyZG9tYWlucyA9IF8udW5pb24ob3RoZXJkb21haW5zLCBjYXRlZ29yeVJlc3VsdHNbY2F0XS5vdGhlckRvbWFpbnMpO1xuICAgIC8qXG4gICAgICAgIHJlcyArPSBgXCIke2NhdH1cIiBbbGFiZWw9XCJ7ICR7Y2F0fSB8ICR7Y2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbn0gVmFsdWVzIGluICR7Y2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWlufSBgO1xuICAgICAgICBpZihjYXRSZXN1bHQubnJSZWNvcmRzSW5Eb21haW4gIT09IGNhdFJlc3VsdC5uclJlY29yZHMpIHtcbiAgICAgICAgICByZXMgKz0gIGB8ICAke2NhdFJlc3VsdC5uckRpc3RpbmN0VmFsdWVzIC0gY2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbn0gb3RoZXIgdmFsdWVzIGluICR7Y2F0UmVzdWx0Lm5yUmVjb3JkcyAtIGNhdFJlc3VsdC5uclJlY29yZHNJbkRvbWFpbn0gb3RoZXIgcmVjb3Jkc2A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzICs9IGAgYDtcbiAgICAgICAgfVxuICAgICAgICByZXMgKz0gYH1cIl1cXG5gO1xuICAgICovXG4gICAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShtLmZ1bGwuZG9tYWluW2RvbWFpbl0pKTtcbiAgICBpZiAobS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXNbY2F0XSkge1xuXG4gICAgICB2YXIgc3lub255bXNTdHJpbmcgPSBVdGlsLmxpc3RUb0NvbW1hQW5kKGNhdGRlc2MuY2F0ZWdvcnlEZXNjICYmIGNhdGRlc2MuY2F0ZWdvcnlEZXNjLnN5bm9ueW1zICYmIGNhdGRlc2MuY2F0ZWdvcnlEZXNjLnN5bm9ueW1zIHx8IFtdKSB8fCBcIiZuYnNwO1wiO1xuXG4gICAgICByZXMgKz0gYFxuXHRcdFx0dHJcblx0XHRcdFx0XHR0ZC5jYXRfY291bnQgJHtjYXR9XG5cXHRcXHRcXHRcXHRcXHR0ZCAke2NhdGRlc2MucHJlc2VudFJlY29yZHN9IGRpc3RpbmN0IHZhbHVlcyBpbiAke2NhdGRlc2MucGVyY1ByZXNlbnR9JSBvZiByZWNvcmRzXG5cXHRcXHRcXHRcXHRcXHR0ZFxuXFx0XFx0XFx0XFx0XFx0XFx0dGFibGVcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRyLmNhdF9zeW5vbnltc1xuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGQgJHtzeW5vbnltc1N0cmluZ31cblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRyLmNhdF9kZXNjcmlwdGlvblxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGQgJHtyZXBsYWNlQnIoY2F0ZGVzYy5jYXRlZ29yeURlc2MgJiYgY2F0ZGVzYy5jYXRlZ29yeURlc2MuZGVzY3JpcHRpb24gfHwgXCJcIil9XG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR0ci5jYXRfc2FtcGxldmFsdWVzXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHR0ZCAke3JlcGxhY2VCcihjYXRkZXNjLnNhbXBsZVZhbHVlcyl9XG4gICAgICBgO1xuICAgIH1cblxuICB9KTtcblxuICB2YXIgb3RoZXJjYXRzID0gY2F0cy5sZW5ndGggLSBPYmplY3Qua2V5cyhtLmZ1bGwuZG9tYWluW2RvbWFpbl0uY2F0ZWdvcmllcykubGVuZ3RoO1xuICB2YXIgcmVtYWluaW5nQ2F0ZWdvcmllcyA9IF8uZGlmZmVyZW5jZShjYXRzLCBPYmplY3Qua2V5cyhtLmZ1bGwuZG9tYWluW2RvbWFpbl0uY2F0ZWdvcmllcykpO1xuICBpZiAoKG90aGVyY2F0cykgPiAwKSB7XG4gICAgcmVzICs9IGBcblxcdFxcdHAgICBhbmQgJHtvdGhlcmNhdHN9IG90aGVyIGNhdGVnb3JpZXNcblxcdFxcdHwgJHtVdGlsLmxpc3RUb0NvbW1hQW5kKHJlbWFpbmluZ0NhdGVnb3JpZXMpfVxuICAgICAgIGBcblxuICB9XG4gIC8qXG4gICAgLy8gY2FsY3VsYXRlIG90aGVyIGRvbWFpbnMuXG4gICAgLy8gZHJhdyBcIm90aGVyIGNhdGVnb3JpZXNcIlxuICAgIHJlcyArPSBgbm9kZSBbY29sb3I9cHVycGxlLCBzdHlsZT1maWxsZWRdOyBcXG5gXG4gICAgb3RoZXJkb21haW5zLmZvckVhY2goZnVuY3Rpb24ob3RoZXJkb21haW4pIHtcbiAgICAgIHJlcyArPSBgXCIke290aGVyZG9tYWlufVwiIFxcbmA7XG4gICAgfSk7XG4gICAgLy8gY291bnQgcmVjb3JkcyBpbiBkb21haW4gOlxuICAgIHZhciBuclJlY29yZHMgPSBtLnJlY29yZHMucmVkdWNlKGZ1bmN0aW9uKHByZXYsZW50cnkpIHtcbiAgICByZXR1cm4gcHJldiArICgoZW50cnkuX2RvbWFpbiA9PT0gZG9tYWluKSA/IDEgOiAwKTtcbiAgICB9LDApO1xuICAgIHJlcyArPSBgbm9kZSBbc2hhcGU9cmVjb3JkXTsgXFxuYFxuICAgIHJlcyArPSBgIFwicmVjb3JkXCIgW2xhYmVsPVwiezxmMD4gJHtkb21haW59IHwgJHtuclJlY29yZHN9fVwiXSBcXG5gO1xuXG4gICAgcmVzICs9IGAgXCJyX290aGVyXCIgW2xhYmVsPVwiezxmMD4gb3RoZXIgfCAke25yUmVjb3Jkc319XCJdIFxcbiBgO1xuXG4gICAgcmVzICs9IGAjIHJlbGF0aW9uIGZyb20gY2F0ZWdvcmllcyB0byBkb21haW5cXG5gO1xuICAgIGNhdHMuZm9yRWFjaChmdW5jdGlvbihjYXQpIHtcbiAgICAgIHJlcyArPSBgIFwiJHtjYXR9XCIgLT4gXCIke2RvbWFpbn1cIiBcXG5gO1xuICAgIH0pXG5cblxuICAgIHJlcyArPSBgIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gcmVjb3Jkc1xcbmA7XG4gICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uKGNhdCkge1xuICAgICAgdmFyIHJlYyA9IGNhdGVnb3J5UmVzdWx0c1tjYXRdO1xuICAgICAgcmVzICs9IGAgXCIke2NhdH1cIiAtPiBcInJlY29yZFwiIFxcbmA7XG4gICAgfSlcblxuXG4gICAgLy9vdGhlciBkb21haW5zIHRvIHRoaXNcbiAgICBjYXRzLmZvckVhY2goZnVuY3Rpb24oY2F0KSB7XG5cblxuICAgIH0pXG4gICovXG4gIC8qXG4gIGNhdHMgZm9cbiAgICBkaWdyYXBoIHNkc3Uge1xuXHRzaXplPVwiMzYsMzZcIjtcblx0bm9kZSBbY29sb3I9eWVsbG93LCBzdHlsZT1maWxsZWRdO1xuXHRGTFBEIEZMUCBcIkJPTSBFZGl0b3JcIiwgXCJXSUtJVVJMXCIgXCJVSTUgRG9jdW1lbnRhdGlvblwiLCBcIlVJNSBFeGFtcGxlXCIsIFwiU1RBUlRUQVwiXG5cdEJDUFxuXHRub2RlIFtjb2xvcj1ncmV5LCBzdHlsZT1maWxsZWRdO1xuXHRub2RlIFtmb250bmFtZT1cIlZlcmRhbmFcIiwgc2l6ZT1cIjMwLDMwXCJdO1xuXHRub2RlIFtjb2xvcj1ncmV5LCBzdHlsZT1maWxsZWRdO1xuXHRncmFwaCBbIGZvbnRuYW1lID0gXCJBcmlhbFwiLFxuICAqL1xuICByZXMgKz0gYFxuXHRcdGgzIFZlcnNpb25cblx0XHRcdGEuc21hbGwoaHJlZj1cIi93aGF0c25ld1wiKVxuXG5cbmJsb2NrIHNjcmlwdHNcblx0c2NyaXB0KHNyYz0nL3ZlbmRvci9qcXVlcnktMi4yLjMubWluLmpzJylcblx0c2NyaXB0KHNyYz0nL3ZlbmRvci9ib290c3RyYXAubWluLmpzJylcblx0c2NyaXB0KHNyYz0nL2pzL3ZpZXdzL3NldHRpbmdzLmpzJylcbmA7XG4gIHJldHVybiByZXM7XG59XG5cblxuXG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cblxuZnVuY3Rpb24gZXhlY0NtZChjbWQ6IHN0cmluZykge1xuICBleGVjKGNtZCwgZnVuY3Rpb24gKGVycm9yLCBzdGRvdXQsIHN0ZGVycikge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgZXhlYyBlcnJvcjogJHtlcnJvcn1gKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBzdGRvdXQ6ICR7c3Rkb3V0fWApXG4gICAgY29uc29sZS5sb2coYHN0ZGVycjogJHtzdGRlcnJ9YClcbiAgfSlcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNNb2RlbHMobTogSU1hdGNoLklNb2RlbHMsIGZvbGRlck91dDogc3RyaW5nKSB7XG4gIG0uZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uIChzRG9tYWluKSB7XG4gICAgdmFyIHMgPSBncmFwaERvbWFpbihzRG9tYWluLCBtKTtcbiAgICB2YXIgZm5HcmFwaCA9IGZvbGRlck91dCArIFwiL1wiICsgc0RvbWFpbi5yZXBsYWNlKC8gL2csICdfJykgKyBcIi5ndlwiO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoZm5HcmFwaCwgcyk7XG4gICAgaWYgKHByb2Nlc3MuZW52LkdSQVBIVklaKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImhlcmUgdGhlIGZpbGUgXCIgKyBmbkdyYXBoKTtcbiAgICAgIGV4ZWNDbWQocHJvY2Vzcy5lbnYuR1JBUEhWSVogKyBcIiAtVGpwZWcgLU8gXCIgKyBmbkdyYXBoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFiTW9kZWxzKG06IElNYXRjaC5JTW9kZWxzLCBmb2xkZXJPdXQ6IHN0cmluZykge1xuICBtLmRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbiAoc0RvbWFpbikge1xuICAgIHZhciBzID0gdGFiRG9tYWluKHNEb21haW4sIG0pO1xuICAgIHZhciBmbkdyYXBoID0gZm9sZGVyT3V0ICsgXCIvXCIgKyBzRG9tYWluLnJlcGxhY2UoLyAvZywgJ18nKSArIFwiLmphZGVcIjtcbiAgICBkZWJ1Z2xvZyhcImhlcmUgdGhlIGZpbGUgXCIgKyBmbkdyYXBoKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZuR3JhcGgsIHMpO1xuICB9KTtcbn1cbiIsIi8qKlxuICogdmlzdWFsaXplIGEgbW9kZWwgYW5kIGNhbGN1bGF0ZSBzb21lIHN0YXRpc3RpY3NcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZnMgPSByZXF1aXJlKFwiZnNcIik7XG52YXIgZmRldnN0YV9tb25tb3ZlXzEgPSByZXF1aXJlKFwiZmRldnN0YV9tb25tb3ZlXCIpO1xudmFyIFV0aWwgPSByZXF1aXJlKFwiYWJvdF91dGlsc1wiKTtcbnZhciBEZXNjcmliZSA9IHJlcXVpcmUoXCIuLi9tYXRjaC9kZXNjcmliZVwiKTtcbnZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbi8vaW1wb3J0ICogYXMgZWxhc3RpY2x1bnIgZnJvbSAnZWxhc3RpY2x1bnInO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ3Zpc21vZGVsLnRzJyk7XG47XG52YXIgZWxhc3RpY2x1bnIgPSByZXF1aXJlKCdlbGFzdGljbHVucicpO1xuZnVuY3Rpb24gSlNPTkVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXCcvZywgXCJcXFxcJ1wiKVxuICAgICAgICAucmVwbGFjZSgvXFxcIi9nLCAnXFxcXFwiJylcbiAgICAgICAgLnJlcGxhY2UoL1xcJi9nLCBcIlxcXFwmXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXHIvZywgXCJcXFxcclwiKVxuICAgICAgICAucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIik7XG4gICAgLy8gLnJlcGxhY2UoL1xcYi9nLCBcIlxcXFxiXCIpXG4gICAgLy8gLnJlcGxhY2UoL1xcZi9nLCBcIlxcXFxmXCIpO1xufVxuZXhwb3J0cy5KU09ORXNjYXBlID0gSlNPTkVzY2FwZTtcbjtcbmZ1bmN0aW9uIG1ha2VMdW5ySW5kZXgobW9kZWxwYXRoLCBvdXRwdXQsIHNpbGVudCkge1xuICAgIHZhciBtZGwgPSBKU09OLnBhcnNlKCcnICsgZnMucmVhZEZpbGVTeW5jKG1vZGVscGF0aCArICcubW9kZWwuanNvbicpKTtcbiAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoJycgKyBmcy5yZWFkRmlsZVN5bmMobW9kZWxwYXRoICsgJy5kYXRhLmpzb24nKSk7XG4gICAgdmFyIGNhdHMgPSBtZGwuY2F0ZWdvcnkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiB0eXBlb2YgYSAhPT0gJ3N0cmluZyc7IH0pO1xuICAgIHZhciBxYmVEYXRhT2JqZWN0cyA9IGNhdHMuZmlsdGVyKGZ1bmN0aW9uIChjYXQpIHsgcmV0dXJuIChjYXQuUUJFIHx8IGNhdC5RQkVJbmNsdWRlKTsgfSk7XG4gICAgLy9jb25zb2xlLmxvZyhcImhlcmUgY2F0c1wiICsgSlNPTi5zdHJpbmdpZnkoY2F0cykpO1xuICAgIC8vY29uc29sZS5sb2coXCJcXG5oZXJlIGRhdGEgb2JqZWN0c1wiICsgSlNPTi5zdHJpbmdpZnkocWJlRGF0YU9iamVjdHMpKTtcbiAgICB2YXIgcWJlRGF0YU5hbWVzID0gcWJlRGF0YU9iamVjdHMubWFwKGZ1bmN0aW9uIChjYXQpIHsgcmV0dXJuIGNhdC5uYW1lOyB9KTtcbiAgICBxYmVEYXRhTmFtZXMgPSBfLnVuaW9uKHFiZURhdGFOYW1lcywgbWRsLmNvbHVtbnMpO1xuICAgIHZhciBMVU5SSW5kZXggPSBjYXRzLmZpbHRlcihmdW5jdGlvbiAoY2F0KSB7IHJldHVybiBjYXQuTFVOUkluZGV4OyB9KS5tYXAoZnVuY3Rpb24gKGNhdCkgeyByZXR1cm4gY2F0Lm5hbWU7IH0pO1xuICAgIC8vdmFyIGVsYXN0aWNsdW5yID0gcmVxdWlyZSgnbHVucicpO1xuICAgIHZhciBib21kYXRhID0gZGF0YTtcbiAgICAvLyBpbmRleCBhbGwgTFVOUiBwcm9wZXJ0aWVzXG4gICAgdmFyIGluZGV4ID0gZWxhc3RpY2x1bnIoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIExVTlJJbmRleCAvKlxuICAgICAgICAgICAgICAgIFtcImFwcElkXCIsXG4gICAgICAgICAgICAgICAgXCJBcHBLZXlcIixcbiAgICAgICAgICAgICAgICBcIkFwcE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJBcHBsaWNhdGlvbkNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICAgICAgICBcIlJvbGVOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQXBwbGljYXRpb25UeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQlNQTmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIkJTUEFwcGxpY2F0aW9uVVJMXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVsZWFzZU5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJCdXNpbmVzc0NhdGFsb2dcIixcbiAgICAgICAgICAgICAgICAgICAgXCJUZWNobmljYWxDYXRhbG9nXCJdICovXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgIHRoYXQuYWRkRmllbGQoZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRSZWYoJ2lkJyk7XG4gICAgICAgIHRoaXMuc2F2ZURvY3VtZW50KGZhbHNlKTtcbiAgICB9KTtcbiAgICBib21kYXRhLmZvckVhY2goZnVuY3Rpb24gKG8sIGluZGV4KSB7XG4gICAgICAgIG8uaWQgPSBpbmRleDtcbiAgICB9KTtcbiAgICBib21kYXRhLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICBpbmRleC5hZGREb2MocmVjb3JkKTtcbiAgICB9KTtcbiAgICB2YXIgZWxhc3RpYyA9IGluZGV4O1xuICAgIC8vIGR1bXAgdGhlIGx1bnIgaW5kZXhcbiAgICAvL1xuICAgIHZhciB0aGVJbmRleCA9IGluZGV4LnRvSlNPTigpO1xuICAgIHZhciBjb2x1bW5zID0gbWRsLmNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2xuYW1lKSB7XG4gICAgICAgIHZhciByZXMgPSBjYXRzLmZpbHRlcihmdW5jdGlvbiAoY2F0KSB7IHJldHVybiBjYXQubmFtZSA9PT0gY29sbmFtZTsgfSk7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmRlZmluZWQgb3Igbm9uLW9iamVjdCBjb2x1bW4gOiBcIiArIGNvbG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHJlc1swXTtcbiAgICB9KTtcbiAgICB2YXIgY29sdW1uTmFtZXMgPSBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sKSB7IHJldHVybiBjb2wubmFtZTsgfSk7XG4gICAgdmFyIGpzb25wID0gXCJ2YXIgbWRsZGF0YSA9IHt9O1xcbi8vY29sdW1ucyBcXG4gbWRsZGF0YS5jb2x1bW5zID0gW1xcXCJcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2wpIHsgcmV0dXJuIGNvbC5uYW1lOyB9KS5qb2luKCdcIixcIicpICsgXCJcXFwiXTtcIjtcbiAgICB2YXIganNvbiA9IFwieyBcXFwiY29sdW1uc1xcXCIgIDogW1xcXCJcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2wpIHsgcmV0dXJuIEpTT05Fc2NhcGUoY29sLm5hbWUpOyB9KS5qb2luKCdcIixcIicpICsgXCJcXFwiXSxcIjtcbiAgICAvLyBqc29ucCArPSBgXFxuIG1kbGRhdGEuZnVsbGRhdGEgPSAke0pTT04uc3RyaW5naWZ5KGJvbWRhdGEpfTtcXG5gO1xuICAgIC8vanNvbnAgKz0gYFxcbi8vY29sdW1ucyBpbmZvIFxcbiBtZGxkYXRhLmx1bnJjb2x1bW5zID0gW1wieyR7TFVOUkluZGV4LmpvaW4oJ1wiLFwiJyl9XCJdO2A7XG4gICAganNvbnAgKz0gXCJcXG4vL2NvbHVtbnMgaW5mbyBcXG4gbWRsZGF0YS5jb2x1bW5zRGVzY3JpcHRpb24gPSB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgIHJldHVybiBcIiBcXG4gXFxcIlwiICsgY29sLm5hbWUgKyBcIlxcXCIgOiAgXFxcIlwiICsgSlNPTkVzY2FwZShjb2wuZGVzY3JpcHRpb24gfHwgY29sLm5hbWUpICsgXCJcXFwiIFwiO1xuICAgIH0pLmpvaW4oJywnKSArIFwiXFxuICAgICAgfTtcIjtcbiAgICBqc29uICs9IFwiXFxcImNvbHVtbnNEZXNjcmlwdGlvblxcXCIgOiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgIHJldHVybiBcIiBcXG4gXFxcIlwiICsgY29sLm5hbWUgKyBcIlxcXCIgOiAgXFxcIlwiICsgSlNPTkVzY2FwZShjb2wuZGVzY3JpcHRpb24gfHwgY29sLm5hbWUpICsgXCJcXFwiIFwiO1xuICAgIH0pLmpvaW4oJywnKSArIFwiXFxuICAgICAgfSxcIjtcbiAgICBqc29ucCArPSBcIlxcbi8vY29sdW1ucyBpbmZvIFxcbiBtZGxkYXRhLmNvbHVtbnNEZWZhdWx0V2lkdGggPSB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgIHJldHVybiBcIiBcXG4gXFxcIlwiICsgY29sLm5hbWUgKyBcIlxcXCIgOiBcIiArIChjb2wuZGVmYXVsdFdpZHRoIHx8IDE1MCkgKyBcIiBcIjtcbiAgICB9KS5qb2luKCcsJykgKyBcIlxcbiAgICAgIH07XCI7XG4gICAganNvbiArPSBcIlxcblxcXCJjb2x1bW5zRGVmYXVsdFdpZHRoXFxcIiA6IHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2wpIHtcbiAgICAgICAgcmV0dXJuIFwiIFxcbiBcXFwiXCIgKyBjb2wubmFtZSArIFwiXFxcIiA6IFwiICsgKGNvbC5kZWZhdWx0V2lkdGggfHwgMTUwKSArIFwiIFwiO1xuICAgIH0pLmpvaW4oJywnKSArIFwiXFxuICAgICAgfSxcIjtcbiAgICB2YXIgdGhlSW5kZXhTdHIgPSBKU09OLnN0cmluZ2lmeSh0aGVJbmRleCk7XG4gICAganNvbnAgKz0gXCJcXG52YXIgc2VySW5kZXggPVxcXCJcIiArIEpTT05Fc2NhcGUodGhlSW5kZXhTdHIpICsgXCJcXFwiO1xcblwiO1xuICAgIC8vIGpzb25wICs9IFwiXFxudmFyIHNlckluZGV4ID1cIiArIEpTT04uc3RyaW5naWZ5KHRoZUluZGV4KSArIFwiO1xcblwiO1xuICAgIGpzb24gKz0gJ1xcblwic2VySW5kZXhcIiA6JyArIHRoZUluZGV4U3RyICsgJywnO1xuICAgIC8vY29uc29sZS5sb2coXCJoZXJlIGFsbCBuYW1lcyBcIiArIEpTT04uc3RyaW5naWZ5KHFiZURhdGFOYW1lcykpO1xuICAgIHZhciBjbGVhbnNlZGRhdGEgPSBib21kYXRhLm1hcChmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgcmVzID0ge307XG4gICAgICAgIHFiZURhdGFOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJlc1trZXldID0gb1trZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImR1bXBpbmcgXCIgKyBvdXRwdXQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImxlbmd0aCBvZiBpbmRleCBzdHJcIiArIHRoZUluZGV4U3RyLmxlbmd0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYXZhaWxhYmxlICAgICAgICAgIFwiICsgY29sdW1ucy5sZW5ndGggKyBcIiBjb2x1bW5zXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInJldHVybmluZyBhcyBkYXRhICBcIiArIHFiZURhdGFOYW1lcy5sZW5ndGggKyBcIiBjb2x1bW5zXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImluZGV4aW5nICAgICAgICAgICBcIiArIExVTlJJbmRleC5sZW5ndGggKyBcIiBjb2x1bW5zXCIpO1xuICAgICAgICBjb25zb2xlLmxvZygncmV0dXJuZWQgYnV0IG5vdCBhdmFpbGFibGUnLCBfLmRpZmZlcmVuY2UocWJlRGF0YU5hbWVzLCBjb2x1bW5OYW1lcykuam9pbihcIiwgXCIpKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3JldHVybmVkIGJ1dCBub3QgaW5kZXhlZCcsIF8uZGlmZmVyZW5jZShxYmVEYXRhTmFtZXMsIExVTlJJbmRleCkuam9pbihcIiwgXCIpKTtcbiAgICB9XG4gICAganNvbnAgKz0gXCJ2YXIgZGF0YT1cIiArIEpTT04uc3RyaW5naWZ5KGNsZWFuc2VkZGF0YSkgKyBcIjtcIjtcbiAgICBqc29uICs9ICdcImRhdGFcIjonICsgSlNPTi5zdHJpbmdpZnkoY2xlYW5zZWRkYXRhKSArIFwiXFxufVwiO1xuICAgIGpzb25wICs9IFwiXFxuXFxuICAgICAgICAgICAvLyB2YXIgZWxhc3RpYyA9IGVsYXN0aWNsdW5yLkluZGV4LmxvYWQoc2VySW5kZXgpO1xcblxcbiAgXCI7XG4gICAgLy9mcy53cml0ZUZpbGVTeW5jKG91dHB1dCArIFwiLmx1bnIuanNcIiwganNvbnApO1xuICAgIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0ICsgXCIubHVuci5qc29uXCIsIGpzb24pO1xufVxuZXhwb3J0cy5tYWtlTHVuckluZGV4ID0gbWFrZUx1bnJJbmRleDtcbi8qXG5cbiAgdmFyIGluZGV4ID0gZWxhc3RpbHVuci5JbmRleC5sb2FkKG9iaik7XG5cblxufVxuXG4gXCJRQkVcIiA6IGZhbHNlLFxuICAgICAgXCJRQkVJbmNsdWRlXCIgOiB0cnVlLFxuICAgICAgXCJMVU5SSW5kZXhcIjogZmFsc2VcbiovXG5mdW5jdGlvbiBjYWxjQ2F0ZWdvcnlSZWNvcmQobSwgY2F0ZWdvcnksIGRvbWFpbikge1xuICAgIHZhciBvdGhlcmRvbWFpbnMgPSBmZGV2c3RhX21vbm1vdmVfMS5Nb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkobSwgY2F0ZWdvcnkpO1xuICAgIF8ucHVsbChvdGhlcmRvbWFpbnMsIGRvbWFpbik7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgb3RoZXJkb21haW5zOiBvdGhlcmRvbWFpbnMsXG4gICAgICAgIG5yRGlzdGluY3RWYWx1ZXM6IDAsXG4gICAgICAgIG5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbjogMCxcbiAgICAgICAgbnJSZWNvcmRzOiAwLFxuICAgICAgICBuclJlY29yZHNJbkRvbWFpbjogMCxcbiAgICAgICAgbnJUb3RhbFJlY29yZHNJbkRvbWFpbjogMCxcbiAgICB9O1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgdmFsdWVzSW5Eb21haW4gPSBbXTtcbiAgICB2YXIgbnJSZWNvcmRzSW5Eb21haW4gPSAwO1xuICAgIHZhciBkaXN0aW5jdFZhbHVlcyA9IG0ucmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChvRW50cnkpIHtcbiAgICAgICAgaWYgKG9FbnRyeS5fZG9tYWluID09PSBkb21haW4pIHtcbiAgICAgICAgICAgIHJlcy5uclRvdGFsUmVjb3Jkc0luRG9tYWluICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9FbnRyeVtjYXRlZ29yeV0pIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9FbnRyeVtjYXRlZ29yeV07XG4gICAgICAgICAgICBpZiAob0VudHJ5Ll9kb21haW4gPT09IGRvbWFpbikge1xuICAgICAgICAgICAgICAgIHZhbHVlc0luRG9tYWluW3ZhbHVlXSA9ICh2YWx1ZXNJbkRvbWFpblt2YWx1ZV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgICAgIHJlcy5uclJlY29yZHNJbkRvbWFpbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlXSA9ICh2YWx1ZXNbdmFsdWVdIHx8IDApICsgMTtcbiAgICAgICAgICAgIHJlcy5uclJlY29yZHMgKz0gMTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJlcy5uckRpc3RpbmN0VmFsdWVzID0gT2JqZWN0LmtleXModmFsdWVzKS5sZW5ndGg7XG4gICAgcmVzLm5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbiA9IE9iamVjdC5rZXlzKHZhbHVlc0luRG9tYWluKS5sZW5ndGg7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuY2FsY0NhdGVnb3J5UmVjb3JkID0gY2FsY0NhdGVnb3J5UmVjb3JkO1xuZnVuY3Rpb24gZ3JhcGhEb21haW4oZG9tYWluLCBtKSB7XG4gICAgLy8gZHJhdyBhIG1vZGVsIGRvbWFpbnNcbiAgICB2YXIgcmVzID0gXCJcXG4gICAgZGlncmFwaCBzZHN1IHtcXG5cXHRzaXplPVxcXCIzNiwzNlxcXCI7XFxuICAgcmFua2Rpcj1MUlxcblxcdG5vZGUgW2NvbG9yPXllbGxvdywgc3R5bGU9ZmlsbGVkXTtcXG4gICAgXFxcIlwiICsgZG9tYWluICsgXCJcXFwiXFxuICBcIjtcbiAgICAvLyBhZGQgYWxsIGNhdGVnb3J5IG5vZGVzXG4gICAgcmVzICs9IFwibm9kZSBbc2hhcGU9cmVjb3JkLCBjb2xvcj15ZWxsb3csIHN0eWxlPWZpbGxlZF07XFxuIFwiO1xuICAgIHZhciBjYXRzID0gZmRldnN0YV9tb25tb3ZlXzEuTW9kZWwuZ2V0Q2F0ZWdvcmllc0ZvckRvbWFpbihtLCBkb21haW4pO1xuICAgIHZhciBjYXRlZ29yeVJlc3VsdHMgPSB7fTtcbiAgICB2YXIgb3RoZXJkb21haW5zID0gW107XG4gICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgdmFyIGNhdFJlc3VsdCA9IGNhbGNDYXRlZ29yeVJlY29yZChtLCBjYXQsIGRvbWFpbik7XG4gICAgICAgIGNhdGVnb3J5UmVzdWx0c1tjYXRdID0gY2F0UmVzdWx0O1xuICAgICAgICBvdGhlcmRvbWFpbnMgPSBfLnVuaW9uKG90aGVyZG9tYWlucywgY2F0ZWdvcnlSZXN1bHRzW2NhdF0ub3RoZXJEb21haW5zKTtcbiAgICAgICAgcmVzICs9IFwiXFxcIlwiICsgY2F0ICsgXCJcXFwiIFtsYWJlbD1cXFwieyBcIiArIGNhdCArIFwiIHwgXCIgKyBjYXRSZXN1bHQubnJEaXN0aW5jdFZhbHVlc0luRG9tYWluICsgXCIgVmFsdWVzIGluIFwiICsgY2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWluICsgXCIgXCI7XG4gICAgICAgIGlmIChjYXRSZXN1bHQubnJSZWNvcmRzSW5Eb21haW4gIT09IGNhdFJlc3VsdC5uclJlY29yZHMpIHtcbiAgICAgICAgICAgIHJlcyArPSBcInwgIFwiICsgKGNhdFJlc3VsdC5uckRpc3RpbmN0VmFsdWVzIC0gY2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbikgKyBcIiBvdGhlciB2YWx1ZXMgaW4gXCIgKyAoY2F0UmVzdWx0Lm5yUmVjb3JkcyAtIGNhdFJlc3VsdC5uclJlY29yZHNJbkRvbWFpbikgKyBcIiBvdGhlciByZWNvcmRzXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gXCIgXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzICs9IFwifVxcXCJdXFxuXCI7XG4gICAgfSk7XG4gICAgLy8gY2FsY3VsYXRlIG90aGVyIGRvbWFpbnMuXG4gICAgLy8gZHJhdyBcIm90aGVyIGNhdGVnb3JpZXNcIlxuICAgIHJlcyArPSBcIm5vZGUgW2NvbG9yPXB1cnBsZSwgc3R5bGU9ZmlsbGVkXTsgXFxuXCI7XG4gICAgb3RoZXJkb21haW5zLmZvckVhY2goZnVuY3Rpb24gKG90aGVyZG9tYWluKSB7XG4gICAgICAgIHJlcyArPSBcIlxcXCJcIiArIG90aGVyZG9tYWluICsgXCJcXFwiIFxcblwiO1xuICAgIH0pO1xuICAgIC8vIGNvdW50IHJlY29yZHMgaW4gZG9tYWluIDpcbiAgICB2YXIgbnJSZWNvcmRzID0gbS5yZWNvcmRzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgKyAoKGVudHJ5Ll9kb21haW4gPT09IGRvbWFpbikgPyAxIDogMCk7XG4gICAgfSwgMCk7XG4gICAgcmVzICs9IFwibm9kZSBbc2hhcGU9cmVjb3JkXTsgXFxuXCI7XG4gICAgcmVzICs9IFwiIFxcXCJyZWNvcmRcXFwiIFtsYWJlbD1cXFwiezxmMD4gXCIgKyBkb21haW4gKyBcIiB8IFwiICsgbnJSZWNvcmRzICsgXCJ9XFxcIl0gXFxuXCI7XG4gICAgcmVzICs9IFwiIFxcXCJyX290aGVyXFxcIiBbbGFiZWw9XFxcIns8ZjA+IG90aGVyIHwgXCIgKyBuclJlY29yZHMgKyBcIn1cXFwiXSBcXG4gXCI7XG4gICAgcmVzICs9IFwiIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gZG9tYWluXFxuXCI7XG4gICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgcmVzICs9IFwiIFxcXCJcIiArIGNhdCArIFwiXFxcIiAtPiBcXFwiXCIgKyBkb21haW4gKyBcIlxcXCIgXFxuXCI7XG4gICAgfSk7XG4gICAgcmVzICs9IFwiIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gcmVjb3Jkc1xcblwiO1xuICAgIGNhdHMuZm9yRWFjaChmdW5jdGlvbiAoY2F0KSB7XG4gICAgICAgIHZhciByZWMgPSBjYXRlZ29yeVJlc3VsdHNbY2F0XTtcbiAgICAgICAgcmVzICs9IFwiIFxcXCJcIiArIGNhdCArIFwiXFxcIiAtPiBcXFwicmVjb3JkXFxcIiBcXG5cIjtcbiAgICB9KTtcbiAgICAvL290aGVyIGRvbWFpbnMgdG8gdGhpc1xuICAgIGNhdHMuZm9yRWFjaChmdW5jdGlvbiAoY2F0KSB7XG4gICAgfSk7XG4gICAgLypcbiAgICBjYXRzIGZvXG4gICAgICBkaWdyYXBoIHNkc3Uge1xuICAgICAgc2l6ZT1cIjM2LDM2XCI7XG4gICAgICBub2RlIFtjb2xvcj15ZWxsb3csIHN0eWxlPWZpbGxlZF07XG4gICAgICBGTFBEIEZMUCBcIkJPTSBFZGl0b3JcIiwgXCJXSUtJVVJMXCIgXCJVSTUgRG9jdW1lbnRhdGlvblwiLCBcIlVJNSBFeGFtcGxlXCIsIFwiU1RBUlRUQVwiXG4gICAgICBCQ1BcbiAgICAgIG5vZGUgW2NvbG9yPWdyZXksIHN0eWxlPWZpbGxlZF07XG4gICAgICBub2RlIFtmb250bmFtZT1cIlZlcmRhbmFcIiwgc2l6ZT1cIjMwLDMwXCJdO1xuICAgICAgbm9kZSBbY29sb3I9Z3JleSwgc3R5bGU9ZmlsbGVkXTtcbiAgICAgIGdyYXBoIFsgZm9udG5hbWUgPSBcIkFyaWFsXCIsXG4gICAgKi9cbiAgICByZXMgKz0gXCJ9XFxuXCI7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ3JhcGhEb21haW4gPSBncmFwaERvbWFpbjtcbi8qXG4gICAgY2F0ZWdvcnlEZXNjIDogdGhlTW9kZWwuZnVsbC5kb21haW5bZmlsdGVyZG9tYWluXS5jYXRlZ29yaWVzW2NhdGVnb3J5XSxcbiAgICBkaXN0aW5jdCA6IGRpc3RpbmN0LFxuICAgIGRlbHRhIDogZGVsdGEsXG4gICAgcHJlc2VudFJlY29yZHMgOiByZWNvcmRDb3VudC5wcmVzZW50cmVjb3JkcyxcbiAgICBwZXJjUHJlc2VudCA6IHBlcmNlbnQsXG4gICAgc2FtcGxlVmFsdWVzIDogdmFsdWVzTGlzdFxuICB9XG4qL1xuZnVuY3Rpb24gcmVwbGFjZUJyKHN0cmluZykge1xuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXG4vZywgXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRiclxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdHwgXCIpO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG4vKipcbiAqIGdlbmVyYXRlIGEgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiBhIGRvbWFpblxuICovXG5mdW5jdGlvbiB0YWJEb21haW4oZG9tYWluLCBtKSB7XG4gICAgLy8gZHJhdyBhIG1vZGVsIGRvbWFpbnNcbiAgICB2YXIgY2F0cyA9IGZkZXZzdGFfbW9ubW92ZV8xLk1vZGVsLmdldENhdGVnb3JpZXNGb3JEb21haW4obSwgZG9tYWluKTtcbiAgICBjYXRzID0gZmRldnN0YV9tb25tb3ZlXzEuTW9kZWwuc29ydENhdGVnb3JpZXNCeUltcG9ydGFuY2UobS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXMgfHwge30sIGNhdHMpO1xuICAgIC8vY29uc29sZS5sb2coY2F0cy5qb2luKFwiXFxuXCIpKTtcbiAgICB2YXIgY2F0ZGVzYyA9IERlc2NyaWJlLmdldENhdGVnb3J5U3RhdHNJbkRvbWFpbihjYXRzWzBdLCBkb21haW4sIG0pO1xuICAgIHZhciBjYXRSZXN1bHQgPSBjYWxjQ2F0ZWdvcnlSZWNvcmQobSwgY2F0c1swXSwgZG9tYWluKTtcbiAgICB2YXIgZG9tYWluRGVzY3IgPSBtLmZ1bGwuZG9tYWluW2RvbWFpbl0uZGVzY3JpcHRpb24gfHwgXCJcIjtcbiAgICBkb21haW5EZXNjciA9IHJlcGxhY2VCcihkb21haW5EZXNjcik7XG4gICAgdmFyIHJlcyA9IFwiXFxuXFxuLy8gcHJlc2V0IGZvcm0gdmFsdWVzIGlmIHdlIHJlY2VpdmUgYSB1c2VyZGF0YSBvYmplY3QgLy9cXG4tIHVzZXIgPSB1c2VyXFxuXFxuZXh0ZW5kcyAuLi9sYXlvdXRfcFxcblxcbmJsb2NrIGNvbnRlbnRcXG5cXG5cXHRuYXYubmF2YmFyLm5hdmJhci1kZWZhdWx0Lm5hdmJhci1maXhlZC10b3BcXG5cXHRcXHQuY29udGFpbmVyXFxuXFx0XFx0XFx0Lm5hdmJhci1oZWFkZXJcXG5cXHRcXHRcXHRcXHQubmF2YmFyLWJyYW5kKHN0eWxlPSdiZ2NvbG9yOm9yYW5nZTtjb2xvcjpkYXJrYmx1ZTtmb250LWZhbWlseTpBcmlhbCBCbGFjaztmb250LXNpemU6MTUuMTE4cHgnKSB3b3NhcCBkb21haW4gXCIgKyBkb21haW4gKyBcIlxcblxcdFxcdFxcdHVsLm5hdi5uYXZiYXItbmF2Lm5hdmJhci1yaWdodCAje3VpZH1cXG5cXHRcXHRcXHRcXHRsaVxcblxcdFxcdFxcdFxcdFxcdC5uYXZiYXItYnRuI2J0bi1sb2dvdXQuYnRuLmJ0bi1kZWZhdWx0KG9uY2xpY2s9XFxcImxvY2F0aW9uLmhyZWY9Jy9ob21lJ1xcXCIpXFxuXFx0XFx0XFx0XFx0XFx0XFx0fCBiYWNrIHRvIGhvbWVcXG5cXG5cXHRwICAmbmJzcDtcXG5cXHRwICZuYnNwO1xcblxcdHBcXG5cXG5cXHRkaXYud2VsbFxcblxcdFxcdGgzIGRvbWFpbiBcXFwiXCIgKyBkb21haW4gKyBcIlxcXCJcXG5cXHRcXHRcXHRzcGFuLnB1bGwtcmlnaHQgXCIgKyBjYXRSZXN1bHQubnJUb3RhbFJlY29yZHNJbkRvbWFpbiArIFwiIHJlY29yZHNcXG5cXHRcXHRwXFxuXFx0XFx0c3BhbiBcIiArIGRvbWFpbkRlc2NyICsgXCJcXG5cXG5cXHRcXHR0YWJsZS50YWJsZS50YWJsZS1jb25kZW5zZWQudGFibGUtc3RyaXBlZFxcblxcdFxcdFxcdHRoZWFkXFxuXFx0XFx0XFx0XFx0dHJcXG5cXHRcXHRcXHRcXHRcXHR0aCBjYXRlZ29yeVxcblxcdFxcdFxcdFxcdFxcdHRoKHN0eWxlPVxcXCJ3aWR0aDoxMCVcXFwiKSBjb3VudFxcblxcdFxcdFxcdFxcdFxcdHRoXFxuXFx0XFx0XFx0XFx0XFx0XFx0dGFibGVcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR0clxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdHRkIHN5bm9ueW1zXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0dHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHR0ZCBkZXNjcmlwdGlvblxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGQgZXhhbXBsZSB2YWx1ZXNcXG5cXHRcXHRcXHR0Ym9keVxcblwiO1xuICAgIHZhciBjYXRlZ29yeVJlc3VsdHMgPSB7fTtcbiAgICB2YXIgb3RoZXJkb21haW5zID0gW107XG4gICAgdmFyIGNhdGVnb3J5TWFwID0gbS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXMgfHwge307XG4gICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uIChjYXQpIHtcbiAgICAgICAgdmFyIGNhdGRlc2MgPSBEZXNjcmliZS5nZXRDYXRlZ29yeVN0YXRzSW5Eb21haW4oY2F0LCBkb21haW4sIG0pO1xuICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGNhdGRlc2MpKTtcbiAgICAgICAgdmFyIGNhdFJlc3VsdCA9IGNhbGNDYXRlZ29yeVJlY29yZChtLCBjYXQsIGRvbWFpbik7XG4gICAgICAgIGNhdGVnb3J5UmVzdWx0c1tjYXRdID0gY2F0UmVzdWx0O1xuICAgICAgICBvdGhlcmRvbWFpbnMgPSBfLnVuaW9uKG90aGVyZG9tYWlucywgY2F0ZWdvcnlSZXN1bHRzW2NhdF0ub3RoZXJEb21haW5zKTtcbiAgICAgICAgLypcbiAgICAgICAgICAgIHJlcyArPSBgXCIke2NhdH1cIiBbbGFiZWw9XCJ7ICR7Y2F0fSB8ICR7Y2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXNJbkRvbWFpbn0gVmFsdWVzIGluICR7Y2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWlufSBgO1xuICAgICAgICAgICAgaWYoY2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWluICE9PSBjYXRSZXN1bHQubnJSZWNvcmRzKSB7XG4gICAgICAgICAgICAgIHJlcyArPSAgYHwgICR7Y2F0UmVzdWx0Lm5yRGlzdGluY3RWYWx1ZXMgLSBjYXRSZXN1bHQubnJEaXN0aW5jdFZhbHVlc0luRG9tYWlufSBvdGhlciB2YWx1ZXMgaW4gJHtjYXRSZXN1bHQubnJSZWNvcmRzIC0gY2F0UmVzdWx0Lm5yUmVjb3Jkc0luRG9tYWlufSBvdGhlciByZWNvcmRzYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlcyArPSBgIGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMgKz0gYH1cIl1cXG5gO1xuICAgICAgICAqL1xuICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG0uZnVsbC5kb21haW5bZG9tYWluXSkpO1xuICAgICAgICBpZiAobS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXNbY2F0XSkge1xuICAgICAgICAgICAgdmFyIHN5bm9ueW1zU3RyaW5nID0gVXRpbC5saXN0VG9Db21tYUFuZChjYXRkZXNjLmNhdGVnb3J5RGVzYyAmJiBjYXRkZXNjLmNhdGVnb3J5RGVzYy5zeW5vbnltcyAmJiBjYXRkZXNjLmNhdGVnb3J5RGVzYy5zeW5vbnltcyB8fCBbXSkgfHwgXCImbmJzcDtcIjtcbiAgICAgICAgICAgIHJlcyArPSBcIlxcblxcdFxcdFxcdHRyXFxuXFx0XFx0XFx0XFx0XFx0dGQuY2F0X2NvdW50IFwiICsgY2F0ICsgXCJcXG5cXHRcXHRcXHRcXHRcXHR0ZCBcIiArIGNhdGRlc2MucHJlc2VudFJlY29yZHMgKyBcIiBkaXN0aW5jdCB2YWx1ZXMgaW4gXCIgKyBjYXRkZXNjLnBlcmNQcmVzZW50ICsgXCIlIG9mIHJlY29yZHNcXG5cXHRcXHRcXHRcXHRcXHR0ZFxcblxcdFxcdFxcdFxcdFxcdFxcdHRhYmxlXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0dHIuY2F0X3N5bm9ueW1zXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGQgXCIgKyBzeW5vbnltc1N0cmluZyArIFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0dHIuY2F0X2Rlc2NyaXB0aW9uXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGQgXCIgKyByZXBsYWNlQnIoY2F0ZGVzYy5jYXRlZ29yeURlc2MgJiYgY2F0ZGVzYy5jYXRlZ29yeURlc2MuZGVzY3JpcHRpb24gfHwgXCJcIikgKyBcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRyLmNhdF9zYW1wbGV2YWx1ZXNcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHR0ZCBcIiArIHJlcGxhY2VCcihjYXRkZXNjLnNhbXBsZVZhbHVlcykgKyBcIlxcbiAgICAgIFwiO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIG90aGVyY2F0cyA9IGNhdHMubGVuZ3RoIC0gT2JqZWN0LmtleXMobS5mdWxsLmRvbWFpbltkb21haW5dLmNhdGVnb3JpZXMpLmxlbmd0aDtcbiAgICB2YXIgcmVtYWluaW5nQ2F0ZWdvcmllcyA9IF8uZGlmZmVyZW5jZShjYXRzLCBPYmplY3Qua2V5cyhtLmZ1bGwuZG9tYWluW2RvbWFpbl0uY2F0ZWdvcmllcykpO1xuICAgIGlmICgob3RoZXJjYXRzKSA+IDApIHtcbiAgICAgICAgcmVzICs9IFwiXFxuXFx0XFx0cCAgIGFuZCBcIiArIG90aGVyY2F0cyArIFwiIG90aGVyIGNhdGVnb3JpZXNcXG5cXHRcXHR8IFwiICsgVXRpbC5saXN0VG9Db21tYUFuZChyZW1haW5pbmdDYXRlZ29yaWVzKSArIFwiXFxuICAgICAgIFwiO1xuICAgIH1cbiAgICAvKlxuICAgICAgLy8gY2FsY3VsYXRlIG90aGVyIGRvbWFpbnMuXG4gICAgICAvLyBkcmF3IFwib3RoZXIgY2F0ZWdvcmllc1wiXG4gICAgICByZXMgKz0gYG5vZGUgW2NvbG9yPXB1cnBsZSwgc3R5bGU9ZmlsbGVkXTsgXFxuYFxuICAgICAgb3RoZXJkb21haW5zLmZvckVhY2goZnVuY3Rpb24ob3RoZXJkb21haW4pIHtcbiAgICAgICAgcmVzICs9IGBcIiR7b3RoZXJkb21haW59XCIgXFxuYDtcbiAgICAgIH0pO1xuICAgICAgLy8gY291bnQgcmVjb3JkcyBpbiBkb21haW4gOlxuICAgICAgdmFyIG5yUmVjb3JkcyA9IG0ucmVjb3Jkcy5yZWR1Y2UoZnVuY3Rpb24ocHJldixlbnRyeSkge1xuICAgICAgcmV0dXJuIHByZXYgKyAoKGVudHJ5Ll9kb21haW4gPT09IGRvbWFpbikgPyAxIDogMCk7XG4gICAgICB9LDApO1xuICAgICAgcmVzICs9IGBub2RlIFtzaGFwZT1yZWNvcmRdOyBcXG5gXG4gICAgICByZXMgKz0gYCBcInJlY29yZFwiIFtsYWJlbD1cIns8ZjA+ICR7ZG9tYWlufSB8ICR7bnJSZWNvcmRzfX1cIl0gXFxuYDtcbiAgXG4gICAgICByZXMgKz0gYCBcInJfb3RoZXJcIiBbbGFiZWw9XCJ7PGYwPiBvdGhlciB8ICR7bnJSZWNvcmRzfX1cIl0gXFxuIGA7XG4gIFxuICAgICAgcmVzICs9IGAjIHJlbGF0aW9uIGZyb20gY2F0ZWdvcmllcyB0byBkb21haW5cXG5gO1xuICAgICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uKGNhdCkge1xuICAgICAgICByZXMgKz0gYCBcIiR7Y2F0fVwiIC0+IFwiJHtkb21haW59XCIgXFxuYDtcbiAgICAgIH0pXG4gIFxuICBcbiAgICAgIHJlcyArPSBgIyByZWxhdGlvbiBmcm9tIGNhdGVnb3JpZXMgdG8gcmVjb3Jkc1xcbmA7XG4gICAgICBjYXRzLmZvckVhY2goZnVuY3Rpb24oY2F0KSB7XG4gICAgICAgIHZhciByZWMgPSBjYXRlZ29yeVJlc3VsdHNbY2F0XTtcbiAgICAgICAgcmVzICs9IGAgXCIke2NhdH1cIiAtPiBcInJlY29yZFwiIFxcbmA7XG4gICAgICB9KVxuICBcbiAgXG4gICAgICAvL290aGVyIGRvbWFpbnMgdG8gdGhpc1xuICAgICAgY2F0cy5mb3JFYWNoKGZ1bmN0aW9uKGNhdCkge1xuICBcbiAgXG4gICAgICB9KVxuICAgICovXG4gICAgLypcbiAgICBjYXRzIGZvXG4gICAgICBkaWdyYXBoIHNkc3Uge1xuICAgICAgc2l6ZT1cIjM2LDM2XCI7XG4gICAgICBub2RlIFtjb2xvcj15ZWxsb3csIHN0eWxlPWZpbGxlZF07XG4gICAgICBGTFBEIEZMUCBcIkJPTSBFZGl0b3JcIiwgXCJXSUtJVVJMXCIgXCJVSTUgRG9jdW1lbnRhdGlvblwiLCBcIlVJNSBFeGFtcGxlXCIsIFwiU1RBUlRUQVwiXG4gICAgICBCQ1BcbiAgICAgIG5vZGUgW2NvbG9yPWdyZXksIHN0eWxlPWZpbGxlZF07XG4gICAgICBub2RlIFtmb250bmFtZT1cIlZlcmRhbmFcIiwgc2l6ZT1cIjMwLDMwXCJdO1xuICAgICAgbm9kZSBbY29sb3I9Z3JleSwgc3R5bGU9ZmlsbGVkXTtcbiAgICAgIGdyYXBoIFsgZm9udG5hbWUgPSBcIkFyaWFsXCIsXG4gICAgKi9cbiAgICByZXMgKz0gXCJcXG5cXHRcXHRoMyBWZXJzaW9uXFxuXFx0XFx0XFx0YS5zbWFsbChocmVmPVxcXCIvd2hhdHNuZXdcXFwiKVxcblxcblxcbmJsb2NrIHNjcmlwdHNcXG5cXHRzY3JpcHQoc3JjPScvdmVuZG9yL2pxdWVyeS0yLjIuMy5taW4uanMnKVxcblxcdHNjcmlwdChzcmM9Jy92ZW5kb3IvYm9vdHN0cmFwLm1pbi5qcycpXFxuXFx0c2NyaXB0KHNyYz0nL2pzL3ZpZXdzL3NldHRpbmdzLmpzJylcXG5cIjtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50YWJEb21haW4gPSB0YWJEb21haW47XG52YXIgY2hpbGRfcHJvY2Vzc18xID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5mdW5jdGlvbiBleGVjQ21kKGNtZCkge1xuICAgIGNoaWxkX3Byb2Nlc3NfMS5leGVjKGNtZCwgZnVuY3Rpb24gKGVycm9yLCBzdGRvdXQsIHN0ZGVycikge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJleGVjIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcInN0ZG91dDogXCIgKyBzdGRvdXQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInN0ZGVycjogXCIgKyBzdGRlcnIpO1xuICAgIH0pO1xufVxuO1xuZnVuY3Rpb24gdmlzTW9kZWxzKG0sIGZvbGRlck91dCkge1xuICAgIG0uZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uIChzRG9tYWluKSB7XG4gICAgICAgIHZhciBzID0gZ3JhcGhEb21haW4oc0RvbWFpbiwgbSk7XG4gICAgICAgIHZhciBmbkdyYXBoID0gZm9sZGVyT3V0ICsgXCIvXCIgKyBzRG9tYWluLnJlcGxhY2UoLyAvZywgJ18nKSArIFwiLmd2XCI7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZm5HcmFwaCwgcyk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5HUkFQSFZJWikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJoZXJlIHRoZSBmaWxlIFwiICsgZm5HcmFwaCk7XG4gICAgICAgICAgICBleGVjQ21kKHByb2Nlc3MuZW52LkdSQVBIVklaICsgXCIgLVRqcGVnIC1PIFwiICsgZm5HcmFwaCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMudmlzTW9kZWxzID0gdmlzTW9kZWxzO1xuZnVuY3Rpb24gdGFiTW9kZWxzKG0sIGZvbGRlck91dCkge1xuICAgIG0uZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uIChzRG9tYWluKSB7XG4gICAgICAgIHZhciBzID0gdGFiRG9tYWluKHNEb21haW4sIG0pO1xuICAgICAgICB2YXIgZm5HcmFwaCA9IGZvbGRlck91dCArIFwiL1wiICsgc0RvbWFpbi5yZXBsYWNlKC8gL2csICdfJykgKyBcIi5qYWRlXCI7XG4gICAgICAgIGRlYnVnbG9nKFwiaGVyZSB0aGUgZmlsZSBcIiArIGZuR3JhcGgpO1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZuR3JhcGgsIHMpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50YWJNb2RlbHMgPSB0YWJNb2RlbHM7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
