"use strict";
/**
 * maketable.ts
 *
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */

Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var debuglog = debug('maketable');
var fdevsta_monmove_1 = require("fdevsta_monmove");
var Utils = require("abot_utils");
var _ = require("lodash");
function makeTable(categories, theModel) {
    //
    debuglog("makeTable for " + JSON.stringify(categories));
    //
    var aFilteredDomains = fdevsta_monmove_1.Model.getDomainsForCategory(theModel, categories[0]);
    categories.forEach(function (category) {
        var catsForDomain = fdevsta_monmove_1.Model.getDomainsForCategory(theModel, category);
        aFilteredDomains = _.intersection(aFilteredDomains, catsForDomain);
    });
    if (aFilteredDomains.length === 0) {
        return {
            text: 'No commxon domains for ' + Utils.listToQuotedCommaAnd(categories),
            action: {}
        };
    }
    var domain = aFilteredDomains[0];
    //
    var columns = fdevsta_monmove_1.Model.getTableColumns(theModel, domain);
    if (columns.length === 0) {
        return {
            text: 'Apologies, but i cannot make a table for domain ' + domain + ' ',
            action: {}
        };
    }
    var indexMap = categories.map(function (category) {
        return columns.indexOf(category);
    }).filter(function (i) {
        return i >= 0;
    });
    if (indexMap.length === 0) {
        return {
            text: 'Apologies, but ' + Utils.listToQuotedCommaAnd(categories) + ' does not represent possible table columns',
            action: {}
        };
    }
    var text = "";
    var missingMap = categories.filter(function (category) {
        return columns.indexOf(category) < 0;
    });
    var usedMap = categories.filter(function (category) {
        return columns.indexOf(category) >= 0;
    });
    if (missingMap.length) {
        text = "I had to drop " + Utils.listToQuotedCommaAnd(missingMap) + ". But here you go ...\n";
    }
    text += "Creating and starting table with " + Utils.listToQuotedCommaAnd(usedMap);
    return {
        text: text,
        action: { url: "table_" + domain.toLowerCase().replace(/[^a-z0-9_]/g, '_') + "?c" + indexMap.join(',') }
    };
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZWMvbWFrZXFiZXRhYmxlLmpzIiwiLi4vc3JjL2V4ZWMvbWFrZXFiZXRhYmxlLnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJmZGV2c3RhX21vbm1vdmVfMSIsIlV0aWxzIiwiXyIsIm1ha2VUYWJsZSIsImNhdGVnb3JpZXMiLCJ0aGVNb2RlbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJhRmlsdGVyZWREb21haW5zIiwiTW9kZWwiLCJnZXREb21haW5zRm9yQ2F0ZWdvcnkiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJjYXRzRm9yRG9tYWluIiwiaW50ZXJzZWN0aW9uIiwibGVuZ3RoIiwidGV4dCIsImxpc3RUb1F1b3RlZENvbW1hQW5kIiwiYWN0aW9uIiwiZG9tYWluIiwiY29sdW1ucyIsImdldFRhYmxlQ29sdW1ucyIsImluZGV4TWFwIiwibWFwIiwiaW5kZXhPZiIsImZpbHRlciIsImkiLCJtaXNzaW5nTWFwIiwidXNlZE1hcCIsInVybCIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBO0FDQ0E7Ozs7Ozs7QURNQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FDRUEsSUFBQUMsUUFBQUMsUUFBQSxPQUFBLENBQUE7QUFFQSxJQUFNQyxXQUFXRixNQUFNLFdBQU4sQ0FBakI7QUFHQSxJQUFBRyxvQkFBQUYsUUFBQSxpQkFBQSxDQUFBO0FBR0EsSUFBQUcsUUFBQUgsUUFBQSxZQUFBLENBQUE7QUFFQSxJQUFBSSxJQUFBSixRQUFBLFFBQUEsQ0FBQTtBQUdBLFNBQUFLLFNBQUEsQ0FBMEJDLFVBQTFCLEVBQWlEQyxRQUFqRCxFQUF5RTtBQUV2RTtBQUNBTixhQUFTLG1CQUFtQk8sS0FBS0MsU0FBTCxDQUFlSCxVQUFmLENBQTVCO0FBQ0E7QUFDQSxRQUFJSSxtQkFBbUJSLGtCQUFBUyxLQUFBLENBQU1DLHFCQUFOLENBQTRCTCxRQUE1QixFQUFzQ0QsV0FBVyxDQUFYLENBQXRDLENBQXZCO0FBQ0FBLGVBQVdPLE9BQVgsQ0FBbUIsVUFBQUMsUUFBQSxFQUFRO0FBQ25CLFlBQUlDLGdCQUFnQmIsa0JBQUFTLEtBQUEsQ0FBTUMscUJBQU4sQ0FBNEJMLFFBQTVCLEVBQXFDTyxRQUFyQyxDQUFwQjtBQUNBSiwyQkFBbUJOLEVBQUVZLFlBQUYsQ0FBZU4sZ0JBQWYsRUFBZ0NLLGFBQWhDLENBQW5CO0FBQ1AsS0FIRDtBQUlBLFFBQUdMLGlCQUFpQk8sTUFBakIsS0FBNEIsQ0FBL0IsRUFBa0M7QUFDaEMsZUFBUTtBQUNOQyxrQkFBUSw0QkFBNEJmLE1BQU1nQixvQkFBTixDQUEyQmIsVUFBM0IsQ0FEOUI7QUFFTmMsb0JBQVM7QUFGSCxTQUFSO0FBSUQ7QUFDRCxRQUFJQyxTQUFTWCxpQkFBaUIsQ0FBakIsQ0FBYjtBQUNBO0FBQ0EsUUFBSVksVUFBVXBCLGtCQUFBUyxLQUFBLENBQU1ZLGVBQU4sQ0FBc0JoQixRQUF0QixFQUFnQ2MsTUFBaEMsQ0FBZDtBQUNBLFFBQUdDLFFBQVFMLE1BQVIsS0FBbUIsQ0FBdEIsRUFBeUI7QUFDdkIsZUFBTztBQUNMQyxrQkFBUSxxREFBcURHLE1BQXJELEdBQThELEdBRGpFO0FBRUxELG9CQUFTO0FBRkosU0FBUDtBQUlEO0FBQ0QsUUFBSUksV0FBV2xCLFdBQVdtQixHQUFYLENBQWdCLFVBQUFYLFFBQUEsRUFBUTtBQUFNLGVBQUFRLFFBQVFJLE9BQVIsQ0FBZ0JaLFFBQWhCLENBQUE7QUFBeUIsS0FBdkQsRUFBMERhLE1BQTFELENBQWlFLFVBQUFDLENBQUEsRUFBQztBQUFJLGVBQUFBLEtBQUssQ0FBTDtBQUFNLEtBQTVFLENBQWY7QUFDQSxRQUFHSixTQUFTUCxNQUFULEtBQW9CLENBQXZCLEVBQTBCO0FBQ3hCLGVBQVE7QUFDTkMsa0JBQVEsb0JBQW9CZixNQUFNZ0Isb0JBQU4sQ0FBMkJiLFVBQTNCLENBQXBCLEdBQTZELDRDQUQvRDtBQUVOYyxvQkFBUztBQUZILFNBQVI7QUFJRDtBQUNELFFBQUlGLE9BQU8sRUFBWDtBQUNBLFFBQUlXLGFBQWF2QixXQUFXcUIsTUFBWCxDQUFtQixVQUFBYixRQUFBLEVBQVE7QUFBSyxlQUFBUSxRQUFRSSxPQUFSLENBQWdCWixRQUFoQixJQUE0QixDQUE1QjtBQUE2QixLQUE3RCxDQUFqQjtBQUNBLFFBQUlnQixVQUFVeEIsV0FBV3FCLE1BQVgsQ0FBbUIsVUFBQWIsUUFBQSxFQUFRO0FBQUssZUFBQVEsUUFBUUksT0FBUixDQUFnQlosUUFBaEIsS0FBNkIsQ0FBN0I7QUFBOEIsS0FBOUQsQ0FBZDtBQUNBLFFBQUdlLFdBQVdaLE1BQWQsRUFBc0I7QUFDcEJDLGVBQU8sbUJBQW1CZixNQUFNZ0Isb0JBQU4sQ0FBMkJVLFVBQTNCLENBQW5CLEdBQTRELHlCQUFuRTtBQUNEO0FBQ0RYLFlBQVEsc0NBQXFDZixNQUFNZ0Isb0JBQU4sQ0FBMkJXLE9BQTNCLENBQTdDO0FBQ0EsV0FBTztBQUNMWixjQUFPQSxJQURGO0FBRVBFLGdCQUFRLEVBQUVXLEtBQU0sV0FBU1YsT0FBT1csV0FBUCxHQUFxQkMsT0FBckIsQ0FBNkIsYUFBN0IsRUFBMkMsR0FBM0MsQ0FBVCxHQUF3RCxJQUF4RCxHQUE2RFQsU0FBU1UsSUFBVCxDQUFjLEdBQWQsQ0FBckU7QUFGRCxLQUFQO0FBSUQ7QUEzQ0RyQyxRQUFBUSxTQUFBLEdBQUFBLFNBQUEiLCJmaWxlIjoiZXhlYy9tYWtlcWJldGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogbWFrZXRhYmxlLnRzXG4gKlxuICogQGZpbGVcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ21ha2V0YWJsZScpO1xudmFyIGZkZXZzdGFfbW9ubW92ZV8xID0gcmVxdWlyZShcImZkZXZzdGFfbW9ubW92ZVwiKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoXCJhYm90X3V0aWxzXCIpO1xudmFyIF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuZnVuY3Rpb24gbWFrZVRhYmxlKGNhdGVnb3JpZXMsIHRoZU1vZGVsKSB7XG4gICAgLy9cbiAgICBkZWJ1Z2xvZyhcIm1ha2VUYWJsZSBmb3IgXCIgKyBKU09OLnN0cmluZ2lmeShjYXRlZ29yaWVzKSk7XG4gICAgLy9cbiAgICB2YXIgYUZpbHRlcmVkRG9tYWlucyA9IGZkZXZzdGFfbW9ubW92ZV8xLk1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcmllc1swXSk7XG4gICAgY2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICB2YXIgY2F0c0ZvckRvbWFpbiA9IGZkZXZzdGFfbW9ubW92ZV8xLk1vZGVsLmdldERvbWFpbnNGb3JDYXRlZ29yeSh0aGVNb2RlbCwgY2F0ZWdvcnkpO1xuICAgICAgICBhRmlsdGVyZWREb21haW5zID0gXy5pbnRlcnNlY3Rpb24oYUZpbHRlcmVkRG9tYWlucywgY2F0c0ZvckRvbWFpbik7XG4gICAgfSk7XG4gICAgaWYgKGFGaWx0ZXJlZERvbWFpbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiAnTm8gY29tbXhvbiBkb21haW5zIGZvciAnICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQoY2F0ZWdvcmllcyksXG4gICAgICAgICAgICBhY3Rpb246IHt9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBkb21haW4gPSBhRmlsdGVyZWREb21haW5zWzBdO1xuICAgIC8vXG4gICAgdmFyIGNvbHVtbnMgPSBmZGV2c3RhX21vbm1vdmVfMS5Nb2RlbC5nZXRUYWJsZUNvbHVtbnModGhlTW9kZWwsIGRvbWFpbik7XG4gICAgaWYgKGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiAnQXBvbG9naWVzLCBidXQgaSBjYW5ub3QgbWFrZSBhIHRhYmxlIGZvciBkb21haW4gJyArIGRvbWFpbiArICcgJyxcbiAgICAgICAgICAgIGFjdGlvbjoge31cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGluZGV4TWFwID0gY2F0ZWdvcmllcy5tYXAoZnVuY3Rpb24gKGNhdGVnb3J5KSB7IHJldHVybiBjb2x1bW5zLmluZGV4T2YoY2F0ZWdvcnkpOyB9KS5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgPj0gMDsgfSk7XG4gICAgaWYgKGluZGV4TWFwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogJ0Fwb2xvZ2llcywgYnV0ICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgZG9lcyBub3QgcmVwcmVzZW50IHBvc3NpYmxlIHRhYmxlIGNvbHVtbnMnLFxuICAgICAgICAgICAgYWN0aW9uOiB7fVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgdmFyIG1pc3NpbmdNYXAgPSBjYXRlZ29yaWVzLmZpbHRlcihmdW5jdGlvbiAoY2F0ZWdvcnkpIHsgcmV0dXJuIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPCAwOyB9KTtcbiAgICB2YXIgdXNlZE1hcCA9IGNhdGVnb3JpZXMuZmlsdGVyKGZ1bmN0aW9uIChjYXRlZ29yeSkgeyByZXR1cm4gY29sdW1ucy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwOyB9KTtcbiAgICBpZiAobWlzc2luZ01hcC5sZW5ndGgpIHtcbiAgICAgICAgdGV4dCA9IFwiSSBoYWQgdG8gZHJvcCBcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKG1pc3NpbmdNYXApICsgXCIuIEJ1dCBoZXJlIHlvdSBnbyAuLi5cXG5cIjtcbiAgICB9XG4gICAgdGV4dCArPSBcIkNyZWF0aW5nIGFuZCBzdGFydGluZyB0YWJsZSB3aXRoIFwiICsgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQodXNlZE1hcCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgYWN0aW9uOiB7IHVybDogXCJ0YWJsZV9cIiArIGRvbWFpbi50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05X10vZywgJ18nKSArIFwiP2NcIiArIGluZGV4TWFwLmpvaW4oJywnKSB9XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVRhYmxlID0gbWFrZVRhYmxlO1xuIiwiXG4vKipcbiAqIG1ha2V0YWJsZS50c1xuICpcbiAqIEBmaWxlXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ21ha2V0YWJsZScpXG5cbmltcG9ydCAqIGFzIElNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcbmltcG9ydCB7IE1vZGVsIH0gZnJvbSAnZmRldnN0YV9tb25tb3ZlJztcblxuXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICdhYm90X3V0aWxzJztcblxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGFibGUoY2F0ZWdvcmllcyA6IHN0cmluZ1tdLCB0aGVNb2RlbDogSU1hdGNoLklNb2RlbHMgKSA6IHsgdGV4dDogc3RyaW5nLCBhY3Rpb24gOiB7IHVybD8gOiBzdHJpbmcgfSB9XG57XG4gIC8vXG4gIGRlYnVnbG9nKFwibWFrZVRhYmxlIGZvciBcIiArIEpTT04uc3RyaW5naWZ5KGNhdGVnb3JpZXMpKTtcbiAgLy9cbiAgdmFyIGFGaWx0ZXJlZERvbWFpbnMgPSBNb2RlbC5nZXREb21haW5zRm9yQ2F0ZWdvcnkodGhlTW9kZWwsIGNhdGVnb3JpZXNbMF0pO1xuICBjYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICAgIHZhciBjYXRzRm9yRG9tYWluID0gTW9kZWwuZ2V0RG9tYWluc0ZvckNhdGVnb3J5KHRoZU1vZGVsLGNhdGVnb3J5KTtcbiAgICAgICAgICBhRmlsdGVyZWREb21haW5zID0gXy5pbnRlcnNlY3Rpb24oYUZpbHRlcmVkRG9tYWlucyxjYXRzRm9yRG9tYWluKTtcbiAgfSk7XG4gIGlmKGFGaWx0ZXJlZERvbWFpbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICB7XG4gICAgICB0ZXh0IDogICdObyBjb21teG9uIGRvbWFpbnMgZm9yICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSxcbiAgICAgIGFjdGlvbiA6IHt9XG4gICAgfVxuICB9XG4gIHZhciBkb21haW4gPSBhRmlsdGVyZWREb21haW5zWzBdO1xuICAvL1xuICB2YXIgY29sdW1ucyA9IE1vZGVsLmdldFRhYmxlQ29sdW1ucyh0aGVNb2RlbCwgZG9tYWluKTtcbiAgaWYoY29sdW1ucy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dCA6ICAnQXBvbG9naWVzLCBidXQgaSBjYW5ub3QgbWFrZSBhIHRhYmxlIGZvciBkb21haW4gJyArIGRvbWFpbiArICcgJyxcbiAgICAgIGFjdGlvbiA6IHt9XG4gICAgfVxuICB9XG4gIHZhciBpbmRleE1hcCA9IGNhdGVnb3JpZXMubWFwKCBjYXRlZ29yeSA9PiAgIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgKS5maWx0ZXIoaSA9PiBpID49IDApO1xuICBpZihpbmRleE1hcC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gIHtcbiAgICAgIHRleHQgOiAgJ0Fwb2xvZ2llcywgYnV0ICcgKyBVdGlscy5saXN0VG9RdW90ZWRDb21tYUFuZChjYXRlZ29yaWVzKSArICcgZG9lcyBub3QgcmVwcmVzZW50IHBvc3NpYmxlIHRhYmxlIGNvbHVtbnMnLFxuICAgICAgYWN0aW9uIDoge31cbiAgICB9XG4gIH1cbiAgdmFyIHRleHQgPSBcIlwiO1xuICB2YXIgbWlzc2luZ01hcCA9IGNhdGVnb3JpZXMuZmlsdGVyKCBjYXRlZ29yeSA9PiAgY29sdW1ucy5pbmRleE9mKGNhdGVnb3J5KSA8IDAgKTtcbiAgdmFyIHVzZWRNYXAgPSBjYXRlZ29yaWVzLmZpbHRlciggY2F0ZWdvcnkgPT4gIGNvbHVtbnMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMCk7XG4gIGlmKG1pc3NpbmdNYXAubGVuZ3RoKSB7XG4gICAgdGV4dCA9IFwiSSBoYWQgdG8gZHJvcCBcIiArIFV0aWxzLmxpc3RUb1F1b3RlZENvbW1hQW5kKG1pc3NpbmdNYXApICsgXCIuIEJ1dCBoZXJlIHlvdSBnbyAuLi5cXG5cIlxuICB9XG4gIHRleHQgKz0gXCJDcmVhdGluZyBhbmQgc3RhcnRpbmcgdGFibGUgd2l0aCBcIisgVXRpbHMubGlzdFRvUXVvdGVkQ29tbWFBbmQodXNlZE1hcCk7XG4gIHJldHVybiB7XG4gICAgdGV4dCA6IHRleHQsXG4gIGFjdGlvbiA6eyB1cmwgOiBgdGFibGVfJHtkb21haW4udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV9dL2csJ18nKX0/YyR7aW5kZXhNYXAuam9pbignLCcpfWAgfVxuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
