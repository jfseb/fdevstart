/**
 * maketable.ts
 *
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */
"use strict";

var debug = require("debug");
var debuglog = debug('maketable');
var fdevsta_monmove_1 = require("fdevsta_monmove");
var Utils = require("abot_utils");
var _ = require("lodash");
function makeTable(categories, theModel) {
    //
    debuglog("makeTable for " + JSON.stringify(categories));
    //
    var aFilteredDomains = fdevsta_monmove_1.Model.getDomainsForCategory(theModel, categories[0]);
    categories.forEach(function (category) {
        var catsForDomain = fdevsta_monmove_1.Model.getDomainsForCategory(theModel, category);
        aFilteredDomains = _.intersection(aFilteredDomains, catsForDomain);
    });
    if (aFilteredDomains.length === 0) {
        return {
            text: 'No commxon domains for ' + Utils.listToQuotedCommaAnd(categories),
            action: {}
        };
    }
    var domain = aFilteredDomains[0];
    //
    var columns = fdevsta_monmove_1.Model.getTableColumns(theModel, domain);
    if (columns.length === 0) {
        return {
            text: 'Apologies, but i cannot make a table for domain ' + domain + ' ',
            action: {}
        };
    }
    var indexMap = categories.map(function (category) {
        return columns.indexOf(category);
    }).filter(function (i) {
        return i >= 0;
    });
    if (indexMap.length === 0) {
        return {
            text: 'Apologies, but ' + Utils.listToQuotedCommaAnd(categories) + ' does not represent possible table columns',
            action: {}
        };
    }
    var text = "";
    var missingMap = categories.filter(function (category) {
        return columns.indexOf(category) < 0;
    });
    var usedMap = categories.filter(function (category) {
        return columns.indexOf(category) >= 0;
    });
    if (missingMap.length) {
        text = "I had to drop " + Utils.listToQuotedCommaAnd(missingMap) + ". But here you go ...\n";
    }
    text += "Creating and starting table with " + Utils.listToQuotedCommaAnd(usedMap);
    return {
        text: text,
        action: { url: "table_" + domain.toLowerCase().replace(/[^a-z0-9_]/g, '_') + "?c" + indexMap.join(',') }
    };
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,
