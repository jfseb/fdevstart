"use strict";
/**
 * Functionality to execute a certain response on the server,
 * interpreting a general model context
 *
 *
 * via a) commandline (e.g. browser startup)
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */

Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var debuglog = debug('exectemplate');
function expandTemplate(context, template) {
    var pattern = template;
    Object.keys(context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        pattern = pattern.replace(regex, context[sKey]);
        pattern = pattern.replace(regex, context[sKey]);
    });
    return pattern;
}
exports.expandTemplate = expandTemplate;
function extractReplacementKeys(stemplate) {
    var regex = new RegExp('{([^}]+)}', "g");
    var keys = {};
    var m;
    while (m = regex.exec(stemplate)) {
        var pattern = m[1];
        keys[pattern] = 1;
    }
    return Object.keys(keys).sort();
}
exports.extractReplacementKeys = extractReplacementKeys;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZWMvZXhlY3RlbXBsYXRlLmpzIiwiLi4vc3JjL2V4ZWMvZXhlY3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJleHBhbmRUZW1wbGF0ZSIsImNvbnRleHQiLCJ0ZW1wbGF0ZSIsInBhdHRlcm4iLCJrZXlzIiwiZm9yRWFjaCIsInNLZXkiLCJyZWdleCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJleHRyYWN0UmVwbGFjZW1lbnRLZXlzIiwic3RlbXBsYXRlIiwibSIsImV4ZWMiLCJzb3J0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOzs7Ozs7Ozs7O0FEVUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQ0VBLElBQUFDLFFBQUFDLFFBQUEsT0FBQSxDQUFBO0FBSUEsSUFBTUMsV0FBV0YsTUFBTSxjQUFOLENBQWpCO0FBUUEsU0FBQUcsY0FBQSxDQUErQkMsT0FBL0IsRUFBcUVDLFFBQXJFLEVBQXNGO0FBQ3BGLFFBQUlDLFVBQVVELFFBQWQ7QUFDQVQsV0FBT1csSUFBUCxDQUFZSCxPQUFaLEVBQXFCSSxPQUFyQixDQUE2QixVQUFVQyxJQUFWLEVBQWM7QUFDekMsWUFBSUMsUUFBUSxJQUFJQyxNQUFKLENBQVcsTUFBTUYsSUFBTixHQUFhLEdBQXhCLEVBQTZCLEdBQTdCLENBQVo7QUFDQUgsa0JBQVVBLFFBQVFNLE9BQVIsQ0FBZ0JGLEtBQWhCLEVBQXVCTixRQUFRSyxJQUFSLENBQXZCLENBQVY7QUFDQUgsa0JBQVVBLFFBQVFNLE9BQVIsQ0FBZ0JGLEtBQWhCLEVBQXVCTixRQUFRSyxJQUFSLENBQXZCLENBQVY7QUFDRCxLQUpEO0FBS0EsV0FBT0gsT0FBUDtBQUNEO0FBUkRSLFFBQUFLLGNBQUEsR0FBQUEsY0FBQTtBQVVBLFNBQUFVLHNCQUFBLENBQXVDQyxTQUF2QyxFQUF5RDtBQUN2RCxRQUFJSixRQUFRLElBQUlDLE1BQUosQ0FBVyxXQUFYLEVBQXdCLEdBQXhCLENBQVo7QUFDQSxRQUFJSixPQUFPLEVBQVg7QUFDQSxRQUFJUSxDQUFKO0FBQ0EsV0FBTUEsSUFBSUwsTUFBTU0sSUFBTixDQUFXRixTQUFYLENBQVYsRUFBaUM7QUFDL0IsWUFBSVIsVUFBVVMsRUFBRSxDQUFGLENBQWQ7QUFDQVIsYUFBS0QsT0FBTCxJQUFnQixDQUFoQjtBQUNEO0FBQ0QsV0FBT1YsT0FBT1csSUFBUCxDQUFZQSxJQUFaLEVBQWtCVSxJQUFsQixFQUFQO0FBQ0Q7QUFURG5CLFFBQUFlLHNCQUFBLEdBQUFBLHNCQUFBIiwiZmlsZSI6ImV4ZWMvZXhlY3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZ1bmN0aW9uYWxpdHkgdG8gZXhlY3V0ZSBhIGNlcnRhaW4gcmVzcG9uc2Ugb24gdGhlIHNlcnZlcixcbiAqIGludGVycHJldGluZyBhIGdlbmVyYWwgbW9kZWwgY29udGV4dFxuICpcbiAqXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxuICogQGZpbGVcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdleGVjdGVtcGxhdGUnKTtcbmZ1bmN0aW9uIGV4cGFuZFRlbXBsYXRlKGNvbnRleHQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIHBhdHRlcm4gPSB0ZW1wbGF0ZTtcbiAgICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXR0ZXJuO1xufVxuZXhwb3J0cy5leHBhbmRUZW1wbGF0ZSA9IGV4cGFuZFRlbXBsYXRlO1xuZnVuY3Rpb24gZXh0cmFjdFJlcGxhY2VtZW50S2V5cyhzdGVtcGxhdGUpIHtcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7KFtefV0rKX0nLCBcImdcIik7XG4gICAgdmFyIGtleXMgPSB7fTtcbiAgICB2YXIgbTtcbiAgICB3aGlsZSAobSA9IHJlZ2V4LmV4ZWMoc3RlbXBsYXRlKSkge1xuICAgICAgICB2YXIgcGF0dGVybiA9IG1bMV07XG4gICAgICAgIGtleXNbcGF0dGVybl0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoa2V5cykuc29ydCgpO1xufVxuZXhwb3J0cy5leHRyYWN0UmVwbGFjZW1lbnRLZXlzID0gZXh0cmFjdFJlcGxhY2VtZW50S2V5cztcbiIsIi8qKlxyXG4gKiBGdW5jdGlvbmFsaXR5IHRvIGV4ZWN1dGUgYSBjZXJ0YWluIHJlc3BvbnNlIG9uIHRoZSBzZXJ2ZXIsXHJcbiAqIGludGVycHJldGluZyBhIGdlbmVyYWwgbW9kZWwgY29udGV4dFxyXG4gKlxyXG4gKlxyXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxyXG4gKiBAZmlsZVxyXG4gKiBAY29weXJpZ2h0IChjKSAyMDE2IEdlcmQgRm9yc3RtYW5uXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgaW50ZiBmcm9tICdjb25zdGFudHMnO1xyXG5cclxuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xyXG5cclxuaW1wb3J0ICogIGFzIElGTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcblxyXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdleGVjdGVtcGxhdGUnKVxyXG5cclxuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5cclxuaW1wb3J0ICogYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBNYXRjaCBmcm9tICcuLi9tYXRjaC9tYXRjaCc7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZFRlbXBsYXRlKGNvbnRleHQgOiB7W2tleSA6IHN0cmluZ10gOiBzdHJpbmd9ICwgdGVtcGxhdGUgOiBzdHJpbmcgKSA6IHN0cmluZyB7XHJcbiAgdmFyIHBhdHRlcm4gPSB0ZW1wbGF0ZTtcclxuICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChzS2V5KSB7XHJcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7JyArIHNLZXkgKyAnfScsICdnJylcclxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pXHJcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKHJlZ2V4LCBjb250ZXh0W3NLZXldKVxyXG4gIH0pXHJcbiAgcmV0dXJuIHBhdHRlcm47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UmVwbGFjZW1lbnRLZXlzKHN0ZW1wbGF0ZSA6IHN0cmluZykgOiBzdHJpbmdbXSB7XHJcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgneyhbXn1dKyl9JywgXCJnXCIpO1xyXG4gIHZhciBrZXlzID0ge307XHJcbiAgdmFyIG07XHJcbiAgd2hpbGUobSA9IHJlZ2V4LmV4ZWMoc3RlbXBsYXRlKSkge1xyXG4gICAgdmFyIHBhdHRlcm4gPSBtWzFdO1xyXG4gICAga2V5c1twYXR0ZXJuXSA9IDE7XHJcbiAgfVxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5zb3J0KCk7XHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
