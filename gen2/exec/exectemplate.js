"use strict";
/**
 * Functionality to execute a certain response on the server,
 * interpreting a general model context
 *
 *
 * via a) commandline (e.g. browser startup)
 * @file
 * @copyright (c) 2016 Gerd Forstmann
 */

Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var debuglog = debug('exectemplate');
function expandTemplate(context, template) {
    var pattern = template;
    Object.keys(context).forEach(function (sKey) {
        var regex = new RegExp('{' + sKey + '}', 'g');
        pattern = pattern.replace(regex, context[sKey]);
        pattern = pattern.replace(regex, context[sKey]);
    });
    return pattern;
}
exports.expandTemplate = expandTemplate;
function extractReplacementKeys(stemplate) {
    var regex = new RegExp('{([^}]+)}', "g");
    var keys = {};
    var m;
    while (m = regex.exec(stemplate)) {
        var pattern = m[1];
        keys[pattern] = 1;
    }
    return Object.keys(keys).sort();
}
exports.extractReplacementKeys = extractReplacementKeys;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZWMvZXhlY3RlbXBsYXRlLmpzIiwiLi4vc3JjL2V4ZWMvZXhlY3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWciLCJyZXF1aXJlIiwiZGVidWdsb2ciLCJleHBhbmRUZW1wbGF0ZSIsImNvbnRleHQiLCJ0ZW1wbGF0ZSIsInBhdHRlcm4iLCJrZXlzIiwiZm9yRWFjaCIsInNLZXkiLCJyZWdleCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJleHRyYWN0UmVwbGFjZW1lbnRLZXlzIiwic3RlbXBsYXRlIiwibSIsImV4ZWMiLCJzb3J0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOzs7Ozs7Ozs7O0FEVUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQ0VBLElBQUFDLFFBQUFDLFFBQUEsT0FBQSxDQUFBO0FBSUEsSUFBTUMsV0FBV0YsTUFBTSxjQUFOLENBQWpCO0FBUUEsU0FBQUcsY0FBQSxDQUErQkMsT0FBL0IsRUFBcUVDLFFBQXJFLEVBQXNGO0FBQ3BGLFFBQUlDLFVBQVVELFFBQWQ7QUFDQVQsV0FBT1csSUFBUCxDQUFZSCxPQUFaLEVBQXFCSSxPQUFyQixDQUE2QixVQUFVQyxJQUFWLEVBQWM7QUFDekMsWUFBSUMsUUFBUSxJQUFJQyxNQUFKLENBQVcsTUFBTUYsSUFBTixHQUFhLEdBQXhCLEVBQTZCLEdBQTdCLENBQVo7QUFDQUgsa0JBQVVBLFFBQVFNLE9BQVIsQ0FBZ0JGLEtBQWhCLEVBQXVCTixRQUFRSyxJQUFSLENBQXZCLENBQVY7QUFDQUgsa0JBQVVBLFFBQVFNLE9BQVIsQ0FBZ0JGLEtBQWhCLEVBQXVCTixRQUFRSyxJQUFSLENBQXZCLENBQVY7QUFDRCxLQUpEO0FBS0EsV0FBT0gsT0FBUDtBQUNEO0FBUkRSLFFBQUFLLGNBQUEsR0FBQUEsY0FBQTtBQVVBLFNBQUFVLHNCQUFBLENBQXVDQyxTQUF2QyxFQUF5RDtBQUN2RCxRQUFJSixRQUFRLElBQUlDLE1BQUosQ0FBVyxXQUFYLEVBQXdCLEdBQXhCLENBQVo7QUFDQSxRQUFJSixPQUFPLEVBQVg7QUFDQSxRQUFJUSxDQUFKO0FBQ0EsV0FBTUEsSUFBSUwsTUFBTU0sSUFBTixDQUFXRixTQUFYLENBQVYsRUFBaUM7QUFDL0IsWUFBSVIsVUFBVVMsRUFBRSxDQUFGLENBQWQ7QUFDQVIsYUFBS0QsT0FBTCxJQUFnQixDQUFoQjtBQUNEO0FBQ0QsV0FBT1YsT0FBT1csSUFBUCxDQUFZQSxJQUFaLEVBQWtCVSxJQUFsQixFQUFQO0FBQ0Q7QUFURG5CLFFBQUFlLHNCQUFBLEdBQUFBLHNCQUFBIiwiZmlsZSI6ImV4ZWMvZXhlY3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZ1bmN0aW9uYWxpdHkgdG8gZXhlY3V0ZSBhIGNlcnRhaW4gcmVzcG9uc2Ugb24gdGhlIHNlcnZlcixcbiAqIGludGVycHJldGluZyBhIGdlbmVyYWwgbW9kZWwgY29udGV4dFxuICpcbiAqXG4gKiB2aWEgYSkgY29tbWFuZGxpbmUgKGUuZy4gYnJvd3NlciBzdGFydHVwKVxuICogQGZpbGVcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGRlYnVnbG9nID0gZGVidWcoJ2V4ZWN0ZW1wbGF0ZScpO1xuZnVuY3Rpb24gZXhwYW5kVGVtcGxhdGUoY29udGV4dCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgcGF0dGVybiA9IHRlbXBsYXRlO1xuICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgneycgKyBzS2V5ICsgJ30nLCAnZycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKHJlZ2V4LCBjb250ZXh0W3NLZXldKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5leHBvcnRzLmV4cGFuZFRlbXBsYXRlID0gZXhwYW5kVGVtcGxhdGU7XG5mdW5jdGlvbiBleHRyYWN0UmVwbGFjZW1lbnRLZXlzKHN0ZW1wbGF0ZSkge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3soW159XSspfScsIFwiZ1wiKTtcbiAgICB2YXIga2V5cyA9IHt9O1xuICAgIHZhciBtO1xuICAgIHdoaWxlIChtID0gcmVnZXguZXhlYyhzdGVtcGxhdGUpKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuID0gbVsxXTtcbiAgICAgICAga2V5c1twYXR0ZXJuXSA9IDE7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5zb3J0KCk7XG59XG5leHBvcnRzLmV4dHJhY3RSZXBsYWNlbWVudEtleXMgPSBleHRyYWN0UmVwbGFjZW1lbnRLZXlzO1xuIiwiLyoqXHJcbiAqIEZ1bmN0aW9uYWxpdHkgdG8gZXhlY3V0ZSBhIGNlcnRhaW4gcmVzcG9uc2Ugb24gdGhlIHNlcnZlcixcclxuICogaW50ZXJwcmV0aW5nIGEgZ2VuZXJhbCBtb2RlbCBjb250ZXh0XHJcbiAqXHJcbiAqXHJcbiAqIHZpYSBhKSBjb21tYW5kbGluZSAoZS5nLiBicm93c2VyIHN0YXJ0dXApXHJcbiAqIEBmaWxlXHJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTYgR2VyZCBGb3JzdG1hbm5cclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBpbnRmIGZyb20gJ2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XHJcblxyXG5pbXBvcnQgKiAgYXMgSUZNYXRjaCBmcm9tICcuLi9tYXRjaC9pZm1hdGNoJztcclxuXHJcbmNvbnN0IGRlYnVnbG9nID0gZGVidWcoJ2V4ZWN0ZW1wbGF0ZScpXHJcblxyXG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcblxyXG5pbXBvcnQgKiBhcyBJTWF0Y2ggZnJvbSAnLi4vbWF0Y2gvaWZtYXRjaCc7XHJcbmltcG9ydCAqIGFzIE1hdGNoIGZyb20gJy4uL21hdGNoL21hdGNoJztcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kVGVtcGxhdGUoY29udGV4dCA6IHtba2V5IDogc3RyaW5nXSA6IHN0cmluZ30gLCB0ZW1wbGF0ZSA6IHN0cmluZyApIDogc3RyaW5nIHtcclxuICB2YXIgcGF0dGVybiA9IHRlbXBsYXRlO1xyXG4gIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKHNLZXkpIHtcclxuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ3snICsgc0tleSArICd9JywgJ2cnKVxyXG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShyZWdleCwgY29udGV4dFtzS2V5XSlcclxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIGNvbnRleHRbc0tleV0pXHJcbiAgfSlcclxuICByZXR1cm4gcGF0dGVybjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSZXBsYWNlbWVudEtleXMoc3RlbXBsYXRlIDogc3RyaW5nKSA6IHN0cmluZ1tdIHtcclxuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCd7KFtefV0rKX0nLCBcImdcIik7XHJcbiAgdmFyIGtleXMgPSB7fTtcclxuICB2YXIgbTtcclxuICB3aGlsZShtID0gcmVnZXguZXhlYyhzdGVtcGxhdGUpKSB7XHJcbiAgICB2YXIgcGF0dGVybiA9IG1bMV07XHJcbiAgICBrZXlzW3BhdHRlcm5dID0gMTtcclxuICB9XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGtleXMpLnNvcnQoKTtcclxufVxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
